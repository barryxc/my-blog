<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>post</title>
      <link href="/2024/04/06/native%E8%B0%83%E8%AF%95/"/>
      <url>/2024/04/06/native%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Native-调试总结"><a href="#Native-调试总结" class="headerlink" title="Native 调试总结"></a>Native 调试总结</h1><ul><li>debug so 才可以调试，release so 不可以调试。</li><li>还原堆栈需要 &#x2F;build&#x2F;intermediates&#x2F;cmake目录下的 so 才可以</li><li>使用 sdk 工程调试另外一个 app 时需要修改 sdk工程中的 app 模块的包名和调试的 apk 一致。</li><li>通过 dlopen() 的 so，默认不执行 jni_onload，只有 java层的 system.loadlibrary()才会执行。想要执行 jni_onload 执行 so 库初始化，需要手动调用 java 层的加载机制。</li><li>dlsym()函数获取符号地址时，要保证 so 的符号被导出。可以通过 nm -D  xx.so 命令查看是否有对应的符号</li></ul><span id="more"></span><ul><li>Gcc 编译默认会命名修饰函数符号，所以需要对导出的符号进行 extern C 修饰。</li><li>debug so 默认携带调试信息，不会携带完整的符号信息。</li><li>nm xx.so 命令默认只会输出静态分析的符号，不会输出动态符号。输出动态符号需要 -D 选项。</li><li>DWARF 是一种标准的调试数据格式，用于在可执行文件中存储和描述程序的调试信息。</li></ul>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>创建mac应用</title>
      <link href="/2024/04/05/%E5%88%9B%E5%BB%BAmac%E5%BA%94%E7%94%A8/"/>
      <url>/2024/04/05/%E5%88%9B%E5%BB%BAmac%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="如何为一个-sh-脚本创建-mac-应用程序？"><a href="#如何为一个-sh-脚本创建-mac-应用程序？" class="headerlink" title="如何为一个 sh 脚本创建 mac 应用程序？"></a>如何为一个 sh 脚本创建 mac 应用程序？</h1><p><strong>创建捆绑包目录结构</strong>： 在 Finder 中，创建一个新的文件夹来作为应用程序捆绑包的根目录，并以 <code>.app</code> 扩展名命名，例如 <code>MyShellApp.app</code>。</p><p><strong>创建 Contents 目录</strong>： 在 <code>MyShellApp.app</code> 目录内部，创建一个名为 <code>Contents</code> 的子目录。</p><p><strong>创建 MacOS 目录</strong>： 在 <code>Contents</code> 目录内部，创建一个名为 <code>MacOS</code> 的子目录。这是可执行文件的存放位置。</p><p><strong>创建 Info.plist 文件</strong>： 在 <code>Contents</code> 目录中创建一个名为 <code>Info.plist</code> 的属性列表文件。这个文件包含了应用程序的元数据。以下是一个基本的 <code>Info.plist</code> 示例：</p><span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleExecutable<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>MyShellScript<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>MyShellApp<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundlePackageType<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>APPL<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleIconFile<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>MyAppIcon.icns<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>请替换相关键的值以匹配你的应用程序信息。</p><p><strong>添加你的脚本到 MacOS 目录</strong>： 将你的 shell 脚本复制到 <code>MacOS</code> 目录，并重命名为在 <code>Info.plist</code> 中指定的 <code>CFBundleExecutable</code> 的值，例如 <code>MyShellScript</code>。确保脚本具有可执行权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x MyShellApp.app/Contents/MacOS/MyShellScript</span><br></pre></td></tr></table></figure><p><strong>添加应用程序图标</strong>： 如果你有一个应用程序图标（<code>.icns</code> 文件），将其复制到 <code>Contents/Resources</code> 目录（如果不存在，则创建它），并在 <code>Info.plist</code> 文件中添加对应的键值对：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleIconFile<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>MyAppIcon.icns<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试应用程序</strong>： 移动 <code>MyShellApp.app</code> 文件夹到mac 应用程序目录，点击应用图标来运行你的应用。</p>]]></content>
      
      
      <categories>
          
          <category> mac app </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mmap机制</title>
      <link href="/2024/01/21/mmap%E6%9C%BA%E5%88%B6/"/>
      <url>/2024/01/21/mmap%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h1><blockquote><p>在 Linux 中，”mmap” 通常指的是内存映射（Memory-Mapped）机制。<code>mmap</code> 是一个系统调用，它允许应用程序将文件或设备的内容映射到进程的地址空间。这样，文件或设备的内容就可以像访问普通内存一样进行读写操作，而无需使用传统的文件读写系统调用（如 <code>read()</code> 和 <code>write()</code>）。</p><p><code>mmap</code> 机制的本质是提供一种高效的文件访问方式，通过以下几个方面实现：</p><ol><li><p><strong>直接内存访问</strong>：<br>通过将文件内容映射到进程的虚拟内存，应用程序可以直接通过内存地址访问文件数据，这避免了传统文件 I&#x2F;O 调用中的数据复制步骤。</p></li><li><p><strong>延迟加载</strong>：<br><code>mmap</code> 创建的内存映射是按需加载的，这意味着文件的内容只有在实际访问时才会被加载到物理内存中。这可以提高对大文件的处理效率，并减少内存的使用。</p></li><li><p><strong>共享内存</strong>：<br><code>mmap</code> 可以用于创建共享内存区域，允许多个进程访问同一块内存。这是进程间通信（IPC）的一种方式，也可以用于共享文件的内容。</p></li><li><p><strong>页缓存（Page Cache）</strong>：<br>使用 <code>mmap</code> 映射的文件数据会被操作系统的页缓存管理，这意味着频繁访问的数据可以保留在缓存中，从而加快访问速度。同时，对映射内存的修改可以延迟写回到文件，直到必要时才进行，这可以减少磁盘 I&#x2F;O 操作。</p></li><li><p><strong>虚拟内存管理</strong>：<br><code>mmap</code> 依赖于操作系统的虚拟内存管理机制。当进程访问映射的内存区域时，如果对应的数据尚未加载到物理内存，操作系统会自动处理缺页中断（page fault），将数据从磁盘加载到内存中。</p></li></ol><p><code>mmap</code> 系统调用通常用于需要高效文件访问的场景，如数据库管理系统、文件编辑器、多媒体应用程序等。它也是实现内存映射文件和匿名映射（不与任何文件关联的内存区域）的基础。</p><p>总的来说，<code>mmap</code> 机制的本质是通过将文件或设备内容映射到虚拟内存，提供一种高效、灵活的内存访问和文件操作方式，同时充分利用操作系统的虚拟内存和页缓存功能。</p></blockquote><span id="more"></span><h2 id="传统IO"><a href="#传统IO" class="headerlink" title="传统IO"></a>传统IO</h2><blockquote><p>传统的 I&#x2F;O 操作，通常指的是使用系统调用如 <code>read()</code> 和 <code>write()</code> 进行文件读写。这些操作涉及到用户空间和内核空间之间的数据拷贝。以下是传统 I&#x2F;O 操作中数据拷贝的一般过程：</p><h3 id="读操作-read"><a href="#读操作-read" class="headerlink" title="读操作 (read())"></a>读操作 (<code>read()</code>)</h3><ol><li><p><strong>用户空间请求</strong>：<br>应用程序执行 <code>read()</code> 系统调用，请求从文件中读取数据。它提供了一个指向用户空间缓冲区的指针，用于存储从文件中读取的数据。</p></li><li><p><strong>上下文切换</strong>：<br>系统调用导致 CPU 从用户模式切换到内核模式，因为文件 I&#x2F;O 操作是由操作系统内核管理的。</p></li><li><p><strong>内核空间缓冲</strong>：<br>内核将数据从存储设备（如硬盘）读取到内核空间的缓冲区。这通常涉及到文件系统的操作和可能的磁盘 I&#x2F;O。</p></li><li><p><strong>数据拷贝</strong>：<br>一旦数据在内核缓冲区准备好，内核会将数据从内核空间拷贝到用户空间提供的缓冲区。这个拷贝过程涉及到 CPU 和内存总线的使用。</p></li><li><p><strong>返回用户空间</strong>：<br>数据拷贝完成后，系统调用返回，CPU 从内核模式切换回用户模式，应用程序继续执行。</p></li></ol><h3 id="写操作-write"><a href="#写操作-write" class="headerlink" title="写操作 (write())"></a>写操作 (<code>write()</code>)</h3><ol><li><p><strong>用户空间请求</strong>：<br>应用程序执行 <code>write()</code> 系统调用，请求将数据写入文件。它提供了一个指向用户空间缓冲区的指针，该缓冲区包含要写入文件的数据。</p></li><li><p><strong>上下文切换</strong>：<br>类似于读操作，执行系统调用导致 CPU 从用户模式切换到内核模式。</p></li><li><p><strong>数据拷贝</strong>：<br>内核将数据从用户空间的缓冲区拷贝到内核空间的缓冲区。</p></li><li><p><strong>内核空间缓冲</strong>：<br>数据在内核缓冲区中可能会暂时存储，直到内核准备好将数据写入存储设备。</p></li><li><p><strong>写入存储设备</strong>：<br>内核将数据从内核空间缓冲区写入存储设备。这可能会立即发生，也可能会延迟，取决于缓冲策略和 I&#x2F;O 调度。</p></li><li><p><strong>返回用户空间</strong>：<br>系统调用完成后，CPU 从内核模式切换回用户模式，应用程序继续执行。</p></li></ol><p>在这两种情况下，数据在用户空间和内核空间之间的拷贝是必要的，因为操作系统为了安全和稳定性的考虑，不允许用户空间程序直接访问内核空间资源。这种数据拷贝机制是传统 I&#x2F;O 操作的一个主要性能瓶颈，因为它涉及到额外的 CPU 使用和内存带宽消耗。</p><p>为了减少这种开销，Linux 提供了零拷贝（Zero-Copy）技术，如 <code>sendfile()</code> 和 <code>splice()</code> 系统调用，它们可以在不需要将数据拷贝到用户空间的情况下，直接在内核空间中移动数据。这些技术可以显著提高 I&#x2F;O 性能，特别是在处理大量数据的网络和文件操作中。</p></blockquote><h2 id="Android-Binder-机制"><a href="#Android-Binder-机制" class="headerlink" title="Android Binder 机制"></a>Android Binder 机制</h2><blockquote><p>Android 的 Binder 机制确实使用了 <code>mmap</code> 技术，但不是完全依赖于它来实现。Binder 是 Android 中用于进程间通信（IPC）的一种高效机制，它允许应用程序和服务之间进行远程过程调用（RPC）。Binder 机制涉及到一系列复杂的步骤，包括内核驱动、用户空间的库和 <code>mmap</code> 系统调用。</p><h3 id="Binder-机制的关键组成部分："><a href="#Binder-机制的关键组成部分：" class="headerlink" title="Binder 机制的关键组成部分："></a>Binder 机制的关键组成部分：</h3><ol><li><p><strong>Binder 驱动</strong>：<br>Binder 机制在内核层面由一个特殊的 Binder 驱动支持。这个驱动负责管理 Binder 通信协议，处理进程间的数据传输和同步。</p></li><li><p><strong>Service Manager</strong>：<br>Android 系统中的 Service Manager 是 Binder 通信的中心节点，它管理着系统中所有的服务和它们的 Binder 引用。</p></li><li><p><strong>Binder 代理和引用</strong>：<br>当一个进程需要与另一个进程中的对象通信时，它通过 Binder 代理（Proxy）来发送请求。Binder 引用（Reference）是在远程进程中实际对象的代表。</p></li></ol><h3 id="mmap-在-Binder-中的使用："><a href="#mmap-在-Binder-中的使用：" class="headerlink" title="mmap 在 Binder 中的使用："></a>mmap 在 Binder 中的使用：</h3><p><code>mmap</code> 在 Binder 通信中主要用于创建共享内存区域，这个区域被称为 Binder 内存池（Binder Memory Pool）。当一个进程使用 Binder 机制进行 IPC 时，它会通过 <code>mmap</code> 将 Binder 驱动提供的一块内存映射到自己的地址空间。这样，进程可以将要传输的数据放入这块共享内存中，而不是通过读写系统调用来传输数据。</p><p>使用共享内存池的好处是：</p><ul><li>减少了数据在用户空间和内核空间之间的拷贝次数，因为数据可以直接在共享内存中进行读写。</li><li>提高了 IPC 的效率，因为 Binder 驱动可以直接访问这块共享内存，而不需要额外的拷贝操作。</li></ul><p>总的来说，Binder 机制确实使用了 <code>mmap</code> 来创建共享内存区域，这有助于提高 Android 系统中 IPC 的效率。然而，Binder 的实现远不止于此，它是一个包含内核驱动、用户空间库和多个组件的复杂系统。</p></blockquote><h2 id="mmap-共享内存"><a href="#mmap-共享内存" class="headerlink" title="mmap 共享内存"></a>mmap 共享内存</h2><blockquote><p><code>mmap</code> 系统调用在 Unix-like 系统中，包括 Linux 和 Android，可以用来实现共享内存。共享内存是一种允许两个或多个进程共享一块内存区域的机制，这样，一个进程对这块内存的修改可以被其他进程看到，从而实现进程间通信（IPC）。</p><p>以下是 <code>mmap</code> 实现共享内存的基本步骤：</p><h3 id="创建共享内存区域"><a href="#创建共享内存区域" class="headerlink" title="创建共享内存区域"></a>创建共享内存区域</h3><ol><li><p><strong>创建或打开一个文件</strong>：<br>通常，共享内存是通过映射一个文件来实现的。这个文件可以是一个实际存在的文件，也可以是一个特殊的匿名文件（在 Linux 中，这可以通过指定 <code>/dev/zero</code> 或使用 <code>MAP_ANONYMOUS</code> 标志来创建）。</p></li><li><p><strong>映射文件到内存</strong>：<br>使用 <code>mmap</code> 系统调用将文件映射到进程的地址空间。在调用 <code>mmap</code> 时，需要指定 <code>MAP_SHARED</code> 标志，这样，对映射区域的修改会反映到底层文件中，并且可以被其他映射了同一文件的进程看到。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* addr = mmap(<span class="literal">NULL</span>, length, PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>length</code> 是映射区域的大小，<code>fd</code> 是文件描述符，<code>0</code> 是从文件的哪个偏移开始映射。</p></li></ol><h3 id="访问共享内存"><a href="#访问共享内存" class="headerlink" title="访问共享内存"></a>访问共享内存</h3><ol start="3"><li><p><strong>读写内存</strong>：<br>映射成功后，进程可以像访问普通内存一样对这块区域进行读写操作。对这块内存的修改会自动同步到映射的文件中。</p></li><li><p><strong>共享给其他进程</strong>：<br>其他进程也可以通过 <code>mmap</code> 同一个文件到它们自己的地址空间，使用相同的 <code>length</code>、<code>fd</code> 和 <code>MAP_SHARED</code> 标志。这样，这些进程就可以看到由任何一个进程所做的修改。</p></li></ol><h3 id="同步和解除映射"><a href="#同步和解除映射" class="headerlink" title="同步和解除映射"></a>同步和解除映射</h3><ol start="5"><li><p><strong>同步更改</strong>：<br>使用 <code>msync</code> 系统调用可以将内存映射区域的更改同步回文件，确保数据的一致性。</p></li><li><p><strong>解除映射</strong>：<br>当进程不再需要共享内存时，它可以使用 <code>munmap</code> 系统调用来解除映射。</p></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>使用共享内存时，需要注意同步问题。多个进程同时写入同一块内存可能会导致数据竞争和不一致。因此，通常需要使用某种形式的同步机制，如互斥锁（mutexes）、信号量（semaphores）等。</li><li>在某些系统中，<code>mmap</code> 还可以用于创建共享匿名内存，这种内存不与任何文件关联，而是直接在内核中分配。这可以通过指定 <code>MAP_ANONYMOUS</code> 标志（同时 <code>fd</code> 设置为 <code>-1</code>）来实现。</li></ul><p>通过 <code>mmap</code> 实现的共享内存是一种高效的 IPC 机制，因为它避免了数据在用户空间和内核空间之间的拷贝，同时提供了一种直观的内存访问方式。</p></blockquote><h2 id="mmap-创建共享内存"><a href="#mmap-创建共享内存" class="headerlink" title="mmap 创建共享内存"></a>mmap 创建共享内存</h2><blockquote><p><code>mmap</code> 创建的共享内存映射实际上涉及到内核态和用户态两个层面：</p><ol><li><p><strong>内核态</strong>：<br>当你调用 <code>mmap</code> 时，内核会设置虚拟内存区域，并将这块区域映射到文件或匿名内存。这个映射过程是在内核态完成的，因为它需要操作系统内核来管理虚拟内存和页表。如果映射的是一个文件，内核还会负责将文件内容加载到内存中（通常是通过页缓存），以及处理缺页中断等。</p></li><li><p><strong>用户态</strong>：<br>一旦内核设置好了内存映射，映射的内存区域就会出现在进程的用户态地址空间中。进程可以像访问普通内存一样直接读写这块区域。对于进程来说，这就像是在用户态操作内存，但实际上背后的页映射和物理内存管理是由内核处理的。</p></li></ol><p>因此，可以说 <code>mmap</code> 创建的共享内存映射是由内核管理的，但它提供给用户态进程直接访问的接口。这种设计允许进程以高效的方式共享数据，同时仍由内核负责底层的内存管理和同步。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NDK常用工具</title>
      <link href="/2024/01/21/NDK%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
      <url>/2024/01/21/NDK%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="readelf"><a href="#readelf" class="headerlink" title="readelf"></a>readelf</h2><p><code>readelf</code> 是一个用于显示 ELF（Executable and Linkable Format）文件信息的命令行工具，它是 GNU Binutils 包的一部分。ELF 文件格式是在 Unix 系统上广泛使用的标准二进制格式，用于可执行文件、目标代码、共享库和核心转储（core dumps）。</p><p>以下是 <code>readelf</code> 的一些核心用法：</p><h3 id="查看文件头信息（File-Header）"><a href="#查看文件头信息（File-Header）" class="headerlink" title="查看文件头信息（File Header）"></a>查看文件头信息（File Header）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -h &lt;ELF file&gt;</span><br></pre></td></tr></table></figure><p>这个命令显示 ELF 文件的文件头信息，包括 ELF 类型（如可执行文件、共享对象等）、入口点地址、程序头表位置、段头表位置等。</p><h3 id="查看程序头表（Program-Headers）"><a href="#查看程序头表（Program-Headers）" class="headerlink" title="查看程序头表（Program Headers）"></a>查看程序头表（Program Headers）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -l &lt;ELF file&gt;</span><br></pre></td></tr></table></figure><p>程序头表描述了文件在内存中的映射。这个命令显示了每个段的信息，如类型（如 <code>LOAD</code>、<code>DYNAMIC</code> 等）、偏移、虚拟地址、物理地址、文件大小和内存大小等。</p><h3 id="查看段头表（Section-Headers）"><a href="#查看段头表（Section-Headers）" class="headerlink" title="查看段头表（Section Headers）"></a>查看段头表（Section Headers）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -S &lt;ELF file&gt;</span><br></pre></td></tr></table></figure><p>段头表包含了文件中所有段的信息。这个命令显示了每个段的名称、类型、地址、偏移、大小、链接信息、对齐和其他属性。</p><h3 id="查看符号表（Symbol-Table）"><a href="#查看符号表（Symbol-Table）" class="headerlink" title="查看符号表（Symbol Table）"></a>查看符号表（Symbol Table）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -s &lt;ELF file&gt;</span><br></pre></td></tr></table></figure><p>符号表包含了文件中的符号信息，如函数和变量名。这个命令显示了每个符号的名称、类型、大小、值（地址）和绑定信息。</p><span id="more"></span><h3 id="查看动态段信息（Dynamic-Section）"><a href="#查看动态段信息（Dynamic-Section）" class="headerlink" title="查看动态段信息（Dynamic Section）"></a>查看动态段信息（Dynamic Section）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -d &lt;ELF file&gt;</span><br></pre></td></tr></table></figure><p>动态段包含了动态链接信息，这个命令显示了动态链接器需要的条目，如所需的共享库和符号。</p><h3 id="查看重定位信息（Relocations）"><a href="#查看重定位信息（Relocations）" class="headerlink" title="查看重定位信息（Relocations）"></a>查看重定位信息（Relocations）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -r &lt;ELF file&gt;</span><br></pre></td></tr></table></figure><p>重定位条目是由链接器用来修正指针和引用地址的。这个命令显示了重定位条目的信息，包括偏移、类型和符号。</p><h3 id="查看所有信息"><a href="#查看所有信息" class="headerlink" title="查看所有信息"></a>查看所有信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -a &lt;ELF file&gt;</span><br></pre></td></tr></table></figure><p>这个命令显示了 ELF 文件的所有重要信息，包括文件头、段头表、程序头表、符号表等。</p><h3 id="查看版本信息（Version-Info）"><a href="#查看版本信息（Version-Info）" class="headerlink" title="查看版本信息（Version Info）"></a>查看版本信息（Version Info）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -V &lt;ELF file&gt;</span><br></pre></td></tr></table></figure><p>这个命令显示了文件的版本信息，包括版本符号表和版本需求表。</p><h3 id="查看注释段（Note-Sections）"><a href="#查看注释段（Note-Sections）" class="headerlink" title="查看注释段（Note Sections）"></a>查看注释段（Note Sections）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -n &lt;ELF file&gt;</span><br></pre></td></tr></table></figure><p>注释段通常包含了额外的系统特定信息，这个命令显示了这些信息。</p><p><code>readelf</code> 是一个功能强大的工具，它可以帮助开发者深入理解 ELF 文件的结构和内容。上述命令是 <code>readelf</code> 的一些核心用法，但它还有更多的选项和功能，可以通过 <code>readelf --help</code> 或 <code>man readelf</code> 来查看更多信息。</p><h2 id="NM"><a href="#NM" class="headerlink" title="NM"></a>NM</h2><p><code>nm</code> 是一个在 Unix-like 系统中用于检查二进制文件中符号信息的命令行工具，它是 GNU Binutils 包的一部分。符号通常指的是变量、函数、对象等编程元素的名称。<code>nm</code> 能够列出从目标文件（如 <code>.o</code> 文件）、库文件（如 <code>.a</code> 或 <code>.so</code> 文件）或可执行文件中提取的符号列表。</p><p>以下是 <code>nm</code> 的一些核心用法：</p><h3 id="列出所有符号"><a href="#列出所有符号" class="headerlink" title="列出所有符号"></a>列出所有符号</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm &lt;file&gt;</span><br></pre></td></tr></table></figure><p>这个命令会列出指定文件中的所有符号，包括变量名、函数名等。输出通常包括符号的地址、符号类型和符号名称。</p><h3 id="只显示未定义的符号"><a href="#只显示未定义的符号" class="headerlink" title="只显示未定义的符号"></a>只显示未定义的符号</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm -u &lt;file&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>-u</code> 选项可以只显示未定义的符号，即那些在目标文件中引用但未定义的符号，这些符号需要在链接时由其他目标文件或库提供。</p><h3 id="按照地址排序"><a href="#按照地址排序" class="headerlink" title="按照地址排序"></a>按照地址排序</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm -n &lt;file&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>-n</code> 或 <code>--numeric-sort</code> 选项可以按照符号地址排序输出结果。</p><h3 id="显示符号大小"><a href="#显示符号大小" class="headerlink" title="显示符号大小"></a>显示符号大小</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm --size-sort &lt;file&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>--size-sort</code> 选项可以按照符号大小排序输出结果。</p><h3 id="解码（Demangle）C-符号名称"><a href="#解码（Demangle）C-符号名称" class="headerlink" title="解码（Demangle）C++ 符号名称"></a>解码（Demangle）C++ 符号名称</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm -C &lt;file&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>-C</code> 或 <code>--demangle</code> 选项可以解码（demangle）C++ 符号名称，使得它们更易于阅读。C++ 符号名称经过修饰（mangling）以包含类型和作用域信息，<code>nm</code> 可以将这些修饰过的名称转换回人类可读的形式。</p><h3 id="显示行号信息"><a href="#显示行号信息" class="headerlink" title="显示行号信息"></a>显示行号信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm -l &lt;file&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>-l</code> 选项可以显示与符号相关的源代码行号信息（如果可用）。</p><h3 id="显示符号类型"><a href="#显示符号类型" class="headerlink" title="显示符号类型"></a>显示符号类型</h3><p><code>nm</code> 输出中的每个符号旁边通常会有一个字符表示符号的类型，例如：</p><ul><li><code>T</code> 表示符号在文本（代码）段中定义。</li><li><code>U</code> 表示符号未定义。</li><li><code>B</code> 表示符号在未初始化的数据段（bss）中定义。</li><li><code>D</code> 表示符号在初始化的数据段中定义。</li><li><code>R</code> 表示符号在只读数据段中定义。</li><li><code>?</code> 表示符号类型未知。</li></ul><p>符号类型字符可能是大写或小写，大写通常表示全局符号，小写表示局部符号。</p><p><code>nm</code> 是一个非常有用的工具，特别是在调试和分析二进制文件的符号信息时。上述命令是 <code>nm</code> 的一些基本用法，但它还有更多的选项和功能，可以通过 <code>nm --help</code> 或 <code>man nm</code> 来查看更多信息。</p><h2 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h2><p><code>objdump</code> 是 GNU Binutils 包中的一个工具，用于显示二进制文件（如可执行文件、目标文件和库文件）的各种信息。它可以用来反汇编代码、显示二进制文件的结构、查看节（section）的内容等。</p><p>以下是 <code>objdump</code> 的一些核心用法：</p><h3 id="反汇编代码"><a href="#反汇编代码" class="headerlink" title="反汇编代码"></a>反汇编代码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -d &lt;file&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>-d</code> 或 <code>--disassemble</code> 选项可以反汇编文件中的机器代码，将其转换为汇编语言。这对于理解程序的执行流程非常有用。</p><h3 id="显示所有头信息"><a href="#显示所有头信息" class="headerlink" title="显示所有头信息"></a>显示所有头信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -x &lt;file&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>-x</code> 选项可以显示文件的所有头信息，包括文件头、程序头、节头等。</p><h3 id="显示特定节的内容"><a href="#显示特定节的内容" class="headerlink" title="显示特定节的内容"></a>显示特定节的内容</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -s -j .text &lt;file&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>-s</code> 或 <code>--full-contents</code> 选项，结合 <code>-j</code> 或 <code>--section</code> 选项，可以显示指定节（如 <code>.text</code> 节）的内容。</p><h3 id="显示符号表"><a href="#显示符号表" class="headerlink" title="显示符号表"></a>显示符号表</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -t &lt;file&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>-t</code> 或 <code>--syms</code> 选项可以显示文件的符号表，包括函数和变量的名称、地址等信息。</p><h3 id="显示重定位信息"><a href="#显示重定位信息" class="headerlink" title="显示重定位信息"></a>显示重定位信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -r &lt;file&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>-r</code> 或 <code>--reloc</code> 选项可以显示文件的重定位信息，这对于理解链接器如何解析符号非常有用。</p><h3 id="显示动态符号表"><a href="#显示动态符号表" class="headerlink" title="显示动态符号表"></a>显示动态符号表</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -T &lt;file&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>-T</code> 选项可以显示动态符号表，这对于分析共享库中的符号特别有用。</p><h3 id="显示文件的节和段信息"><a href="#显示文件的节和段信息" class="headerlink" title="显示文件的节和段信息"></a>显示文件的节和段信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -h &lt;file&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>-h</code> 或 <code>--section-headers</code> 选项可以显示文件的节头信息，包括每个节的名称、大小、地址等。</p><h3 id="显示汇编代码和源代码"><a href="#显示汇编代码和源代码" class="headerlink" title="显示汇编代码和源代码"></a>显示汇编代码和源代码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -S &lt;file&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>-S</code> 或 <code>--source</code> 选项可以将汇编代码与源代码交错显示，这需要编译时包含调试信息。</p><h3 id="反汇编特定函数"><a href="#反汇编特定函数" class="headerlink" title="反汇编特定函数"></a>反汇编特定函数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -d --start-address=&lt;address&gt; --stop-address=&lt;address&gt; &lt;file&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>--start-address</code> 和 <code>--stop-address</code> 选项可以反汇编从某个地址开始到另一个地址结束的代码区域。这对于只查看特定函数的汇编代码非常有用。</p><p><code>objdump</code> 是一个非常强大的工具，它提供了多种选项来查看和分析二进制文件的不同方面。上述命令是 <code>objdump</code> 的一些核心用法，但它还有更多的选项和功能，可以通过 <code>objdump --help</code> 或 <code>man objdump</code> 来查看更多信息。</p><h2 id="ndk-stack"><a href="#ndk-stack" class="headerlink" title="ndk-stack"></a>ndk-stack</h2><p><code>ndk-stack</code> 是一个随 Android Native Development Kit (NDK) 提供的工具，它用于将 Android 应用程序的原生崩溃日志（通常包含内存地址）转换为更易于理解的符号化堆栈跟踪，其中包括函数名、源文件名和行号。这个工具特别有用，因为它可以帮助开发者分析和调试 C 或 C++ 代码中的崩溃问题。</p><h3 id="核心用法"><a href="#核心用法" class="headerlink" title="核心用法"></a>核心用法</h3><p>要使用 <code>ndk-stack</code>，你需要提供崩溃时的日志和未剥离（包含调试符号的）的二进制文件。以下是 <code>ndk-stack</code> 的基本用法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndk-stack -sym &lt;path-to-unstripped-libs&gt; -dump &lt;path-to-crash-log&gt;</span><br></pre></td></tr></table></figure><ul><li><p><code>-sym &lt;path-to-unstripped-libs&gt;</code>：这个选项后面跟的是包含未剥离二进制文件（如 <code>.so</code> 文件）的目录路径。这些文件包含了必要的调试符号，<code>ndk-stack</code> 需要它们来解析崩溃日志中的地址。</p></li><li><p><code>-dump &lt;path-to-crash-log&gt;</code>：这个选项后面跟的是包含崩溃日志的文件路径。你可以从设备的 <code>logcat</code> 输出中获取这个日志。</p></li></ul><h3 id="实时解析"><a href="#实时解析" class="headerlink" title="实时解析"></a>实时解析</h3><p>如果你想要实时地从 <code>adb logcat</code> 解析崩溃日志，可以使用管道（pipe）将 <code>logcat</code> 的输出直接传递给 <code>ndk-stack</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat | ndk-stack -sym &lt;path-to-unstripped-libs&gt;</span><br></pre></td></tr></table></figure><p>这个命令会启动 <code>logcat</code> 并实时显示日志输出，同时 <code>ndk-stack</code> 会读取这些输出并将崩溃相关的地址符号化。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>确保你使用的是与崩溃时应用程序相匹配的未剥离的二进制文件。如果版本不匹配，符号化的输出可能是不准确的。</li><li><code>ndk-stack</code> 只能解析由 NDK 编译的原生代码崩溃。对于 Java 层的崩溃，你需要使用其他工具，如 Android Studio 或 <code>logcat</code>。</li></ul><p><code>ndk-stack</code> 是一个非常有用的工具，它可以大大简化 Android 原生代码崩溃分析的过程。通过将内存地址映射到源代码中的具体位置，开发者可以更快地定位和修复崩溃的原因。</p><h2 id="addr2line"><a href="#addr2line" class="headerlink" title="addr2line"></a>addr2line</h2><p><code>addr2line</code> 是 GNU Binutils 包中的一个工具，它用于将程序的地址转换为源代码中的文件名和行号。这个工具在分析程序崩溃时特别有用，因为它可以帮助开发者从崩溃日志中的地址信息定位到源代码的具体位置。</p><h3 id="核心用法-1"><a href="#核心用法-1" class="headerlink" title="核心用法"></a>核心用法</h3><p>要使用 <code>addr2line</code>，你需要提供程序的地址和包含调试信息的二进制文件（通常是未剥离的可执行文件或共享库）。以下是 <code>addr2line</code> 的基本用法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addr2line -e &lt;executable-or-library&gt; &lt;address&gt;</span><br></pre></td></tr></table></figure><ul><li><p><code>-e &lt;executable-or-library&gt;</code>：这个选项后面跟的是包含调试信息的二进制文件的路径。这个文件用于查找地址对应的源代码位置。</p></li><li><p><code>&lt;address&gt;</code>：这是你想要转换的内存地址。这个地址通常来自于程序的崩溃日志或者堆栈跟踪。</p></li></ul><h3 id="解析多个地址"><a href="#解析多个地址" class="headerlink" title="解析多个地址"></a>解析多个地址</h3><p>如果你有多个地址需要解析，可以将它们一起传递给 <code>addr2line</code>，每个地址占一行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addr2line -e &lt;executable-or-library&gt; &lt;address1&gt; &lt;address2&gt; &lt;address3&gt;</span><br></pre></td></tr></table></figure><p>或者，你可以将地址列表保存到一个文件中，然后使用输入重定向：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addr2line -e &lt;executable-or-library&gt; &lt; addresses.txt</span><br></pre></td></tr></table></figure><h3 id="显示函数名"><a href="#显示函数名" class="headerlink" title="显示函数名"></a>显示函数名</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addr2line -f -e &lt;executable-or-library&gt; &lt;address&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>-f</code> 或 <code>--functions</code> 选项可以显示地址对应的函数名，这有助于更好地理解崩溃的上下文。</p><h3 id="解码（Demangle）C-符号名称-1"><a href="#解码（Demangle）C-符号名称-1" class="headerlink" title="解码（Demangle）C++ 符号名称"></a>解码（Demangle）C++ 符号名称</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addr2line -C -f -e &lt;executable-or-library&gt; &lt;address&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>-C</code> 或 <code>--demangle</code> 选项可以解码（demangle）C++ 符号名称，使得它们更易于阅读。</p><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>确保你使用的是与崩溃时应用程序相匹配的未剥离的二进制文件。如果版本不匹配，<code>addr2line</code> 的输出可能是不准确的。</li><li><code>addr2line</code> 默认假设地址是相对于可执行文件或库的基地址的。如果你的地址是从共享库中获取的，你可能需要计算库被加载时的基地址偏移。</li></ul><p><code>addr2line</code> 是一个非常有用的工具，它可以帮助开发者快速从程序的地址信息定位到源代码的具体位置，从而加速调试和问题解决的过程。</p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> symbols </tag>
            
            <tag> ndk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac装机必备</title>
      <link href="/2024/01/18/mac%E8%A3%85%E6%9C%BA%E5%BF%85%E5%A4%87%E7%8E%AF%E5%A2%83/"/>
      <url>/2024/01/18/mac%E8%A3%85%E6%9C%BA%E5%BF%85%E5%A4%87%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h4 id="软件工具"><a href="#软件工具" class="headerlink" title="软件工具"></a>软件工具</h4><ol><li><p>安装 <code>hombrew</code> 包管理器 <a href="https://brew.sh/">https://brew.sh/</a></p></li><li><p>安装 <code>iterm2</code> 工具 <a href="https://iterm2.com/">https://iterm2.com/</a></p></li><li><p>安装 <code>oh-my-zsh</code> 插件 <a href="https://ohmyz.sh/">https://ohmyz.sh/</a></p></li><li><p>安装 <code>git</code> 命令行工具 <code>brew install git</code> <a href="https://git-scm.com/">https://git-scm.com/</a></p><span id="more"></span></li><li><p>安装 <code>git-cz</code> 插件 <a href="https://github.com/commitizen/cz-cli">https://github.com/commitizen/cz-cli</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g commitizen</span><br><span class="line">npm install -g cz-conventional-changelog</span><br><span class="line">echo &#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27; &gt; ~/.czrc</span><br></pre></td></tr></table></figure></li><li><p>安装 <code>jdgui</code> 工具 <a href="https://java-decompiler.github.io/">https://java-decompiler.github.io/</a></p></li><li><p>安装 <code>jadx</code> 工具 <a href="https://github.com/skylot/jadx">https://github.com/skylot/jadx</a></p></li><li><p>安装 <code>apktool</code> 反编译以及重打包 工具 <a href="https://apktool.org/">https://apktool.org/</a></p></li><li><p>安装 <code>ghidra</code> 反编译工具(c&#x2F;c++反编译) <a href="https://github.com/NationalSecurityAgency/ghidra">https://github.com/NationalSecurityAgency/ghidra</a></p></li><li><p>安装 <code>colc</code> 代码统计工具 <a href="https://github.com/AlDanial/cloc?tab=readme-ov-file#install-via-package-manager">https://github.com/AlDanial/cloc?tab=readme-ov-file#install-via-package-manager</a></p></li><li><p>安装 <code>node</code> 环境 <code>--global</code> 全局安装 <a href="https://nodejs.org/en">https://nodejs.org/en</a></p></li><li><p>安装 <code>typora</code> 以及  <code>PicList</code> 图床软件, 设置 <code>github</code> 图床 <a href="https://piclist.cn/">https://piclist.cn/</a></p></li><li><p>安装 <code>hexo</code> 工具 <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p></li><li><p>安装 <code>postman</code> 网络请求工具 <a href="https://www.postman.com/">https://www.postman.com/</a></p></li><li><p>安装 <code>alfred</code> 工具 <a href="https://www.alfredapp.com/">https://www.alfredapp.com/</a></p></li><li><p>安装<code>youdao</code>有道翻译工作流插件 <a href="https://github.com/wensonsmith/YoudaoTranslator">https://github.com/wensonsmith/YoudaoTranslator</a></p></li><li><p>安装 <code>sublime</code> <a href="https://www.sublimetext.com/">https://www.sublimetext.com/</a> </p></li><li><p>安装 <code>submlime HTML-CSS-JS Prettify</code> 插件，步骤： <code>Tools</code>-&gt;<code>Command Palette</code>-&gt;<code>Package Control:Install Package </code> </p></li><li><p>安装 <code>submlime shellcheck </code>插件，步骤： <code>Tools</code>-&gt;<code>Command Palette</code>-&gt;<code>Package Control:Install Package </code> </p></li><li><p>安装 <code>vscode</code> 开发工具 <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p></li><li><p>安装 <code>idea</code> 开发工具 <a href="https://www.jetbrains.com/zh-cn/idea/">https://www.jetbrains.com/zh-cn/idea/</a></p></li><li><p>安装 <code>Clion</code> 开发工具 <a href="https://www.jetbrains.com.cn/clion/">https://www.jetbrains.com.cn/clion/</a></p></li><li><p>安装 <code>charles</code> 抓包工具 <a href="https://www.charlesproxy.com/">https://www.charlesproxy.com/</a></p></li><li><p>安装 <code>android studio</code>开发工具 <a href="https://developer.android.com/studio">https://developer.android.com/studio</a></p></li></ol><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ol><li>配置 <code>ssh</code> 环境、<code>github ssh</code> 环境</li><li>配置 <code>.zshrc</code> 配置文件以及<code>PATH</code>环境变量</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME=/Users/$USER/Library/Android/sdk</span><br><span class="line">export JAVA_HOME=$(/usr/libexec/java_home)</span><br><span class="line">export ANDROID_NDK_HOME=$&#123;ANDROID_HOME&#125;/ndk/21.1.6352462</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools/</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools/</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools/bin/</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_NDK_HOME&#125;/</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_NDK_HOME&#125;/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/build-tools/34.0.0/</span><br><span class="line">export PATH=$&#123;PATH&#125;:.</span><br></pre></td></tr></table></figure><ol start="3"><li><p>添加当前目录到 PATH 中，可以避免每次执行文件时添加 <code>./ </code>前缀:  <code>export PATH=$&#123;PATH&#125;:.</code></p></li><li><p>解决 <code>git</code> 中文路径显示 <code>unicode</code> 代码问题 <code>git config --global core.quotepath false</code></p></li><li><p>操作：在当前的目录中打开 <code>iterm2  </code>命令行工具 : <a href="https://support.apple.com/zh-cn/guide/terminal/trmlb20c7888/mac">https://support.apple.com/zh-cn/guide/terminal/trmlb20c7888/mac</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> mac装机必备 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac装机必备 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yuv转png命令</title>
      <link href="/2023/12/12/yuv%E8%BD%ACpng%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/12/12/yuv%E8%BD%ACpng%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -s 640x480  -i image.yuv  image.png</span><br></pre></td></tr></table></figure><ul><li>-s 宽x高、图像实际大小</li><li>-i 输入文件 <code>yuv</code> 格式</li><li>输出文件  <code>.png</code> 输出图像格式</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>adb文档大全</title>
      <link href="/2023/12/12/adb%E6%96%87%E6%A1%A3%E5%A4%A7%E5%85%A8/"/>
      <url>/2023/12/12/adb%E6%96%87%E6%A1%A3%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Android Debug Bridge version 1.0.41</span><br><span class="line">Version 30.0.5-6877874</span><br></pre></td></tr></table></figure><h2 id="global-options"><a href="#global-options" class="headerlink" title="global options"></a><code>global options</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-a         listen on all network interfaces, not just localhost</span><br><span class="line">-d         use USB device (error if multiple devices connected)</span><br><span class="line">-e         use TCP/IP device (error if multiple TCP/IP devices available)</span><br><span class="line">-s SERIAL  use device with given serial (overrides $ANDROID_SERIAL)</span><br><span class="line">-t ID      use device with given transport id</span><br><span class="line">-H         name of adb server host [default=localhost]</span><br><span class="line">-P         port of adb server [default=5037]</span><br><span class="line">-L SOCKET  listen on given socket for adb server [default=tcp:localhost:5037]</span><br></pre></td></tr></table></figure><h2 id="general-commands"><a href="#general-commands" class="headerlink" title="general commands"></a><code>general commands</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devices [-l]             list connected devices (-l for long output)</span><br><span class="line">help                     show this help message</span><br><span class="line">version                  show version num</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="networking"><a href="#networking" class="headerlink" title="networking"></a><code>networking</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">connect HOST[:PORT]      connect to a device via TCP/IP [default port=5555]</span><br><span class="line">disconnect [HOST[:PORT]]</span><br><span class="line">    disconnect from given TCP/IP device [default port=5555], or all</span><br><span class="line">pair HOST[:PORT] [PAIRING CODE]</span><br><span class="line">    pair with a device for secure TCP/IP communication</span><br><span class="line">forward --list           list all forward socket connections</span><br><span class="line">forward [--no-rebind] LOCAL REMOTE</span><br><span class="line">    forward socket connection using:</span><br><span class="line">      tcp:&lt;port&gt; (&lt;local&gt; may be &quot;tcp:0&quot; to pick any open port)</span><br><span class="line">      localabstract:&lt;unix domain socket name&gt;</span><br><span class="line">      localreserved:&lt;unix domain socket name&gt;</span><br><span class="line">      localfilesystem:&lt;unix domain socket name&gt;</span><br><span class="line">      dev:&lt;character device name&gt;</span><br><span class="line">      jdwp:&lt;process pid&gt; (remote only)</span><br><span class="line">      acceptfd:&lt;fd&gt; (listen only)</span><br><span class="line">forward --remove LOCAL   remove specific forward socket connection</span><br><span class="line">forward --remove-all     remove all forward socket connections</span><br><span class="line">ppp TTY [PARAMETER...]   run PPP over USB</span><br><span class="line">reverse --list           list all reverse socket connections from device</span><br><span class="line">reverse [--no-rebind] REMOTE LOCAL</span><br><span class="line">    reverse socket connection using:</span><br><span class="line">      tcp:&lt;port&gt; (&lt;remote&gt; may be &quot;tcp:0&quot; to pick any open port)</span><br><span class="line">      localabstract:&lt;unix domain socket name&gt;</span><br><span class="line">      localreserved:&lt;unix domain socket name&gt;</span><br><span class="line">      localfilesystem:&lt;unix domain socket name&gt;</span><br><span class="line">reverse --remove REMOTE  remove specific reverse socket connection</span><br><span class="line">reverse --remove-all     remove all reverse socket connections from device</span><br><span class="line">mdns check               check if mdns discovery is available</span><br><span class="line">mdns services            list all discovered services</span><br></pre></td></tr></table></figure><h2 id="file-transfer"><a href="#file-transfer" class="headerlink" title="file transfer"></a><code>file transfer</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">push [--sync] [-z ALGORITHM] [-Z] LOCAL... REMOTE</span><br><span class="line">    copy local files/directories to device</span><br><span class="line">    --sync: only push files that are newer on the host than the device</span><br><span class="line">    -n: dry run: push files to device without storing to the filesystem</span><br><span class="line">    -z: enable compression with a specified algorithm (any, none, brotli)</span><br><span class="line">    -Z: disable compression</span><br><span class="line">pull [-a] [-z ALGORITHM] [-Z] REMOTE... LOCAL</span><br><span class="line">    copy files/dirs from device</span><br><span class="line">    -a: preserve file timestamp and mode</span><br><span class="line">    -z: enable compression with a specified algorithm (any, none, brotli)</span><br><span class="line">    -Z: disable compression</span><br><span class="line">sync [-l] [-z ALGORITHM] [-Z] [all|data|odm|oem|product|system|system_ext|vendor]</span><br><span class="line">    sync a local build from $ANDROID_PRODUCT_OUT to the device (default all)</span><br><span class="line">    -n: dry run: push files to device without storing to the filesystem</span><br><span class="line">    -l: list files that would be copied, but don&#x27;t copy them</span><br><span class="line">    -z: enable compression with a specified algorithm (any, none, brotli)</span><br><span class="line">    -Z: disable compression</span><br></pre></td></tr></table></figure><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a><code>shell</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">shell [-e ESCAPE] [-n] [-Tt] [-x] [COMMAND...]</span><br><span class="line">     run remote shell command (interactive shell if no command given)</span><br><span class="line">     -e: choose escape character, or &quot;none&quot;; default &#x27;~&#x27;</span><br><span class="line">     -n: don&#x27;t read from stdin</span><br><span class="line">     -T: disable pty allocation</span><br><span class="line">     -t: allocate a pty if on a tty (-tt: force pty allocation)</span><br><span class="line">     -x: disable remote exit codes and stdout/stderr separation</span><br><span class="line"> emu COMMAND              run emulator console command</span><br><span class="line"></span><br><span class="line">app installation (see also `adb shell cmd package help`):</span><br><span class="line"> install [-lrtsdg] [--instant] PACKAGE</span><br><span class="line">     push a single package to the device and install it</span><br><span class="line"> install-multiple [-lrtsdpg] [--instant] PACKAGE...</span><br><span class="line">     push multiple APKs to the device for a single package and install them</span><br><span class="line"> install-multi-package [-lrtsdpg] [--instant] PACKAGE...</span><br><span class="line">     push one or more packages to the device and install them atomically</span><br><span class="line">     -r: replace existing application</span><br><span class="line">     -t: allow test packages</span><br><span class="line">     -d: allow version code downgrade (debuggable packages only)</span><br><span class="line">     -p: partial application install (install-multiple only)</span><br><span class="line">     -g: grant all runtime permissions</span><br><span class="line">     --abi ABI: override platform&#x27;s default ABI</span><br><span class="line">     --instant: cause the app to be installed as an ephemeral install app</span><br><span class="line">     --no-streaming: always push APK to device and invoke Package Manager as separate steps</span><br><span class="line">     --streaming: force streaming APK directly into Package Manager</span><br><span class="line">     --fastdeploy: use fast deploy</span><br><span class="line">     --no-fastdeploy: prevent use of fast deploy</span><br><span class="line">     --force-agent: force update of deployment agent when using fast deploy</span><br><span class="line">     --date-check-agent: update deployment agent when local version is newer and using fast deploy</span><br><span class="line">     --version-check-agent: update deployment agent when local version has different version code and using fast deploy</span><br><span class="line">     --local-agent: locate agent files from local source build (instead of SDK location)</span><br><span class="line">     (See also `adb shell pm help` for more options.)</span><br><span class="line"> uninstall [-k] PACKAGE</span><br><span class="line">     remove this app package from the device</span><br><span class="line">     &#x27;-k&#x27;: keep the data and cache directories</span><br></pre></td></tr></table></figure><h2 id="debugging"><a href="#debugging" class="headerlink" title="debugging"></a><code>debugging</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bugreport [PATH]</span><br><span class="line">     write bugreport to given PATH [default=bugreport.zip];</span><br><span class="line">     if PATH is a directory, the bug report is saved in that directory.</span><br><span class="line">     devices that don&#x27;t support zipped bug reports output to stdout.</span><br><span class="line"> jdwp                     list pids of processes hosting a JDWP transport</span><br><span class="line"> logcat                   show device log (logcat --help for more)</span><br></pre></td></tr></table></figure><h2 id="security"><a href="#security" class="headerlink" title="security"></a><code>security</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">disable-verity           disable dm-verity checking on userdebug builds</span><br><span class="line">enable-verity            re-enable dm-verity checking on userdebug builds</span><br><span class="line">keygen FILE</span><br><span class="line">    generate adb public/private key; private key stored in FILE,</span><br></pre></td></tr></table></figure><h2 id="scripting"><a href="#scripting" class="headerlink" title="scripting"></a><code>scripting</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">wait-for[-TRANSPORT]-STATE...</span><br><span class="line">     wait for device to be in a given state</span><br><span class="line">     STATE: device, recovery, rescue, sideload, bootloader, or disconnect</span><br><span class="line">     TRANSPORT: usb, local, or any [default=any]</span><br><span class="line"> get-state                print offline | bootloader | device</span><br><span class="line"> get-serialno             print &lt;serial-number&gt;</span><br><span class="line"> get-devpath              print &lt;device-path&gt;</span><br><span class="line"> remount [-R]</span><br><span class="line">      remount partitions read-write. if a reboot is required, -R will</span><br><span class="line">      will automatically reboot the device.</span><br><span class="line"> reboot [bootloader|recovery|sideload|sideload-auto-reboot]</span><br><span class="line">     reboot the device; defaults to booting system image but</span><br><span class="line">     supports bootloader and recovery too. sideload reboots</span><br><span class="line">     into recovery and automatically starts sideload mode,</span><br><span class="line">     sideload-auto-reboot is the same but reboots after sideloading.</span><br><span class="line"> sideload OTAPACKAGE      sideload the given full OTA package</span><br><span class="line"> root                     restart adbd with root permissions</span><br><span class="line"> unroot                   restart adbd without root permissions</span><br><span class="line"> usb                      restart adbd listening on USB</span><br><span class="line"> tcpip PORT               restart adbd listening on TCP on PORT</span><br></pre></td></tr></table></figure><h2 id="internal-debugging"><a href="#internal-debugging" class="headerlink" title="internal debugging"></a><code>internal debugging</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start-server             ensure that there is a server running</span><br><span class="line"> kill-server              kill the server if it is running</span><br><span class="line"> reconnect                kick connection from host side to force reconnect</span><br><span class="line"> reconnect device         kick connection from device side to force reconnect</span><br><span class="line"> reconnect offline        reset offline/unauthorized devices to force reconnect</span><br></pre></td></tr></table></figure><h2 id="environment-variables"><a href="#environment-variables" class="headerlink" title="environment variables"></a><code>environment variables</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ADB_TRACE</span><br><span class="line">    comma-separated list of debug info to log:</span><br><span class="line">    all,adb,sockets,packets,rwx,usb,sync,sysdeps,transport,jdwp</span><br><span class="line">$ADB_VENDOR_KEYS         colon-separated list of keys (files or directories)</span><br><span class="line">$ANDROID_SERIAL          serial number to connect to (see -s)</span><br><span class="line">$ANDROID_LOG_TAGS        tags to be used by logcat (see logcat --help)</span><br><span class="line">$ADB_LOCAL_TRANSPORT_MAX_PORT max emulator scan port (default 5585, 16 emus)</span><br><span class="line">$ADB_MDNS_AUTO_CONNECT   comma-separated list of mdns services to allow auto-connect (default adb-tls-connect)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gradle参数传递踩坑</title>
      <link href="/2023/12/12/gradle%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E8%B8%A9%E5%9D%91/"/>
      <url>/2023/12/12/gradle%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>gradle 参数传递默认为 <code>string</code> 类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew -Pflag=false</span><br></pre></td></tr></table></figure><p>参数为字符串类型时，这里判断为始终为真</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误</span></span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">  <span class="comment">//todo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//正确</span></span><br><span class="line"><span class="keyword">if</span> (Boolean.valueOf(flag)) &#123;</span><br><span class="line">   <span class="comment">//todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>proguard指南</title>
      <link href="/2023/12/12/proguard%E6%8C%87%E5%8D%97/"/>
      <url>/2023/12/12/proguard%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h4 id="本地帮助手册"><a href="#本地帮助手册" class="headerlink" title="本地帮助手册"></a>本地帮助手册</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file:///Users/barry/Library/Android/sdk/tools/proguard/docs/index.html</span><br></pre></td></tr></table></figure><h4 id="本地proguard-android-txt文件路径"><a href="#本地proguard-android-txt文件路径" class="headerlink" title="本地proguard-android.txt文件路径"></a>本地proguard-android.txt文件路径</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file:///Users/barry/Library/Android/sdk/tools/proguard/proguard-android.txt</span><br></pre></td></tr></table></figure><h4 id="掘金文档地址"><a href="#掘金文档地址" class="headerlink" title="掘金文档地址"></a>掘金文档地址</h4><p><a href="https://juejin.cn/post/6844903474740592647#heading-11">https://juejin.cn/post/6844903474740592647#heading-11</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>clion交叉编译</title>
      <link href="/2023/12/12/clion%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"/>
      <url>/2023/12/12/clion%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p>编译 android 平台产物</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2021/png/3756563/1621793280166-b7803ca4-0db1-438e-8523-ee00961efbaa.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-DCMAKE_TOOLCHAIN_FILE=/Users/barry/Library/Android/sdk/ndk/20.0.5594570/build/cmake/android.toolchain.cmake</span><br><span class="line">-DANDROID_ABI=armeabi-v7a</span><br></pre></td></tr></table></figure><p><strong>参考文档</strong></p><ul><li><a href="https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#id22">Cross Compiling for Android</a></li><li><a href="https://blog.csdn.net/jirryzhang/article/details/72793363">Cmake交叉编译详解</a></li><li><a href="https://developer.android.com/ndk/guides/cmake#command-line">CMake 工具链文件</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql执行顺序</title>
      <link href="/2023/12/12/sql%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
      <url>/2023/12/12/sql%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>MySQL中的SQL语句执行顺序，通常指的是查询（SELECT）语句的各个组成部分的逻辑执行顺序。虽然我们按照一定的语法顺序编写SQL语句，但是数据库系统在查询优化和执行过程中，并不是按照我们编写的顺序执行的。</p><p>以下是一个典型的SELECT语句的编写顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 SELECT</span><br><span class="line">2 FROM</span><br><span class="line">3 WHERE</span><br><span class="line">4 GROUP BY</span><br><span class="line">5 HAVING</span><br><span class="line">6 ORDER BY</span><br><span class="line">7 LIMIT</span><br></pre></td></tr></table></figure><p>然而，MySQL实际执行这些操作的顺序大致如下：</p><ol><li><code>FROM</code>：确定要从哪个表（或者多个表的连接）中检索数据。</li><li><code>ON</code>：应用JOIN条件，用于多个表的情况。</li><li><code>JOIN</code>：如果有多个表需要连接，会在这个阶段进行。</li><li><code>WHERE</code>：根据指定的条件对数据进行过滤。</li><li><code>GROUP BY</code>：将数据分组，通常用于聚合函数（如COUNT, SUM, AVG等）。</li><li><code>HAVING</code>：对分组后的结果进行过滤，通常与<code>GROUP BY</code>联合使用。</li><li><code>SELECT</code>：选取表中的特定列，如果有表达式或者聚合函数，也会在这一步计算。</li><li><code>DISTINCT</code>：去除重复的行，保证查询结果的唯一性。</li><li><code>ORDER BY</code>：对查询结果进行排序，这一步通常在所有的行被选取之后进行。</li><li><code>LIMIT</code>：限制查询结果的数量，通常用于分页。</li></ol><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2022/png/3756563/1646040380722-35134ac9-0435-4374-9914-8a7efca59682.png" alt="img"></p><p>需要注意的是，执行顺序并不是绝对固定的，数据库优化器可能会根据各种因素（如索引的存在，表的大小等）对执行计划进行调整，以提高查询的效率。因此，上述顺序应当被视为一种逻辑执行顺序，而不是实际的物理执行顺序。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>准召率定义</title>
      <link href="/2023/12/12/%E5%87%86%E5%8F%AC%E7%8E%87%E5%AE%9A%E4%B9%89/"/>
      <url>/2023/12/12/%E5%87%86%E5%8F%AC%E7%8E%87%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>一个模型的好坏，要看它的准召率是否高。</p><p><strong>定义：准是准确率，召是召回率。</strong></p><p>假设我们在验证一个反垃圾模型，1000个样本里面有500个垃圾，我们抓出了1个样本，且这个样本为垃圾。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">正确率 = 提取出的正确信息条数 / 提取出的信息条数</span><br><span class="line">召回率 = 提取出的正确信息条数 / 样本中的信息条数</span><br><span class="line">那么准确率 1/1=100%</span><br><span class="line">而召回率 1/500=0.2%</span><br></pre></td></tr></table></figure><p>由此可见这个模型是有问题的，虽然抓得对，但是垃圾抓得不全。</p><p>再举一个例子，假设世界上只有一个脏话：“傻逼”，然后模型的规则是，只要包含“傻逼”两个字，就是垃圾评论，那么你的准确率和召回率都是100%，这个模型一个字好。</p><p>结果，键盘侠发现了，他把“傻逼”改成了“煞笔”，完蛋了，你的模型找不出这个垃圾，但是此时，你的模型的准确率，还是100%，可你的召回率不堪入目，因为漏掉了“煞笔”这类垃圾。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>音视频基础</title>
      <link href="/2023/12/12/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/12/12/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="1-模拟信号的数字化方法PCM"><a href="#1-模拟信号的数字化方法PCM" class="headerlink" title="1.模拟信号的数字化方法PCM"></a>1.模拟信号的数字化方法PCM</h2><p><strong>1.1 PCM的定义</strong></p><p>最基本的概念：<strong>模拟信号</strong>是指随时间连续变化的物理量，将声音在磁带上记录成磁场强度的变化或在黑胶唱片上记录成沟槽大小的变化就是以模拟方式进行存储。<strong>数字信号</strong>则是离散的，计算机中的数据都是以数字方式存储的。模拟信号和数字信号可以相互转换，这里我们讨论的就是把模拟信号转换成数字信号。</p><p><strong>脉冲编码调制（Pulse Code Modulation, PCM）是一种模拟信号的数字化方法。</strong>它是最常用、最简单的波形编码方式，但是也存在其它方法，比如脉冲密度调制（Pulse Density Modulation, PDM）。</p><span id="more"></span><p><strong>1.2 PCM的实现过程</strong></p><p>下图就是脉冲编码调制的完整过程，简单概括为：<strong>采样，量化，编码</strong>。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2022/png/3756563/1661772267284-dc222967-4899-435a-bfdb-a461aad3a056.png" alt="img"></p><p>具体来说就是：</p><p>1，将模拟信号按照同样的时间间距（即采样时间）进行采样。</p><p>2，按某种运算法确定样本值，即量化。</p><p>3，将样本值用二进制表示，即编码。</p><p>由上可见，脉冲编码调制实际上并没有”调制”的过程，而且也并没有脉冲出现，只因为PCM来源于PWM和PPM技术，所以也保留了”脉冲”二字。所以将脉冲编码调制（PCM）理解为”一种模拟信号的数字化方法”是最准确的。</p><h2 id="2-数字音频基础概念"><a href="#2-数字音频基础概念" class="headerlink" title="2 数字音频基础概念"></a>2 数字音频基础概念</h2><p><strong>2.1 采样率 Sample Rate</strong></p><p><strong>采样率</strong>（采样频率）即<strong>每秒内进行采样的次数</strong>。符号是fs，单位是Hz。采样率越高，数字波形的形状就越接近原始模拟波形，声音的还原就越真实。</p><p>如下是同一波形的两种采样率对比，可以看到低采样率的A采样波形严重失真，而高采样率的B则几乎完全重现原始波形：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2022/png/3756563/1661772267210-f22783e8-b37e-4487-984d-ff86df7bade8.png" alt="img"></p><p>根据奈奎斯特－香农<strong>采样定理</strong>，只有采样频率高于原始模拟信号中最高频率的<strong>两倍</strong>时，才能把数字信号表示的模拟信号准确还原回去。例如，CD 的采样率为每秒 44,100 个采样，因此可重现最高为 22,050 Hz 的频率，此频率刚好超过人类的听力极限 20,000 Hz。实际应用中采样频率一般为信号最高频率的2.56～4倍。</p><p>数字音频领域常用的采样率如下表：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2022/png/3756563/1661772267366-f7128252-0720-49f4-b5b9-63d9c52b10b5.png" alt="img"></p><p><strong>2.2 采样位数 Bit Depth</strong></p><p><strong>采样位数</strong>（又称<strong>位宽，位深，位深度</strong>），字面意义就是<strong>采样值的二进制编码的位数。</strong>采样位数反应了采样系统对声音的辨析度，位数越高，对声音的记录就越精细，所以也称之为<strong>采样精度，采样深度</strong>。</p><p>采样位数的含义是<strong>用多少个点来描述声音信号的强度</strong>，如1.2节的PCM编码的位数就是3bit，即有2^3 &#x3D; 8个点。如果是8bit，就有2^8 &#x3D; 256个点。</p><p>采样位数直接影响采集信号的信噪比&#x2F;动态范围。较高的采样位数可提供更多可能的振幅值，产生更大的动态范围、更低的噪声基准和更高的保真度。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2022/png/3756563/1661772267362-1ac6850f-60a5-46a2-a4cf-7ee519a2abb5.png" alt="img"></p><p>总结一下，采样率是相对于时间来说的，采样位数是相对信号的幅度来说的，在1.2节中分别对应横坐标和纵坐标。</p><p><strong>2.3 声道 Sound Channel</strong></p><p><strong>声道</strong>是指声音在录制或播放时在不同空间位置采集或回放的相互独立的音频信号，通俗的说<strong>声道数就是录音时的麦克风数量，也是播放时的音响数量。</strong>声道数，也叫<strong>通道数，轨道数，音轨数</strong>。</p><p>常见的声道数有单声道（Mono），双声道（即立体声，Stereo），5.1声道，7.1声道等。这里的 .1声道指的是低音声道。</p><p>如下是一个5.1声道家庭影院示意图，六个扬声器分别是 ：C（Central）中置，FL（Front Left）左前置，FR（Front Right）右前置，SL（Surround Left）左环绕，SR（Surround Right）右环绕和SW（Subwoofer）低音炮。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2022/png/3756563/1661772267277-ab9fca63-6bd4-4d93-8f80-79543e25e59c.png" alt="img"></p><p><strong>2.4 比特率 Bit Rate</strong></p><p>比特是由bit音译而来，指二进制数中的<strong>位</strong>，它是数字信息的最小度量单位。</p><p>在通信与计算领域，比特率就是<strong>指每秒传送或处理的比特的数量（位数）</strong>，所以比特率又称为”<strong>二进制位速率</strong>“，简称”<strong>位速或位率</strong>“，常用于形容传输速度，带宽。</p><p>在数字多媒体领域，比特率是<strong>每秒播放连续的音频或视频的比特的数量</strong>，是音视频文件的一个属性。此时它相当于术语”<strong>数字带宽消耗量或吞吐量</strong>“，也俗称为”<strong>码率</strong>“。</p><p>比特率的统一含义是”**二进制码数量&#x2F;时间”**，单位是比特每秒，bit per second，缩写为bit&#x2F;s（不是”bits&#x2F;s”），简写为bps或b&#x2F;s。有一些不正式的描述比如”128千比特音频流”或”100兆比特网络”则是省略了”每秒”。</p><p>常用比特率的表述：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2022/png/3756563/1661772268078-3c7fe69b-ad31-491c-a2d0-663402d2ee55.png" alt="img"></p><h2 id="3-数字音频概念区分"><a href="#3-数字音频概念区分" class="headerlink" title="3 数字音频概念区分"></a>3 数字音频概念区分</h2><p><strong>3.1 PCM与ADC</strong></p><p>PCM（Pulse Code Modulation）是一种模拟信号的数字化方法，ADC（Analog to Digital Converter）芯片是实现这一方法的器件。</p><p><strong>3.2 比特率与下载速度</strong></p><p>网络带宽常用比特率表示，单位bps，比如千比特每秒Kbps &#x3D; Kb&#x2F;s，兆比特每秒Mbps &#x3D; Mb&#x2F;s，这里的b是bit（位）。而日常我们说的下载速度的单位是KB&#x2F;s，MB&#x2F;s（简写为K&#x2F;s，M&#x2F;s），这里的B是Byte（字节），是用来表示文件大小的单位。</p><p>字节中的KB、MB、GB的递进关系是1024，而<strong>比特率中的kb，Mb，Gb的递进关系则是1000</strong>。而且<strong>1byte&#x3D;8bit</strong>，所以说 1MB&#x2F;s ≈ 8Mbps &#x3D; 8Mb&#x2F;s。实际上因为网络损耗，运营商口中的带宽bps（b&#x2F;s）和我们实际理解的下载速度B&#x2F;s的关系一般是十倍左右。</p><p><strong>3.3 音频编码格式和文件格式</strong></p><p>[注：在很多语义下，音频编码&#x3D;音频编码格式，音频文件&#x3D;音频文件格式]</p><p><strong>3.3.1 PCM编码与PCM文件</strong></p><p>如上所述，PCM（脉冲编码调制）是一种模拟信号的数字化方法，PCM编码就是这个方法中的数字音频编码方式。PCM编码是最原始的音频编码，其他编码都是在它基础上再次编码和压缩的。</p><p>PCM文件是以PCM编码方式存储音频的文件，是未经压缩的原始数字音频文件，通常称为PCM裸流&#x2F;音频裸数据&#x2F;raw data。常用文件扩展名是.pcm和.raw，通常它们是不能直接播放的。PCM裸流经过重新编码，封装（见下节）后，比如变为 .wav格式，就可以正常播放了。</p><p><strong>3.3.2 编码格式与文件格式的含义</strong></p><p>常见的音频文件都有两部分格式：一是文件格式，二是编码格式。两者是不同的概念：<strong>文件格式专指存放音频数据的文件的格式，</strong>对应文件的扩展名<strong>；编码格式则是指音频数据的特定格式</strong>，也叫<strong>数据格式，音频编码</strong>。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2022/png/3756563/1661772268267-140c5284-3b1c-4880-ad6e-ac790605b252.png" alt="img"></p><p><strong>3.3.3 常见的编码格式与文件格式</strong></p><p>大部分情况下，一种文件格式对应一种音频编码。但是也有例外，比如.caf的文件格式就能包含MP3、LPCM和其他格式编码的音频数据，AAC编码格式对应的文件的扩展名就有.aac、 .mp4 和 .m4a。</p><p>文件格式与音频编码的名称有时相同，比如平时我们经常说的mp3既是文件格式，又是编码格式；也有时不同。而且有时它们的称呼也不规范，比如为了方便人们一般称Monkey’s Audio音频编码格式为ape编码。</p><p>常用的音频编码格式与文件格式的对应关系总结如下：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2022/png/3756563/1661772268395-871af070-1d8d-4d73-a859-e1ad31ebffe5.png" alt="img"></p><p><strong>3.3.4 有损编码与无损编码</strong></p><p>理论上说，任何数字音频都是无法完全还原模拟信号的。不过PCM编码是模拟信号转换为数字信号时的原始编码，它代表着数字音频的最佳保真水平，所以PCM编码就约定俗成为”无损编码”。</p><p>上节中的音频编码是对PCM编码进行了二次编码，是为了减小原始PCM编码的体积，所以也叫它们为<strong>压缩编码</strong>，对应的文件叫<strong>压缩格式</strong>。</p><p>二次编码的音频编码也分为两类：有损编码和无损编码，也称为有损压缩和无损压缩。<strong>无损就是指相对PCM编码来说音质相同，有损则是损失了一些音频质量。</strong></p><h2 id="4-音频进阶"><a href="#4-音频进阶" class="headerlink" title="4 音频进阶"></a>4 音频进阶</h2><p><strong>4.1 比特率的计算</strong></p><p>假设有一段采样频率44.1KHz，采样位数16bit，立体声的PCM音频。也就是说，在产生这段音频时间里，1s内系统采样的次数是44100次，每次采样的数据位数是16位，同时进行2通道采样。这就意味着，系统每秒采集的比特数为44100次×16位×2通道 &#x3D; 1411200个。根据比特率的定义，这段音频的比特率就是1411.2kbit&#x2F;s。</p><p><strong>音频的比特率&#x3D;采样率×位深度×通道数</strong></p><p>此外，如果还知道这段PCM音频文件的时长，还可以计算文件的大小：假设文件时长为1分钟，那么文件大小为1411.2kbit&#x2F;s × 60s &#x3D; 84672kbit，而1byte&#x3D;8bit，所以文件大小为10,584,000B &#x3D; 10,355.9KB &#x3D; 10.1MB。</p><p>【注意】一个 kb（kilobit，千比特） 表示 1,000比特，而不是普遍被认为的1,024比特。</p><p><strong>音频文件大小(B)&#x3D;比特率(b&#x2F;s)×时长(s)÷8</strong></p><p>对于mp3，wav等其他格式的音频文件，文件里还包括了帧头等其他附加信息，所以文件体积还会稍大一些。</p><p><strong>4.2 查看音频文件的参数</strong></p><p>对于音视频文件，查看其比特率最简单的方式是右键-属性-详细，就可以直接看到了。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2022/png/3756563/1661772268383-60ca6f59-63b4-4e04-a379-aae69476997a.png" alt="img"></p><p>查看更详细的采样率，声道数，位深。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2022/png/3756563/1661772269280-9141bb66-2670-4a11-8fd2-64f047292b96.png" alt="img"></p><p>对于音乐播放软件，左侧网易云的标准、较高和极高音质分别对应MP3音频格式中的128、192和320kbit&#x2F;s三个比特率，无损音质则是对应700~1000kbit&#x2F;s的flac文件格式。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2022/png/3756563/1661772269397-c44761ba-c29b-4a38-8840-39aa7b4806db.png" alt="img"></p><p>对于右侧的QQ音乐，是用品质描述+文件大小来表示，标准品质为128kbit&#x2F;s的MP3，HQ (High Quality) 高音质则是高于128kbit&#x2F;s的MP3，SQ (Super Quality) 无损品质则采用APE和FLAC无损文件格式。</p><h2 id="5-图像的数值表示"><a href="#5-图像的数值表示" class="headerlink" title="5.图像的数值表示"></a>5.图像的数值表示</h2><h3 id="5-1-RGB表示方式"><a href="#5-1-RGB表示方式" class="headerlink" title="5.1 RGB表示方式"></a>5.1 RGB表示方式</h3><p>任何一个图像都可以由RGB组成，那么一个像素点的RGB该如何表示呢？音频里面的每一个采样 （sample）均使用16个比特来表示，那么像素里面的子像素又该如何表 示呢？常用的表示方式有以下几种。</p><ul><li><p>浮点表示：取值范围为0.0～1.0，比如，在OpenGL ES中对每一个 子像素点的表示使用的就是这种表达方式。</p></li><li><p>整数表示：取值范围为0～255或者00～FF，8个比特表示一个子像 素，32个比特表示一个像素，这就是类似于某些平台上表示图像格式的 RGBA_8888数据格式。比如，Android平台上RGB_565的表示方法为16 比特模式表示一个像素，R用5个比特来表示，G用6个比特来表示，B用 5个比特来表示。 对于一幅图像，一般使用整数表示方法来进行描述，比如计算一张 1280×720的RGBA_8888图像的大小，可采用如下方式： 1280 * 720 * 4 &#x3D; 3.516MB 这也是位图（bitmap）在内存中所占用的大小，所以每一张图像的 裸数据都是很大的。</p></li></ul><blockquote><p>对于图像的裸数据来讲，直接在网络上进行传输也 是不太可能的，所以就有了图像的压缩格式，比如JPEG压缩：JPEG是 静态图像压缩标准，由ISO制定。JPEG图像压缩算法在提供良好的压缩 性能的同时，具有较好的重建质量。这种算法被广泛应用于图像处理领 域，当然其也是一种有损压缩。在很多网站如淘宝上使用的都是这种压 缩之后的图片，但是，这种压缩不能直接应用于视频压缩，因为对于视 频来讲，还有一个时域上的因素需要考虑，也就是说，不仅仅要考虑帧 内编码，还要考虑帧间编码。视频采用的是更成熟的算法。</p></blockquote><h3 id="5-2-YUV表示方式"><a href="#5-2-YUV表示方式" class="headerlink" title="5.2 YUV表示方式"></a>5.2 YUV表示方式</h3><p>对于视频帧的裸数据表示，其实更多的是YUV数据格式的表示， YUV主要应用于优化彩色视频信号的传输，使其向后兼容老式黑白电 视。与RGB视频信号传输相比，它最大的优点在于只需要占用极少的频宽（RGB要求三个独立的视频信号同时传输）。其中“Y”表示明亮度 （Luminance或Luma），也称灰阶值；而“U”和“V”表示的则是色度 （Chrominance或Chroma），它们的作用是描述影像的色彩及饱和度， 用于指定像素的颜色。“亮度”是透过RGB输入信号来建立的，方法是将 RGB信号的特定部分叠加到一起。“色度”则定义了颜色的两个方面—— 色调与饱和度，分别用Cr和Cb来表示。</p><p><img src="https://p.ipic.vip/tt2pvn.png" alt="image-20231215141817741"></p><p>相较于RGB，我们可以计算一帧为1280×720的视频帧，用 YUV420P的格式来表示，其数据量的大小如下： 1280 * 720 * 1 + 1280 * 720 * 0.5 &#x3D; 1.318MB 如果fps（1秒的视频帧数目）是24，按照一般电影的长度90分钟来 计算，那么这部电影用YUV420P的数据格式来表示的话，其数据量的 大小就是： 1.318MB * 24fps * 90min * 60s &#x3D; 166.8GB</p><h3 id="5-3-YUV和RGB的转化"><a href="#5-3-YUV和RGB的转化" class="headerlink" title="5.3 YUV和RGB的转化"></a>5.3 YUV和RGB的转化</h3><p>前面已经讲过，凡是渲染到屏幕上的东西（文字、图片或者其 他），都要转换为RGB的表示形式，那么YUV的表示形式和RGB的表 示形式之间是如何进行转换的呢？对于标清电视601标准，它从YUV转 换到RGB的公式与高清电视709的标准是不同的，通过如下的计算（如 图1-9和图1-10）即可得知。</p><p><img src="https://p.ipic.vip/fbr1ws.png" alt="image-20231215141853358"></p><p><img src="https://p.ipic.vip/ltypg6.png" alt="image-20231215141902343"></p><h2 id="6-视频的编码方式"><a href="#6-视频的编码方式" class="headerlink" title="6.视频的编码方式"></a>6.视频的编码方式</h2><h3 id="6-1-视频编码"><a href="#6-1-视频编码" class="headerlink" title="6.1 视频编码"></a>6.1 视频编码</h3><p>音频压缩主要是去除冗余信息，从而实现数据量的压缩。那么对于视频压缩，又该从哪几方面来对数据进行压缩呢？其实与前面提到的音频编码类似，视频压缩也是通过去除冗余信息来进行压缩的。相较于音频数据，视频数据有极强的相关性，也就是说有大量的冗余信息，包括空间上的冗余信息和时间上的冗余信息。 使用帧间编码技术可以去除时间上的冗余信息，具体包括以下几个部分。</p><ul><li>运动补偿：运动补偿是通过先前的局部图像来预测、补偿当前的局部图像，它是减少帧序列冗余信息的有效方法。</li><li>运动表示：不同区域的图像需要使用不同的运动矢量来描述运动 信息。 </li><li>运动估计：运动估计是从视频序列中抽取运动信息的一整套技 术。</li></ul><p>使用帧内编码技术可以去除空间上的冗余信息。 对于视频，ISO同样也制定了标准：Motion JPEG即MPEG，MPEG算法是适用于动态视频的压缩算法，它除了对单幅图像进行编码外，还利用图像序列中的相关原则 去除冗余，这样可以大大提高视频的压缩比。截至目前，MPEG的版本 一直在不断更新中，主要包括这样几个版本：Mpeg1（用于VCD）、 Mpeg2（用于DVD）、Mpeg4 AVC（现在流媒体使用最多的就是它 了）。 相比较于ISO制定的MPEG的视频压缩标准，ITU-T制定的H.261、 H.262、H.263、H.264一系列视频编码标准是一套单独的体系。其中， H.264集中了以往标准的所有优点，并吸取了以往标准的经验，采用的是简洁设计，这使得它比Mpeg4更容易推广。现在使用最多的就是 H.264标准，H.264创造了多参考帧、多块类型、整数变换、帧内预测等新的压缩技术，使用了更精细的分像素运动矢量（1&#x2F;4、1&#x2F;8）和新一代 的环路滤波器，这使得压缩性能得到大大提高，系统也变得更加完善。</p><h3 id="6-2-编码概念"><a href="#6-2-编码概念" class="headerlink" title="6.2 编码概念"></a>6.2 编码概念</h3><h4 id="1-IPB帧"><a href="#1-IPB帧" class="headerlink" title="1. IPB帧"></a>1. IPB帧</h4><p>视频压缩中，每帧都代表着一幅静止的图像。而在进行实际压缩 时，会采取各种算法以减少数据的容量，其中IPB帧就是最常见的一 种。 </p><ul><li>I帧：帧内编码帧（intra picture），I帧通常是每个GOP（MPEG所 使用的一种视频压缩技术）的第一个帧，经过适度地压缩，作为随机访 问的参考点，可以当成静态图像。I帧可以看作一个图像经过压缩后的 产物，I帧压缩可以得到6：1的压缩比而不会产生任何可觉察的模糊现 象。I帧压缩可去掉视频的空间冗余信息，下面即将介绍的P帧和B帧是 为了去掉时间冗余信息。</li><li>P帧：前向预测编码帧（predictive-frame），通过将图像序列中前 面已编码帧的时间冗余信息充分去除来压缩传输数据量的编码图像，也 称为预测帧。 ·B帧：双向预测内插编码帧（bi-directional interpolated prediction frame），既考虑源图像序列前面的已编码帧，又顾及源图像序列后面 的已编码帧之间的时间冗余信息，来压缩传输数据量的编码图像，也称 为双向预测帧。 基于上面的定义，我们可以从解码的角度来理解IPB帧。 ·I帧自身可以通过视频解压算法解压成一张单独的完整视频画面， 所以I帧去掉的是视频帧在空间维度上的冗余信息。 ·P帧需要参考其前面的一个I帧或者P帧来解码成一张完整的视频画 面。</li><li>B帧则需要参考其前一个I帧或者P帧及其后面的一个P帧来生成一 张完整的视频画面，所以P帧与B帧去掉的是视频帧在时间维度上的冗 余信息。</li></ul><h4 id="2-PTS与DTS"><a href="#2-PTS与DTS" class="headerlink" title="2. PTS与DTS"></a>2. PTS与DTS</h4><p> DTS主要用于视频的解码，英文全称是Decoding Time Stamp，PTS 主要用于在解码阶段进行视频的同步和输出，全称是Presentation Time Stamp。在没有B帧的情况下，DTS和PTS的输出顺序是一样的。因为B 帧打乱了解码和显示的顺序，所以一旦存在B帧，PTS与DTS势必就会不同。</p><h4 id="3-GOP的概念"><a href="#3-GOP的概念" class="headerlink" title="3.GOP的概念"></a>3.GOP的概念</h4><p>两个I帧之间形成的一组图片，就是GOP（Group Of Picture）的概念。通常在为编码器设置参数的时候，必须要设置gop_size的值，其代 表的是两个I帧之间的帧数目。</p><p><img src="https://p.ipic.vip/txsb2o.png" alt="image-20231215141549378"></p><blockquote><p>注：频率单位赫兹（Hertz，简称 Hz）是为了纪念德国物理学家海因里希·鲁道夫·赫兹（Heinrich Rudolf Hertz）。海因里希·赫兹于1888年通过实验证明了电磁波的存在，成功地验证了麦克斯韦方程组的预言。这一发现对无线电通信和现代电磁技术的发展起到了重要的推动作用。</p><p>在他的名字命名之前，频率的常用单位是“每秒周期数”（cycles per second）。1948年，国际度量衡大会正式采用“赫兹”作为频率的单位，以表彰他在电磁学领域的贡献。1赫兹代表每秒完成一个周期的振动或波动。</p><p>因此，我们现在使用的频率单位“赫兹”是对海因里希·赫兹在科学上贡献的一种纪念。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 音视频 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android冷启动自动调试</title>
      <link href="/2023/12/11/Android%E5%86%B7%E5%90%AF%E5%8A%A8%E8%87%AA%E5%8A%A8%E8%B0%83%E8%AF%95/"/>
      <url>/2023/12/11/Android%E5%86%B7%E5%90%AF%E5%8A%A8%E8%87%AA%E5%8A%A8%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="1-选择调试程序"><a href="#1-选择调试程序" class="headerlink" title="1. 选择调试程序"></a>1. 选择调试程序</h3><h3 id="2-打开等待调试程序开关"><a href="#2-打开等待调试程序开关" class="headerlink" title="2. 打开等待调试程序开关"></a>2. 打开等待调试程序开关</h3><p><img src="https://p.ipic.vip/27w0zb.png" alt="image-20231221151223098"></p><span id="more"></span><h3 id="3-AS-设置自动-attach-debugger"><a href="#3-AS-设置自动-attach-debugger" class="headerlink" title="3. AS 设置自动 attach debugger"></a>3. AS 设置自动 attach debugger</h3><img src="https://p.ipic.vip/z5bim0.png" alt="image-20231219144955334" style="zoom:50%;" /><h3 id="4-启动应用"><a href="#4-启动应用" class="headerlink" title="4. 启动应用"></a>4. 启动应用</h3><p><img src="https://p.ipic.vip/655f8a.png" alt="image-20231221151245063"></p>]]></content>
      
      
      <categories>
          
          <category> 调试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ssh详解</title>
      <link href="/2023/09/06/ssh%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/09/06/ssh%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="https-wangdoc-com-ssh"><a href="#https-wangdoc-com-ssh" class="headerlink" title="https://wangdoc.com/ssh/"></a><a href="https://wangdoc.com/ssh/">https://wangdoc.com/ssh/</a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VSCode-快捷键</title>
      <link href="/2023/09/06/VSCode-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2023/09/06/VSCode-%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>打开终端</td><td>⇧ ESC</td></tr><tr><td>打开命令面板</td><td>⌘ ⇧ P</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android生成签名证书</title>
      <link href="/2023/08/30/Android%E7%94%9F%E6%88%90%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6/"/>
      <url>/2023/08/30/Android%E7%94%9F%E6%88%90%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="生成秘钥证书"><a href="#生成秘钥证书" class="headerlink" title="生成秘钥证书"></a>生成秘钥证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias &quot;xxxx&quot; -keystore &quot;healkit.keystore&quot; -keyalg rsa -keysize 2048</span><br></pre></td></tr></table></figure><h2 id="查看证书信息"><a href="#查看证书信息" class="headerlink" title="查看证书信息"></a>查看证书信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -keystore healkit.keystore -v</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>shell 中各种括号的作用</title>
      <link href="/2023/06/24/shell-%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7/"/>
      <url>/2023/06/24/shell-%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 菜鸟教程 <a href="https://www.runoob.com/w3cnote/linux-shell-brackets-features.html">https://www.runoob.com/w3cnote/linux-shell-brackets-features.html</a></p></blockquote><h2 id="和-96-96"><a href="#和-96-96" class="headerlink" title="$()和  &#96;&#96;"></a><code>$()和 </code> &#96;&#96;</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在 bash shell 中，$( ) 与` ` (反引号) 都是用来做命令替换用(commandsubstitution)的。</span><br><span class="line"></span><br><span class="line">例如   version=$(uname -r)和version=`uname -r`都可以是version得到内核的版本号</span><br><span class="line"></span><br><span class="line">各自的优缺点：</span><br><span class="line"></span><br><span class="line">1. `  ` 基本上可用在全部的 unix shell 中使用，若写成 shell script ，其移植性比较高。但反单引号容易打错或看错。</span><br><span class="line"></span><br><span class="line">2. $()并不是所有shell都支持。</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title="${ }"></a><code>$&#123; &#125;</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$&#123; &#125;用于变量替换。一般情况下，$var 与$&#123;var&#125; 并没有啥不一样。但是用 $&#123; &#125; 会比较精确的界定变量名称的范围。比如</span><br><span class="line"></span><br><span class="line">$ A=B</span><br><span class="line">$ echo $AB</span><br><span class="line">原本是打算先将 $A 的结果替换出来，然后再补一个 B 字母于其后，</span><br><span class="line">但在命令行上，真正的结果却是只会提换变量名称为 AB 的值出来…</span><br><span class="line">若使用 $&#123; &#125; 就没问题了：</span><br><span class="line">$ echo $&#123;A&#125;B</span><br><span class="line">BB</span><br><span class="line"></span><br><span class="line">$&#123; &#125;的功能远不止于此.</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="-1"><a href="#-1" class="headerlink" title="$[] $(())"></a><code>$[] $(())</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">它们是一样的，都是进行数学运算的。支持+ - * / %：分别为 “加、减、乘、除、取模”。但是注意，bash只能作整数运算，对于浮点数是当作字符串处理的。</span><br><span class="line">例：</span><br><span class="line">$ a=5; b=7; c=2</span><br><span class="line">$ echo $(( a+b*c ))</span><br><span class="line">19</span><br><span class="line">$ echo $(( (a+b)/c ))</span><br><span class="line">6</span><br><span class="line">$ echo $(( (a*b)%c))</span><br><span class="line"></span><br><span class="line">在 $(( )) 中的变量名称，可于其前面加 $ 符号来替换，也可以不用，如：</span><br><span class="line">$(( $a + $b * $c)) 也可得到 19 的结果</span><br><span class="line">此外，$(( )) 还可作不同进位(如二进制、八进位、十六进制)作运算呢，只是，输出结果皆为十进制而已：</span><br><span class="line">echo $((16#2a)) 结果为 42 (16进位转十进制)</span><br></pre></td></tr></table></figure><h2 id="-2"><a href="#-2" class="headerlink" title="[ ] "></a><code>[ ] </code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">即为test命令的另一种形式。</span><br><span class="line">但要注意许多：</span><br><span class="line">1.你必须在左括号的右侧和右括号的左侧各加一个空格，否则会报错。</span><br><span class="line">2.test命令使用标准的数学比较符号来表示字符串的比较，而用文本符号来表示数值的比较。很多人会记反了。使用反了，shell可能得不到正确的结果。</span><br><span class="line">3.大于符号或小于符号必须要转义，否则会被理解成重定向。</span><br></pre></td></tr></table></figure><h2 id="及"><a href="#及" class="headerlink" title="(( ))及[[ ]] "></a><code>(( ))及[[ ]] </code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">它们分别是[ ]的针对数学比较表达式和字符串表达式的加强版。</span><br><span class="line">其中(( ))，不需要再将表达式里面的大小于符号转义，除了可以使用标准的数学运算符外，还增加了以下符号：</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/4z6slq.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 [[ ]]中增加了另一个特性：模式匹配</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/x1269778817/article/details/46535729">转载自</a></p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell语法练习</title>
      <link href="/2023/06/23/shell%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0/"/>
      <url>/2023/06/23/shell%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195">牛客网练习</a></p><h2 id="查看可用的shell"><a href="#查看可用的shell" class="headerlink" title="查看可用的shell"></a>查看可用的shell</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><h2 id="shebang"><a href="#shebang" class="headerlink" title="shebang"></a>shebang</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str=&quot;hello world!&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;定义字符串 $&#123;str&#125;&quot;</span><br><span class="line">echo &quot;字符串的长度为 $&#123;#str&#125;&quot;</span><br><span class="line">echo &quot;截取索引从1开始，长度为4的子串 $&#123;str:1:4&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=(234 2 3 4 5 6)</span><br><span class="line"></span><br><span class="line">echo &quot;定义数组 a=($&#123;a[*]&#125;)&quot;</span><br><span class="line">echo &quot;数组的长度为 $&#123;#a[*]&#125;&quot;</span><br><span class="line">echo &quot;数组第一个元素的长度$&#123;#a[0]&#125;&quot;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="脚本参数传递"><a href="#脚本参数传递" class="headerlink" title="脚本参数传递"></a>脚本参数传递</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;执行的文件名 $0&quot;</span><br><span class="line">echo &quot;脚本的所有的参数 $*&quot;</span><br><span class="line">echo &quot;脚本的参数个数 $#&quot;</span><br><span class="line">echo &quot;脚本的第一个参数 $1&quot;</span><br><span class="line">echo &quot;脚本的第二个参数 $2&quot;</span><br></pre></td></tr></table></figure><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;请输入字符串&quot; input</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ifelse</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">字符串运算符</span></span><br><span class="line">if [[ $input ]]; then</span><br><span class="line">echo &quot;输入的字符串不为空&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;输入的字符串为空&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ -n $input ]]; then</span><br><span class="line">echo &quot;输入的字符串长度不为0&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;输入的字符串长度为0&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件测试运算符</span></span><br><span class="line">if [[ ! -e &quot;./test.sh&quot; ]]; then</span><br><span class="line">echo &quot;./test.sh 文件不存在&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;./test.sh 文件存在哈&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;这里显示换行&quot;</span><br><span class="line">echo &quot;\n&quot;</span><br><span class="line">echo &quot;这里显示换行&quot;</span><br></pre></td></tr></table></figure><h2 id="选择分支语句"><a href="#选择分支语句" class="headerlink" title="选择分支语句"></a>选择分支语句</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;请输入0-9数字，会自动生成成语&quot; num</span><br><span class="line"></span><br><span class="line">case $num in</span><br><span class="line">1 )</span><br><span class="line">echo &quot;一生一世&quot;</span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line">ehco &quot;二龙戏珠&quot;</span><br><span class="line">;;</span><br><span class="line">3)</span><br><span class="line">echo &quot;三阳开泰&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;输入了其他值&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;请输入一句话，循环打印每个单词&quot; words</span><br><span class="line"></span><br><span class="line">for w in $words; do</span><br><span class="line">echo &quot;$&#123;w&#125;&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">read -p &quot;请输入0-9数字，循环打印数字&quot; nums</span><br><span class="line"></span><br><span class="line">while [[ $nums -gt 0 ]]; do</span><br><span class="line">echo &quot;$nums&quot; </span><br><span class="line">nums=$((nums-1))</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">let</span> nums=nums-1</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;输入一个数字&quot; inputNum</span><br><span class="line">echo &quot;减一得 $((inputNum-1))&quot;</span><br><span class="line">let inputNum=inputNum-2;</span><br><span class="line">echo &quot;减二得$inputNum&quot;</span><br></pre></td></tr></table></figure><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">printfunc()&#123;</span><br><span class="line">echo &quot;printfunc() 函数被调用了&quot;</span><br><span class="line">echo &quot;函数的参数个数为$#&quot;</span><br><span class="line">echo &quot;第一个参数为$1&quot;</span><br><span class="line">echo &quot;第二个参数为$2&quot;</span><br><span class="line">echo &quot;第三个参数为$3&quot;</span><br><span class="line">echo &quot;第四个参数为$4&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printfunc 参数1 参数2 参数3 参数4 </span><br><span class="line">echo &quot;函数返回值 $?&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell语法</title>
      <link href="/2023/06/23/shell%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/06/23/shell%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><table><thead><tr><th>语法</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/linux/linux-shell-variable.html">变量</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-shell-passing-arguments.html">参数传递</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-shell-array.html">数组使用</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-shell-basic-operators.html">运算符</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-shell-echo.html">echo命令</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-shell-process-control.html">流程控制</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-shell-func.html">函数</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-shell-io-redirections.html">输入输出重定向</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-shell-include-file.html">文件包含</a></td></tr></tbody></table><h2 id="语法练习"><a href="#语法练习" class="headerlink" title="语法练习"></a>语法练习</h2><blockquote><p><a href="https://www.nowcoder.com/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195">牛客网</a></p></blockquote><h3 id="查看可用的shell"><a href="#查看可用的shell" class="headerlink" title="查看可用的shell"></a>查看可用的shell</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><h3 id="查看当前正在使用的shell"><a href="#查看当前正在使用的shell" class="headerlink" title="查看当前正在使用的shell"></a>查看当前正在使用的shell</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意SHELL一定要是大写。可以看到，我目前使用的shell是/bin/bash</span></span><br><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><h3 id="修改我的-shell-为zsh"><a href="#修改我的-shell-为zsh" class="headerlink" title="修改我的 shell 为zsh"></a>修改我的 shell 为zsh</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h3 id="shebang"><a href="#shebang" class="headerlink" title="shebang"></a>shebang</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br></pre></td></tr></table></figure><h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str=&quot;hello world!&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;定义字符串 $&#123;str&#125;&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">计算字符串长度</span></span><br><span class="line">echo &quot;字符串的长度为 $&#123;#str&#125;&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">截取字符串</span></span><br><span class="line">echo &quot;截取索引从1开始，长度为4的子串 $&#123;str:start:length&#125;&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">字符串替换</span></span><br><span class="line">echo &quot;把老的字符串替换为新的字符串 $&#123;str//$&#123;oldstr&#125;/$&#123;newstr&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">str=&quot;hello world&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">方式一：</span></span><br><span class="line">if [[ $(echo &quot;$&#123;str&#125;&quot; | grep -E &#x27;^he.*ld$&#x27;) ]]; then</span><br><span class="line">    echo &quot;匹配成功&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">---------- ---------- ---------- ---------- ----------</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">方式二 正则表达式要用单引号引起来</span></span><br><span class="line">if expr match &quot;$str&quot; &#x27;he.*ld&#x27; &gt; /dev/null; then</span><br><span class="line">    echo &quot;匹配成功&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">等同</span></span><br><span class="line">if expr  &quot;$str&quot; : &#x27;he.*ld&#x27; &gt; /dev/null; then</span><br><span class="line">    echo &quot;匹配成功&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">expr</span> 字符串匹配捕获</span></span><br><span class="line">expr &quot;$str&quot; : &#x27;he.*ld&#x27; 输出匹配的字符串的长度</span><br><span class="line">expr &quot;$str&quot; : &#x27;he.*ld\(xxx\)&#x27; 若匹配，则输出捕获的字符串 xxx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="正则语法"><a href="#正则语法" class="headerlink" title="正则语法"></a>正则语法</h3><blockquote><p>Bash 中的正则表达式分为基本正则表达式和扩展正则表达式两种类型。</p><p>基本正则表达式：它只支持最基本的正则表达式元字符，如 ^、$、.、[ ]、*、&#96;&#96; 等，不支持一些常用的元字符，如 +、?、| 等。在基本正则表达式中，圆括号 () 表示括号本身，而不是捕获组。</p><p>扩展正则表达式：它支持基本正则表达式中的所有元字符，同时还支持一些额外的元字符，如 +、?、| 等，以及一些高级语法，如 ( ) 捕获组、{ } 重复指定次数等。</p><p>因此，扩展正则表达式比基本正则表达式更加强大，可以实现更复杂的匹配和替换操作。在 Bash 中，grep、sed 等工具默认使用基本正则表达式，要使用扩展正则表达式，需要在正则表达式前面添加 -E 参数或者使用 egrep 命令。例如：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用基本正则表达式</span></span><br><span class="line">grep &quot;a*b&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用扩展正则表达式</span></span><br><span class="line">grep -E &quot;a+b&quot; file.txt</span><br><span class="line">egrep &quot;a+b&quot; file.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，在不同的工具中，正则表达式的语法和功能可能也会略有不同，具体使用时需要查看对应的文档。</p></blockquote><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="索引数组"><a href="#索引数组" class="headerlink" title="索引数组"></a>索引数组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">declare -a arr</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">赋值</span></span><br><span class="line">arr=(234 2 3 4 5 6)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加数组元素</span></span><br><span class="line">arr+=&quot;ss&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">所有元素</span></span><br><span class="line">echo &quot;$&#123;a[*]&#125;&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数组的长度</span></span><br><span class="line">echo &quot;数组的长度为 $&#123;#arr[*]&#125;&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">访问元素</span></span><br><span class="line">echo &quot;数组第一个元素的长度$&#123;#arr[0]&#125;&quot;</span><br></pre></td></tr></table></figure><h4 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">declare -A map </span><br><span class="line"></span><br><span class="line">map[&quot;google&quot;]=&quot;www.google.com&quot;</span><br><span class="line">map[&quot;baidu&quot;]=&quot;www.baidu.com&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">访问所有元素</span></span><br><span class="line">echo &quot;$&#123;a[*]&#125;&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取数组的长度</span></span><br><span class="line">echo &quot;$&#123;#a[*]&#125;&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">访问所有key</span></span><br><span class="line">echo &quot;$&#123;!a[*]&#125;&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据key访问元素</span></span><br><span class="line">echo &quot;$&#123;a[$&#123;key&#125;]&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="脚本参数传递"><a href="#脚本参数传递" class="headerlink" title="脚本参数传递"></a>脚本参数传递</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;执行的文件名 $0&quot;</span><br><span class="line">echo &quot;脚本的所有的参数 $*&quot;</span><br><span class="line">echo &quot;脚本的参数个数 $#&quot;</span><br><span class="line">echo &quot;脚本的第一个参数 $1&quot;</span><br><span class="line">echo &quot;脚本的第二个参数 $2&quot;</span><br></pre></td></tr></table></figure><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;请输入字符串&quot; input</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ifelse</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">字符串运算符</span></span><br><span class="line">if [[ $input ]]; then</span><br><span class="line">echo &quot;输入的字符串不为空&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;输入的字符串为空&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ -n $input ]]; then</span><br><span class="line">echo &quot;输入的字符串长度不为0&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;输入的字符串长度为0&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件测试运算符</span></span><br><span class="line">if [[ ! -e &quot;./test.sh&quot; ]]; then</span><br><span class="line">echo &quot;./test.sh 文件不存在&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;./test.sh 文件存在哈&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;这里显示换行&quot;</span><br><span class="line">echo &quot;\n&quot;</span><br><span class="line">echo &quot;这里显示换行&quot;</span><br></pre></td></tr></table></figure><h3 id="选择分支语句"><a href="#选择分支语句" class="headerlink" title="选择分支语句"></a>选择分支语句</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;请输入0-9数字，会自动生成成语&quot; num</span><br><span class="line"></span><br><span class="line">case $num in</span><br><span class="line">1 )</span><br><span class="line">echo &quot;一生一世&quot;</span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line">ehco &quot;二龙戏珠&quot;</span><br><span class="line">;;</span><br><span class="line">3)</span><br><span class="line">echo &quot;三阳开泰&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;输入了其他值&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;请输入一句话，循环打印每个单词&quot; words</span><br><span class="line"></span><br><span class="line">for w in $words; do</span><br><span class="line">echo &quot;$&#123;w&#125;&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">read -p &quot;请输入0-9数字，循环打印数字&quot; nums</span><br><span class="line"></span><br><span class="line">while [[ $nums -gt 0 ]]; do</span><br><span class="line">echo &quot;$nums&quot; </span><br><span class="line">nums=$((nums-1))</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">let</span> nums=nums-1</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;输入一个数字&quot; inputNum</span><br><span class="line">echo &quot;减一得 $((inputNum-1))&quot;</span><br><span class="line">let inputNum=inputNum-2;</span><br><span class="line">echo &quot;减二得$inputNum&quot;</span><br></pre></td></tr></table></figure><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">printfunc()&#123;</span><br><span class="line">echo &quot;printfunc() 函数被调用了&quot;</span><br><span class="line">echo &quot;函数的参数个数为$#&quot;</span><br><span class="line">echo &quot;第一个参数为$1&quot;</span><br><span class="line">echo &quot;第二个参数为$2&quot;</span><br><span class="line">echo &quot;第三个参数为$3&quot;</span><br><span class="line">echo &quot;第四个参数为$4&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printfunc 参数1 参数2 参数3 参数4 </span><br><span class="line">echo &quot;函数返回值 $?&quot;</span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set --"></a><code>set --</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set -- &quot;$args0&quot; &quot;$args1&quot;</span><br><span class="line"></span><br><span class="line">用于将变量 &quot;$args0&quot; 和 &quot;$args1&quot; 的值设置为脚本或函数的第一个和第二个位置参数。</span><br><span class="line">在 Unix shell 中，&quot;set&quot; 命令用于设置或显示各种 shell 选项和参数。使用 &quot;--&quot; 选项时，表示选项结束，后续的任何参数都将作为位置参数处理。</span><br></pre></td></tr></table></figure><h3 id="输出当前脚本文件目录"><a href="#输出当前脚本文件目录" class="headerlink" title="输出当前脚本文件目录"></a>输出当前脚本文件目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirname &quot;$0&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何编写shell脚本</title>
      <link href="/2023/06/21/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99shell%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/06/21/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99shell%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="如何编写-shell-脚本"><a href="#如何编写-shell-脚本" class="headerlink" title="如何编写 shell  脚本?"></a>如何编写 shell  脚本?</h3><ul><li><a href="https://itnext.io/upgrading-bash-on-macos-7138bd1066ba">升级bash</a></li><li>选择编辑器</li><li>安装 shell check 语法检查工具</li></ul><h4 id="安装-shellcheck-工具"><a href="#安装-shellcheck-工具" class="headerlink" title="安装 shellcheck 工具"></a>安装 shellcheck 工具</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install shellcheck</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="安装-sublimelinter-插件"><a href="#安装-sublimelinter-插件" class="headerlink" title="安装 sublimelinter 插件"></a>安装 sublimelinter 插件</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sublime text -&gt; preferences -&gt; package control -&gt; install package -&gt; sublimelinter</span><br></pre></td></tr></table></figure><h4 id="安装-sublimelinter-shellcheck-插件"><a href="#安装-sublimelinter-shellcheck-插件" class="headerlink" title="安装 sublimelinter-shellcheck 插件"></a>安装 sublimelinter-shellcheck 插件</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sublime text -&gt; preferences -&gt; package control -&gt; install package -&gt; sublimelinter-shellcheck</span><br></pre></td></tr></table></figure><h4 id="查看本地是否安装了插件"><a href="#查看本地是否安装了插件" class="headerlink" title="查看本地是否安装了插件"></a>查看本地是否安装了插件</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sublime text -&gt; preferences -&gt; package control -&gt; list packages -&gt; sublimelinter-shellcheck</span><br></pre></td></tr></table></figure><h4 id="创建-sh-脚本"><a href="#创建-sh-脚本" class="headerlink" title="创建 .sh 脚本"></a>创建 .sh 脚本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch $script.sh </span><br></pre></td></tr></table></figure><h4 id="打开文件编辑"><a href="#打开文件编辑" class="headerlink" title="打开文件编辑"></a>打开文件编辑</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open $script -a Sublime\ Text </span><br></pre></td></tr></table></figure><h4 id="语法检查"><a href="#语法检查" class="headerlink" title="语法检查"></a>语法检查</h4><ul><li>使用 shellcheck 直接语法检查</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shellcheck $script</span><br></pre></td></tr></table></figure><ul><li><p>sublime 插件自动提示</p><p><img src="https://p.ipic.vip/r5wmbd.png" alt="image-20230621181544039"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shellcheck </tag>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux命令大全</title>
      <link href="/2023/06/21/linux-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2023/06/21/linux-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="linux-命令大全"><a href="#linux-命令大全" class="headerlink" title="linux 命令大全"></a>linux 命令大全</h2><ul><li><a href="https://www.runoob.com/linux/linux-command-manual.html">Runoob</a></li><li><a href="https://man.niaoge.com/">鸟哥Linux命令大全</a></li><li><a href="http://linux.51yip.com/">Linux命令手册</a></li><li><a href="https://www.linuxcool.com/">Linux命令大全(手册)</a></li><li><a href="https://www.linuxcommands.site/">LinuxCommands.site</a>]</li></ul><span id="more"></span><table><thead><tr><th><strong>1、文件管理</strong></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/linux/linux-comm-cat.html">cat</a></td><td><a href="https://www.runoob.com/linux/linux-comm-chattr.html">chattr</a></td><td><a href="https://www.runoob.com/linux/linux-comm-chgrp.html">chgrp</a></td><td><a href="https://www.runoob.com/linux/linux-comm-chmod.html">chmod</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-chown.html">chown</a></td><td><a href="https://www.runoob.com/linux/linux-comm-cksum.html">cksum</a></td><td><a href="https://www.runoob.com/linux/linux-comm-cmp.html">cmp</a></td><td><a href="https://www.runoob.com/linux/linux-comm-diff.html">diff</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-diffstat.html">diffstat</a></td><td><a href="https://www.runoob.com/linux/linux-comm-file.html">file</a></td><td><a href="https://www.runoob.com/linux/linux-comm-find.html">find</a></td><td><a href="https://www.runoob.com/linux/linux-comm-git.html">git</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-gitview.html">gitview</a></td><td><a href="https://www.runoob.com/linux/linux-comm-indent.html">indent</a></td><td><a href="https://www.runoob.com/linux/linux-comm-cut.html">cut</a></td><td><a href="https://www.runoob.com/linux/linux-comm-ln.html">ln</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-less.html">less</a></td><td><a href="https://www.runoob.com/linux/linux-comm-locate.html">locate</a></td><td><a href="https://www.runoob.com/linux/linux-comm-lsattr.html">lsattr</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mattrib.html">mattrib</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-mc.html">mc</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mdel.html">mdel</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mdir.html">mdir</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mktemp.html">mktemp</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-more.html">more</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mmove.html">mmove</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mread.html">mread</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mren.html">mren</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-mtools.html">mtools</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mtoolstest.html">mtoolstest</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mv.html">mv</a></td><td><a href="https://www.runoob.com/linux/linux-comm-od.html">od</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-paste.html">paste</a></td><td><a href="https://www.runoob.com/linux/linux-comm-patch.html">patch</a></td><td><a href="https://www.runoob.com/linux/linux-comm-rcp.html">rcp</a></td><td><a href="https://www.runoob.com/linux/linux-comm-rm.html">rm</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-slocate.html">slocate</a></td><td><a href="https://www.runoob.com/linux/linux-comm-split.html">split</a></td><td><a href="https://www.runoob.com/linux/linux-comm-tee.html">tee</a></td><td><a href="https://www.runoob.com/linux/linux-comm-tmpwatch.html">tmpwatch</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-touch.html">touch</a></td><td><a href="https://www.runoob.com/linux/linux-comm-umask.html">umask</a></td><td><a href="https://www.runoob.com/linux/linux-comm-which.html">which</a></td><td><a href="https://www.runoob.com/linux/linux-comm-cp.html">cp</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-whereis.html">whereis</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mcopy.html">mcopy</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mshowfat.html">mshowfat</a></td><td><a href="https://www.runoob.com/linux/linux-comm-rhmask.html">rhmask</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-scp.html">scp</a></td><td><a href="https://www.runoob.com/linux/linux-comm-awk.html">awk</a></td><td><a href="https://www.runoob.com/linux/linux-comm-read.html">read</a></td><td><a href="https://www.runoob.com/linux/linux-comm-updatedb.html">updatedb</a></td></tr><tr><td><strong>2、文档编辑</strong></td><td></td><td></td><td></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-col.html">col</a></td><td><a href="https://www.runoob.com/linux/linux-comm-colrm.html">colrm</a></td><td><a href="https://www.runoob.com/linux/linux-comm-comm.html">comm</a></td><td><a href="https://www.runoob.com/linux/linux-comm-csplit.html">csplit</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-ed.html">ed</a></td><td><a href="https://www.runoob.com/linux/linux-comm-egrep.html">egrep</a></td><td><a href="https://www.runoob.com/linux/linux-comm-ex.html">ex</a></td><td><a href="https://www.runoob.com/linux/linux-comm-fgrep.html">fgrep</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-fmt.html">fmt</a></td><td><a href="https://www.runoob.com/linux/linux-comm-fold.html">fold</a></td><td><a href="https://www.runoob.com/linux/linux-comm-grep.html">grep</a></td><td><a href="https://www.runoob.com/linux/linux-comm-ispell.html">ispell</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-jed.html">jed</a></td><td><a href="https://www.runoob.com/linux/linux-comm-joe.html">joe</a></td><td><a href="https://www.runoob.com/linux/linux-comm-join.html">join</a></td><td><a href="https://www.runoob.com/linux/linux-comm-look.html">look</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-mtype.html">mtype</a></td><td><a href="https://www.runoob.com/linux/linux-comm-pico.html">pico</a></td><td><a href="https://www.runoob.com/linux/linux-comm-rgrep.html">rgrep</a></td><td><a href="https://www.runoob.com/linux/linux-comm-sed.html">sed</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-sort.html">sort</a></td><td><a href="https://www.runoob.com/linux/linux-comm-spell.html">spell</a></td><td><a href="https://www.runoob.com/linux/linux-comm-tr.html">tr</a></td><td><a href="https://www.runoob.com/linux/linux-comm-expr.html">expr</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-uniq.html">uniq</a></td><td><a href="https://www.runoob.com/linux/linux-comm-wc.html">wc</a></td><td><a href="https://www.runoob.com/linux/linux-comm-let.html">let</a></td><td></td></tr><tr><td><strong>3、文件传输</strong></td><td></td><td></td><td></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-lprm.html">lprm</a></td><td><a href="https://www.runoob.com/linux/linux-comm-lpr.html">lpr</a></td><td><a href="https://www.runoob.com/linux/linux-comm-lpq.html">lpq</a></td><td><a href="https://www.runoob.com/linux/linux-comm-lpd.html">lpd</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-bye.html">bye</a></td><td><a href="https://www.runoob.com/linux/linux-comm-ftp.html">ftp</a></td><td><a href="https://www.runoob.com/linux/linux-comm-uuto.html">uuto</a></td><td><a href="https://www.runoob.com/linux/linux-comm-uupick.html">uupick</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-uucp.html">uucp</a></td><td><a href="https://www.runoob.com/linux/linux-comm-uucico.html">uucico</a></td><td><a href="https://www.runoob.com/linux/linux-comm-tftp.html">tftp</a></td><td><a href="https://www.runoob.com/linux/linux-comm-ncftp.html">ncftp</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-ftpshut.html">ftpshut</a></td><td><a href="https://www.runoob.com/linux/linux-comm-ftpwho.html">ftpwho</a></td><td><a href="https://www.runoob.com/linux/linux-comm-ftpcount.html">ftpcount</a></td><td></td></tr><tr><td><strong>4、磁盘管理</strong></td><td></td><td></td><td></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-cd.html">cd</a></td><td><a href="https://www.runoob.com/linux/linux-comm-df.html">df</a></td><td><a href="https://www.runoob.com/linux/linux-comm-dirs.html">dirs</a></td><td><a href="https://www.runoob.com/linux/linux-comm-du.html">du</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-edquota.html">edquota</a></td><td><a href="https://www.runoob.com/linux/linux-comm-eject.html">eject</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mcd.html">mcd</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mdeltree.html">mdeltree</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-mdu.html">mdu</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mkdir.html">mkdir</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mlabel.html">mlabel</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mmd.html">mmd</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-mrd.html">mrd</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mzip.html">mzip</a></td><td><a href="https://www.runoob.com/linux/linux-comm-pwd.html">pwd</a></td><td><a href="https://www.runoob.com/linux/linux-comm-quota.html">quota</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-mount.html">mount</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mmount.html">mmount</a></td><td><a href="https://www.runoob.com/linux/linux-comm-rmdir.html">rmdir</a></td><td><a href="https://www.runoob.com/linux/linux-comm-rmt.html">rmt</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-stat.html">stat</a></td><td><a href="https://www.runoob.com/linux/linux-comm-tree.html">tree</a></td><td><a href="https://www.runoob.com/linux/linux-comm-umount.html">umount</a></td><td><a href="https://www.runoob.com/linux/linux-comm-ls.html">ls</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-quotacheck.html">quotacheck</a></td><td><a href="https://www.runoob.com/linux/linux-comm-quotaoff.html">quotaoff</a></td><td><a href="https://www.runoob.com/linux/linux-comm-lndir.html">lndir</a></td><td><a href="https://www.runoob.com/linux/linux-comm-repquota.html">repquota</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-quotaon.html">quotaon</a></td><td></td><td></td><td></td></tr><tr><td><strong>5、磁盘维护</strong></td><td></td><td></td><td></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-badblocks.html">badblocks</a></td><td><a href="https://www.runoob.com/linux/linux-comm-cfdisk.html">cfdisk</a></td><td><a href="https://www.runoob.com/linux/linux-comm-dd.html">dd</a></td><td><a href="https://www.runoob.com/linux/linux-comm-e2fsck.html">e2fsck</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-ext2ed.html">ext2ed</a></td><td><a href="https://www.runoob.com/linux/linux-comm-fsck.html">fsck</a></td><td><a href="https://www.runoob.com/linux/linux-comm-fsck-minix.html">fsck.minix</a></td><td><a href="https://www.runoob.com/linux/linux-comm-fsconf.html">fsconf</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-fdformat.html">fdformat</a></td><td><a href="https://www.runoob.com/linux/linux-comm-hdparm.html">hdparm</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mformat.html">mformat</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mkbootdisk.html">mkbootdisk</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-mkdosfs.html">mkdosfs</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mke2fs.html">mke2fs</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mkfs-ext2.html">mkfs.ext2</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mkfs-msdos.html">mkfs.msdos</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-mkinitrd.html">mkinitrd</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mkisofs.html">mkisofs</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mkswap.html">mkswap</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mpartition.html">mpartition</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-swapon.html">swapon</a></td><td><a href="https://www.runoob.com/linux/linux-comm-symlinks.html">symlinks</a></td><td><a href="https://www.runoob.com/linux/linux-comm-sync.html">sync</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mbadblocks.html">mbadblocks</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-mkfs-minix.html">mkfs.minix</a></td><td><a href="https://www.runoob.com/linux/linux-comm-fsck-ext2.html">fsck.ext2</a></td><td><a href="https://www.runoob.com/linux/linux-comm-fdisk.html">fdisk</a></td><td><a href="https://www.runoob.com/linux/linux-comm-losetup.html">losetup</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-mkfs.html">mkfs</a></td><td><a href="https://www.runoob.com/linux/linux-comm-sfdisk.html">sfdisk</a></td><td><a href="https://www.runoob.com/linux/linux-comm-swapoff.html">swapoff</a></td><td></td></tr><tr><td><strong>6、网络通讯</strong></td><td></td><td></td><td></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-apachectl.html">apachectl</a></td><td><a href="https://www.runoob.com/linux/linux-comm-arpwatch.html">arpwatch</a></td><td><a href="https://www.runoob.com/linux/linux-comm-dip.html">dip</a></td><td><a href="https://www.runoob.com/linux/linux-comm-getty.html">getty</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-mingetty.html">mingetty</a></td><td><a href="https://www.runoob.com/linux/linux-comm-uux.html">uux</a></td><td><a href="https://www.runoob.com/linux/linux-comm-telnet.html">telnet</a></td><td><a href="https://www.runoob.com/linux/linux-comm-uulog.html">uulog</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-uustat.html">uustat</a></td><td><a href="https://www.runoob.com/linux/linux-comm-ppp-off.html">ppp-off</a></td><td><a href="https://www.runoob.com/linux/linux-comm-netconfig.html">netconfig</a></td><td><a href="https://www.runoob.com/linux/linux-comm-nc.html">nc</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-httpd.html">httpd</a></td><td><a href="https://www.runoob.com/linux/linux-comm-ifconfig.html">ifconfig</a></td><td><a href="https://www.runoob.com/linux/linux-comm-minicom.html">minicom</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mesg.html">mesg</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-dnsconf.html">dnsconf</a></td><td><a href="https://www.runoob.com/linux/linux-comm-wall.html">wall</a></td><td><a href="https://www.runoob.com/linux/linux-comm-netstat.html">netstat</a></td><td><a href="https://www.runoob.com/linux/linux-comm-ping.html">ping</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-pppstats.html">pppstats</a></td><td><a href="https://www.runoob.com/linux/linux-comm-samba.html">samba</a></td><td><a href="https://www.runoob.com/linux/linux-comm-setserial.html">setserial</a></td><td><a href="https://www.runoob.com/linux/linux-comm-talk.html">talk</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-traceroute.html">traceroute</a></td><td><a href="https://www.runoob.com/linux/linux-comm-tty.html">tty</a></td><td><a href="https://www.runoob.com/linux/linux-comm-newaliases.html">newaliases</a></td><td><a href="https://www.runoob.com/linux/linux-comm-uuname.html">uuname</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-netconf.html">netconf</a></td><td><a href="https://www.runoob.com/linux/linux-comm-write.html">write</a></td><td><a href="https://www.runoob.com/linux/linux-comm-statserial.html">statserial</a></td><td><a href="https://www.runoob.com/linux/linux-comm-efax.html">efax</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-pppsetup.html">pppsetup</a></td><td><a href="https://www.runoob.com/linux/linux-comm-tcpdump.html">tcpdump</a></td><td><a href="https://www.runoob.com/linux/linux-comm-ytalk.html">ytalk</a></td><td><a href="https://www.runoob.com/linux/linux-comm-cu.html">cu</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-smbd.html">smbd</a></td><td><a href="https://www.runoob.com/linux/linux-comm-testparm.html">testparm</a></td><td><a href="https://www.runoob.com/linux/linux-comm-smbclient.html">smbclient</a></td><td><a href="https://www.runoob.com/linux/linux-comm-shapecfg.html">shapecfg</a></td></tr><tr><td><strong>7、系统管理</strong></td><td></td><td></td><td></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-adduser.html">adduser</a></td><td><a href="https://www.runoob.com/linux/linux-comm-chfn.html">chfn</a></td><td><a href="https://www.runoob.com/linux/linux-comm-useradd.html">useradd</a></td><td><a href="https://www.runoob.com/linux/linux-comm-date.html">date</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-exit.html">exit</a></td><td><a href="https://www.runoob.com/linux/linux-comm-finger.html">finger</a></td><td><a href="https://www.runoob.com/linux/linux-comm-fwhios.html">fwhios</a></td><td><a href="https://www.runoob.com/linux/linux-comm-sleep.html">sleep</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-suspend.html">suspend</a></td><td><a href="https://www.runoob.com/linux/linux-comm-groupdel.html">groupdel</a></td><td><a href="https://www.runoob.com/linux/linux-comm-groupmod.html">groupmod</a></td><td><a href="https://www.runoob.com/linux/linux-comm-halt.html">halt</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-kill.html">kill</a></td><td><a href="https://www.runoob.com/linux/linux-comm-last.html">last</a></td><td><a href="https://www.runoob.com/linux/linux-comm-lastb.html">lastb</a></td><td><a href="https://www.runoob.com/linux/linux-comm-login.html">login</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-logname.html">logname</a></td><td><a href="https://www.runoob.com/linux/linux-comm-logout.html">logout</a></td><td><a href="https://www.runoob.com/linux/linux-comm-ps.html">ps</a></td><td><a href="https://www.runoob.com/linux/linux-comm-nice.html">nice</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-procinfo.html">procinfo</a></td><td><a href="https://www.runoob.com/linux/linux-comm-top.html">top</a></td><td><a href="https://www.runoob.com/linux/linux-comm-pstree.html">pstree</a></td><td><a href="https://www.runoob.com/linux/linux-comm-reboot.html">reboot</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-rlogin.html">rlogin</a></td><td><a href="https://www.runoob.com/linux/linux-comm-rsh.html">rsh</a></td><td><a href="https://www.runoob.com/linux/linux-comm-sliplogin.html">sliplogin</a></td><td><a href="https://www.runoob.com/linux/linux-comm-screen.html">screen</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-shutdown.html">shutdown</a></td><td><a href="https://www.runoob.com/linux/linux-comm-rwho.html">rwho</a></td><td><a href="https://www.runoob.com/linux/linux-comm-sudo.html">sudo</a></td><td><a href="https://www.runoob.com/linux/linux-comm-gitps.html">gitps</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-swatch.html">swatch</a></td><td><a href="https://www.runoob.com/linux/linux-comm-tload.html">tload</a></td><td><a href="https://www.runoob.com/linux/linux-comm-logrotate.html">logrotate</a></td><td><a href="https://www.runoob.com/linux/linux-comm-uname.html">uname</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-chsh.html">chsh</a></td><td><a href="https://www.runoob.com/linux/linux-comm-userconf.html">userconf</a></td><td><a href="https://www.runoob.com/linux/linux-comm-userdel.html">userdel</a></td><td><a href="https://www.runoob.com/linux/linux-comm-usermod.html">usermod</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-vlock.html">vlock</a></td><td><a href="https://www.runoob.com/linux/linux-comm-who.html">who</a></td><td><a href="https://www.runoob.com/linux/linux-comm-whoami.html">whoami</a></td><td><a href="https://www.runoob.com/linux/linux-comm-whois.html">whois</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-newgrp.html">newgrp</a></td><td><a href="https://www.runoob.com/linux/linux-comm-renice.html">renice</a></td><td><a href="https://www.runoob.com/linux/linux-comm-su.html">su</a></td><td><a href="https://www.runoob.com/linux/linux-comm-skill.html">skill</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-w.html">w</a></td><td><a href="https://www.runoob.com/linux/linux-comm-id.html">id</a></td><td><a href="https://www.runoob.com/linux/linux-comm-groupadd.html">groupadd</a></td><td><a href="https://www.runoob.com/linux/linux-comm-free.html">free</a></td></tr><tr><td><strong>8、系统设置</strong></td><td></td><td></td><td></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-reset.html">reset</a></td><td><a href="https://www.runoob.com/linux/linux-comm-clear.html">clear</a></td><td><a href="https://www.runoob.com/linux/linux-comm-alias.html">alias</a></td><td><a href="https://www.runoob.com/linux/linux-comm-dircolors.html">dircolors</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-aumix.html">aumix</a></td><td><a href="https://www.runoob.com/linux/linux-comm-bind.html">bind</a></td><td><a href="https://www.runoob.com/linux/linux-comm-chroot.html">chroot</a></td><td><a href="https://www.runoob.com/linux/linux-comm-clock.html">clock</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-crontab.html">crontab</a></td><td><a href="https://www.runoob.com/linux/linux-comm-declare.html">declare</a></td><td><a href="https://www.runoob.com/linux/linux-comm-depmod.html">depmod</a></td><td><a href="https://www.runoob.com/linux/linux-comm-dmesg.html">dmesg</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-enable.html">enable</a></td><td><a href="https://www.runoob.com/linux/linux-comm-eval.html">eval</a></td><td><a href="https://www.runoob.com/linux/linux-comm-export.html">export</a></td><td><a href="https://www.runoob.com/linux/linux-comm-pwunconv.html">pwunconv</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-grpconv.html">grpconv</a></td><td><a href="https://www.runoob.com/linux/linux-comm-rpm.html">rpm</a></td><td><a href="https://www.runoob.com/linux/linux-comm-insmod.html">insmod</a></td><td><a href="https://www.runoob.com/linux/linux-comm-kbdconfig.html">kbdconfig</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-lilo.html">lilo</a></td><td><a href="https://www.runoob.com/linux/linux-comm-liloconfig.html">liloconfig</a></td><td><a href="https://www.runoob.com/linux/linux-comm-lsmod.html">lsmod</a></td><td><a href="https://www.runoob.com/linux/linux-comm-minfo.html">minfo</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-set.html">set</a></td><td><a href="https://www.runoob.com/linux/linux-comm-modprobe.html">modprobe</a></td><td><a href="https://www.runoob.com/linux/linux-comm-ntsysv.html">ntsysv</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mouseconfig.html">mouseconfig</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-passwd.html">passwd</a></td><td><a href="https://www.runoob.com/linux/linux-comm-pwconv.html">pwconv</a></td><td><a href="https://www.runoob.com/linux/linux-comm-rdate.html">rdate</a></td><td><a href="https://www.runoob.com/linux/linux-comm-resize.html">resize</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-rmmod.html">rmmod</a></td><td><a href="https://www.runoob.com/linux/linux-comm-grpunconv.html">grpunconv</a></td><td><a href="https://www.runoob.com/linux/linux-comm-modinfo.html">modinfo</a></td><td><a href="https://www.runoob.com/linux/linux-comm-time.html">time</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-setup.html">setup</a></td><td><a href="https://www.runoob.com/linux/linux-comm-sndconfig.html">sndconfig</a></td><td><a href="https://www.runoob.com/linux/linux-comm-setenv.html">setenv</a></td><td><a href="https://www.runoob.com/linux/linux-comm-setconsole.html">setconsole</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-timeconfig.html">timeconfig</a></td><td><a href="https://www.runoob.com/linux/linux-comm-ulimit.html">ulimit</a></td><td><a href="https://www.runoob.com/linux/linux-comm-unset.html">unset</a></td><td><a href="https://www.runoob.com/linux/linux-comm-chkconfig.html">chkconfig</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-apmd.html">apmd</a></td><td><a href="https://www.runoob.com/linux/linux-comm-hwclock.html">hwclock</a></td><td><a href="https://www.runoob.com/linux/linux-comm-mkkickstart.html">mkkickstart</a></td><td><a href="https://www.runoob.com/linux/linux-comm-fbset.html">fbset</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-unalias.html">unalias</a></td><td><a href="https://www.runoob.com/linux/linux-comm-svgatextmode.html">SVGATextMode</a></td><td><a href="https://www.runoob.com/linux/linux-comm-gpasswd.html">gpasswd</a></td><td></td></tr><tr><td><strong>9、备份压缩</strong></td><td></td><td></td><td></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-ar.html">ar</a></td><td><a href="https://www.runoob.com/linux/linux-comm-bunzip2.html">bunzip2</a></td><td><a href="https://www.runoob.com/linux/linux-comm-bzip2.html">bzip2</a></td><td><a href="https://www.runoob.com/linux/linux-comm-bzip2recover.html">bzip2recover</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-gunzip.html">gunzip</a></td><td><a href="https://www.runoob.com/linux/linux-comm-unarj.html">unarj</a></td><td><a href="https://www.runoob.com/linux/linux-comm-compress.html">compress</a></td><td><a href="https://www.runoob.com/linux/linux-comm-cpio.html">cpio</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-dump.html">dump</a></td><td><a href="https://www.runoob.com/linux/linux-comm-uuencode.html">uuencode</a></td><td><a href="https://www.runoob.com/linux/linux-comm-gzexe.html">gzexe</a></td><td><a href="https://www.runoob.com/linux/linux-comm-gzip.html">gzip</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-lha.html">lha</a></td><td><a href="https://www.runoob.com/linux/linux-comm-restore.html">restore</a></td><td><a href="https://www.runoob.com/linux/linux-comm-tar.html">tar</a></td><td><a href="https://www.runoob.com/linux/linux-comm-uudecode.html">uudecode</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-unzip.html">unzip</a></td><td><a href="https://www.runoob.com/linux/linux-comm-zip.html">zip</a></td><td><a href="https://www.runoob.com/linux/linux-comm-zipinfo.html">zipinfo</a></td><td></td></tr><tr><td><strong>10、设备管理</strong></td><td></td><td></td><td></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-setleds.html">setleds</a></td><td><a href="https://www.runoob.com/linux/linux-comm-loadkeys.html">loadkeys</a></td><td><a href="https://www.runoob.com/linux/linux-comm-rdev.html">rdev</a></td><td><a href="https://www.runoob.com/linux/linux-comm-dumpkeys.html">dumpkeys</a></td></tr><tr><td><a href="https://www.runoob.com/linux/linux-comm-makedev.html">MAKEDEV</a></td><td><a href="https://www.runoob.com/linux/linux-comm-poweroff.html">poweroff</a></td><td></td><td></td></tr></tbody></table><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><ul><li><a href="https://www.runoob.com/linux/linux-comm-bc.html">Linux bc 命令</a></li><li><a href="https://www.runoob.com/linux/linux-comm-tail.html">Linux tail 命令</a></li><li><a href="https://www.runoob.com/linux/linux-comm-head.html">Linux head 命令</a></li><li><a href="https://www.runoob.com/linux/linux-comm-xargs.html">Linux xargs 命令</a></li><li><a href="https://www.runoob.com/linux/linux-comm-ip.html">Linux ip 命令</a></li><li><a href="https://www.runoob.com/linux/linux-comm-nohup.html">Linux nohup 命令</a></li><li><a href="https://www.runoob.com/linux/linux-comm-killall.html">Linux killall 命令</a></li><li><a href="https://www.runoob.com/linux/linux-comm-pkill.html">Linux pkill 命令</a></li></ul><h2 id="扩展文章"><a href="#扩展文章" class="headerlink" title="扩展文章"></a>扩展文章</h2><ul><li><a href="https://www.runoob.com/w3cnote/linux-command-full-fight.html">Linux 常用命令全拼</a></li></ul><h2 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h2><ol><li>MAC</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pbcopy &lt; $file</span><br><span class="line">pbpaste &gt; $file</span><br></pre></td></tr></table></figure><ol start="2"><li>linux</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要安装xclip</span></span><br><span class="line">xclip &lt; $file</span><br><span class="line">xclip &gt; $file</span><br></pre></td></tr></table></figure><ol start="3"><li>windows</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; $file</span><br><span class="line">clip &gt; $file</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制基础</title>
      <link href="/2023/06/20/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/06/20/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://p.ipic.vip/tuhmu1.png" alt="Binar_Fundamentals_00.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 虚拟机指令集</title>
      <link href="/2023/06/20/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
      <url>/2023/06/20/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p><strong>指令集</strong></p><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构</title>
      <link href="/2023/06/16/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/06/16/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="8b86f93ee54061a79c4fbbd388fbeae91cb54899462e40045bf4993458fd5cee">d9af0d76b06a2b0209968314532a4830345025fb061bc75fe0ae1a4c2a38428808350cc154cf98c5ee0600bcd71bf575f1b26d06229ec072060e09d8e8cd2b33851bc512dbf755e795e512c6494f49096b6db0dd87b4c49a41e83662b1d5263c7b757c487ddbf6b8a5708726adbb704bd88119f44462c156e0b10b041c34d88c021aa2bde0f1101b14cbba698069695ef9e8ba05ec1bc4139605a35ee7f1e6099569b362a6e05bcf8557ea7161173c614d7551fbab2311ee9062e000223e5006e2a1b1f624d050c1ce52570472203a441961c4148f7c8a30b77b3a8da56e533dc77c315fd2badcd57014d31c165ee52da5a18f5b72799eaf646f0a023f014f6249aa39bca43f9e6d4597ce00deb6343b4f5b74e5909e803a1907d2442ca0b122329aa014e61f138a98af079e5653ef98fa806b9e4110215133ca6a76b2248f466fce809e089e2d6fe46e7744c8f8aa831d7b08d3313f6998f5074a67340cfd2cc6f8bcbf5bae251464a03435bcdc39f084a3f0daafa84bb796f8b48e7818f9518157b3b4cc8df92bd427ac79557a363297ff66bb986448b916a50ea7588948c0c01532852e345048e82a5b2a48476bd5804140e9b62fac435b1200edc32dbf8d6464955af938ca2b36699ef96231eceea3117692332246637c68c7c8ce12c4d8c86a7fd53c00e9e923dd04e25b6a8d6c3160c9c16ac19cfeeb3d44e7dd63768cb5c86d3aaae5872b36d9304cc3c7e12f444d6474eb9b80d621debd4b649f50306e59d673f5dd7cce69c86d23e8e374859aab745c6a48a0d4fbb225ce27bc9d9540f12a9e49d658b4676e8dbea31e5302a62b6a7ea9b37629fe6831e8dc97beef71e6b7f2aec2419d54a2a25b38d3f0a88fb2536cbb64e0783c5b8e1008441a1dc3a7dc6af50948de0135829abb7bc017f906e0d71f36e885679eb4528d9fb6c934b49321f9bf954701888a153eef0d66b4f441e852ed39489ce6dc74b47160a8d4566998a1295986b4a53f863de7162d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">input password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>source 命令详解</title>
      <link href="/2023/06/15/source-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/06/15/source-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li><code>source</code>命令也称为<strong>点命令</strong>，也就是一个点符号<code>.</code>是<code>bash</code>的内部命令。 功能：使 <code>shell </code>读入指定的<code>shell</code>程序文件并依次执行文件中的所有语句。 使用范例：<code>source $filename </code></li><li>为什么在修改了环境变量后执行<code>source</code>命令? 例如当我修改了<code>/etc/profile</code>文件，我想让它立刻生效，而不用重新登录；这时就想到用 <code>source</code> 命令，如 <code>source /etc/profile</code>。这样就重新执行刚修改的初始化文件，使之立即生效。</li></ul><span id="more"></span><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p><code>source $filename</code> 与 <code>sh $filename</code> 及 <code>./$filename</code> 执行脚本的区别？</p><ul><li>当<code>shell</code>脚本具有可执行权限时，用<code>sh $filename</code>与<code>./filename</code>执行脚本是没有区别得。<code>./filename</code>是因为当前目录没有在<code>PATH</code>中，所有<code>.</code>是用来表示当前目录的。</li><li><code>sh $filename</code> 重新建立一个**子<code>shell</code><strong>，在子<code>shell</code>中执行脚本里面的语句，</strong>该子<code>shell</code>继承父<code>shell</code>的环境变量，但子<code>shell</code>新建的、改变的变量不会被带回父<code>shell</code>，除非使用<code>export</code>。</li><li><code>source $filename</code>：这个命令其实只是简单地<strong>读取</strong>脚本里面的语句依次在当前<code>shell</code>里面<strong>执行</strong>，没有建立新的子<code>shell</code>。那么脚本里面所有新建、改变变量的语句都会保存在当前<code>shell</code>里面，当这个<code>shell</code>关闭后就失效了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> source </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlite3常用命令</title>
      <link href="/2023/06/15/sqlite3%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/06/15/sqlite3%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="官方下载地址"><a href="#官方下载地址" class="headerlink" title="官方下载地址"></a>官方下载地址</h3><p><a href="https://www.sqlite.org/download.html">https://www.sqlite.org/download.html</a></p><span id="more"></span> <h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th align="left">命令</th><th>描述</th></tr></thead><tbody><tr><td align="left"><code>sqlite3  test.db</code></td><td>创建或者打开数据库</td></tr><tr><td align="left"><code>.show</code></td><td>显示各种设置的当前值</td></tr><tr><td align="left"><code>.mode column</code></td><td>设置为表格模式</td></tr><tr><td align="left"><code>.headers on</code></td><td>展示表格头</td></tr><tr><td align="left"><code>.timer on</code></td><td>开启 cpu 定时器</td></tr><tr><td align="left"><code>.databases</code></td><td>查看有哪些数据库</td></tr><tr><td align="left"><code>.tables</code></td><td>查看有哪些表</td></tr><tr><td align="left"><code>.schema $table</code></td><td>查看表概要</td></tr><tr><td align="left"><code>.indices ?table</code></td><td>查看索引，可选指定<code>table</code></td></tr><tr><td align="left"><code>.backup $db $file</code>;</td><td>备份数据库到文件</td></tr><tr><td align="left"><code>.dump ?table</code>;</td><td>以 <code>sql</code> 文本格式转储数据库，可选指定<code>table</code></td></tr><tr><td align="left"><code>.quit</code>;</td><td>退出编辑模式</td></tr><tr><td align="left"><code>.help</code>;</td><td>显示帮助信息</td></tr><tr><td align="left"><code>ctrl⌃+d</code></td><td>强制退出<code>sqlite3</code>程序</td></tr></tbody></table><!-- more --><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>点命令后不能跟分号<code>;</code></p><p>您可以使用下列的点命令来格式化输出为本教程下面所列出的格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt;.header on</span><br><span class="line">sqlite&gt;.mode column</span><br><span class="line">sqlite&gt;.timer on</span><br><span class="line">sqlite&gt;</span><br></pre></td></tr></table></figure><h3 id="sqlite-master"><a href="#sqlite-master" class="headerlink" title="sqlite_master"></a><code>sqlite_master</code></h3><p>主表中保存数据库表的关键信息，并把它命名为 <strong>sqlite_master</strong>。如要查看表概要，可按如下操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt;.schema sqlite_master</span><br></pre></td></tr></table></figure><p>这将产生如下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE sqlite_master (</span><br><span class="line">  type text,</span><br><span class="line">  name text,</span><br><span class="line">  tbl_name text,</span><br><span class="line">  rootpage integer,</span><br><span class="line">  sql text</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="sqlite-sequence"><a href="#sqlite-sequence" class="headerlink" title="sqlite_sequence"></a><code>sqlite_sequence</code></h3><p>当<code>sqlite</code>数据库中包含自增列时，会自动建立一个名为 sqlite_sequence 的表。这个表包含两个列：<code>name</code>和<code>seq</code>。<code>name</code>记录自增列所在的表，<code>seq</code>记录当前序号（下一条记录的编号就是当前序号加1）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; select * from sqlite_sequence;</span><br></pre></td></tr></table></figure><h3 id="autoincrement"><a href="#autoincrement" class="headerlink" title="autoincrement"></a><code>autoincrement</code></h3><p><code>sqlite</code> 的 <strong>autoincrement</strong> 是一个关键字，用于表中的字段值自动递增。我们可以在创建表时在特定的列名称上使用 <strong>autoincrement</strong> 关键字实现该字段值的自动增加。</p><p>关键字 <code>autoincrement</code> 的使用，必须满足以下两点:<br><strong>1、只能用于整型（INTEGER）字段，INT类型也不可以；</strong><br><strong>2、只能用于PRIMARY KEY字段；</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; create table if not exists $tablename ( _id integer primary key autoincrement , name text , age int );</span><br></pre></td></tr></table></figure><h3 id="获取表信息"><a href="#获取表信息" class="headerlink" title="获取表信息"></a>获取表信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; pragma table_info( $tablename ); </span><br></pre></td></tr></table></figure><h3 id="创建表语句"><a href="#创建表语句" class="headerlink" title="创建表语句"></a>创建表语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; </span><br><span class="line">create table if not exists $table_name(</span><br><span class="line">   $column1 datatype  primary key(one or more columns),</span><br><span class="line">   $column2 datatype,</span><br><span class="line">   $column3 datatype,</span><br><span class="line">   .....</span><br><span class="line">   $columnN datatype,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="删除表-truncate"><a href="#删除表-truncate" class="headerlink" title="删除表 truncate"></a>删除表 <code>truncate</code></h3><p>在 <code>sqlite</code> 中，并没有 <code>truncate table</code> 命令，但可以使用 <code>sqlite</code> 的 <code>delete</code> 命令从已有的表中删除全部的数据。</p><p><code>delete</code> 命令的基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; delete from table_name;</span><br></pre></td></tr></table></figure><p>但这种方法无法将递增数归零。</p><p>如果要将递增数归零，可以使用以下方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; delete from sqlite_sequence where name = $table_name;</span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; insert or replace into $tablename ( ?,?,?,? ) values ( ?,?,?,? );</span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; select * from $tablename where $col1=?;</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; delete from $tablename where $col1=?;</span><br></pre></td></tr></table></figure><h3 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a><a href="https://www.runoob.com/sqlite/sqlite-transaction.html">事务控制</a></h3><p>使用下面的命令来控制事务：</p><ul><li><code>begin transaction</code>：开始事务处理。</li><li><code>commit</code>：保存更改，或者可以使用 <code>end transaction</code> 命令。</li><li><code>rollback</code>：回滚所做的更改。</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a><a href="https://www.runoob.com/sqlite/sqlite-index.html">索引</a></h3><p>使用 <code>create index</code> 语句创建索引，它允许命名索引，指定表及要索引的一列或多列，并指示索引是升序排列还是降序排列。索引也可以是唯一的，与 <code>unique</code> 约束类似，在列上或列组合上防止重复条目。</p><h4 id="创建单列索引"><a href="#创建单列索引" class="headerlink" title="创建单列索引"></a>创建单列索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; create index $index_name on $table_name ( $column_name);</span><br></pre></td></tr></table></figure><h4 id="创建联合索引"><a href="#创建联合索引" class="headerlink" title="创建联合索引"></a>创建联合索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; create index $index_name on $table_name ( $column_name1 , $column_name2);</span><br></pre></td></tr></table></figure><h4 id="创建联合唯一索引"><a href="#创建联合唯一索引" class="headerlink" title="创建联合唯一索引"></a>创建联合唯一索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; create unique index $index_name on $table_name ( $column_name1 , $column_name2);</span><br></pre></td></tr></table></figure><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; drop index $index_name;</span><br></pre></td></tr></table></figure><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a><a href="https://www.runoob.com/sqlite/sqlite-constraints.html">约束</a></h3><p>约束是在表的数据列上强制执行的规则。这些是用来限制可以插入到表中的数据类型。这确保了数据库中数据的准确性和可靠性。约束可以是列级或表级。列级约束仅适用于列，表级约束被应用到整个表。以下是在 SQLite 中常用的约束。</p><ul><li><code>not null</code> 约束：确保某列不能有 <code>null</code> 值。</li><li><code>default</code> 约束：当某列没有指定值时，为该列提供默认值。</li><li><code>unique</code> 约束：确保某列中的所有值是不同的。</li><li><code>primary key</code> 约束：唯一标识数据库表中的各行&#x2F;记录。</li><li><code>check</code> 约束：<code>check</code> 约束确保某列中的所有值满足一定条件。</li></ul><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a><a href="https://www.runoob.com/sqlite/sqlite-trigger.html">触发器</a></h3><p><code>sqlite</code> 触发器（<code>trigger</code>）是数据库的回调函数，它会在指定的数据库事件发生时自动执行&#x2F;调用。</p><p>创建触发器</p><ul><li><p><code>sqlite</code> 的触发器（<code>trigger</code>）可以指定在特定的数据库表发生 <code>delete</code>、<code>insert</code> 或 <code>update</code> 时触发，或在一个或多个指定表的列发生更新时触发。</p></li><li><p><code>before</code> 或 <code>after</code> 关键字决定何时执行触发器动作，决定是在关联行的插入、修改或删除之前或者之后执行触发器动作。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create  trigger $trigger_name [BEFORE|AFTER] $event_name of $column_name on $table_name</span><br><span class="line">begin</span><br><span class="line"> -- 触发器逻辑....</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p>查看触发器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; select name from sqlite_master</span><br><span class="line">where type = &#x27;trigger&#x27;;</span><br></pre></td></tr></table></figure><p>删除触发器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; drop trigger $trigger_name;</span><br></pre></td></tr></table></figure><h3 id="pragma"><a href="#pragma" class="headerlink" title="pragma"></a><a href="https://www.runoob.com/sqlite/sqlite-pragma.html"><code>pragma</code></a></h3><p><code>sqlite</code> 的 <code>pragma</code> 命令是一个特殊的命令，可以用在 <code>sqlite</code> 环境内控制各种环境变量和状态标志。一个 <code>pragma</code> 值可以被读取，也可以根据需求进行设置。</p><p>要查询当前的 <code>pragma</code> 值，只需要提供该 <code>pragma</code> 的名字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pragma $pragma_name;</span><br></pre></td></tr></table></figure><p>要为 <code>pragma</code> 设置一个新的值，语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pragma $pragma_name = $value;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sudo详解</title>
      <link href="/2023/06/15/sudo%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/06/15/sudo%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h2><p><strong>sudo</strong> 的全称为：<strong>super user do</strong>。 顾名思义：干超级用户才能干的事！所以Sudo最常用的功能就是提升一个命名的执行权限。</p><p>在 <a href="https://link.zhihu.com/?target=https://blog.csdn.net/ShuSheng0007/article/details/105343009">秒懂Linux文件权限及chmod命令</a>一文中我们讲过，Linux是以<strong>用户</strong>和<strong>组</strong>来管理权限的，如果你使用的账户权限不够，那么有些动作你是做不了的，例如重启服务器（<code>reboot</code> 命令），那怎么办呢？</p><p>有的同学要杠了，<code>root</code>账户不香吗？你丫以为每个服务器都是你家买的啊，谁都能用<code>root</code>? 其实这个命令最主要的意图就是解决<code>root</code>在使用过程中存在的问题。<code>root</code> 权限实在是太大了，泄漏或者误操作都将造成巨大的风险，于是<code>sudo</code>横空出世了！ 所以说，就算是你有<code>root</code>权限，使用这个命令也可以防止由于误操作造成不可挽回的损失或麻烦。</p><span id="more"></span><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p><code>sudo</code>是<code>linux</code>系统管理指令，是允许系统管理员让普通用户执行一些或者全部的<code>root</code>命令的一个工具，如<code>halt</code>，<code>reboot</code>，<code>su</code>等等。换句话说通过此命令可以让非<code>root</code>的用户运行只有<code>root</code>才有权限执行的命令。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>是不是每一个新创建的用户都可以使用<code>sudo</code>提升命令的权限呢？如果不是那么哪些用户可以使用此命令呢？</p><p>要想使一个用户具有使用<code>sudo</code>的能力，需要让<code>root</code>用户将其名字、可以执行的特定命令、按照哪种用户或用户组的身份执行等信息注册到<code>/etc/sudoers</code>文件中，即完成对该用户的授权（此时该用户称为<code>sudoer</code>）才可以。</p><p>当一般用户执行特殊权限时，在命令前加上 <code>sudo</code>，此时系统会让你输入密码以确认终端机前操作的是你本人，确认后系统会将该命令的进程以超级用户的权限运行。</p><p>在一定的时间段内，再次执行<code>sudo</code>的命令时不再询问密码，超出此时间段（一般为5分钟）后需要再次输入密码。</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sudo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>adb常见链接问题</title>
      <link href="/2023/03/31/adb%E5%B8%B8%E8%A7%81%E9%93%BE%E6%8E%A5%E9%97%AE%E9%A2%98/"/>
      <url>/2023/03/31/adb%E5%B8%B8%E8%A7%81%E9%93%BE%E6%8E%A5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>手机问题</p><ol><li>没有开启手机开发者模式以及USB调试模式</li><li>USB 连接方式设置为仅充电</li><li>手机系统问题，重启手机</li></ol><p>数据线问题</p><ol><li>数据线不能传输数据</li></ol><p>驱动问题</p><ol><li>电脑 usb 驱动有问题，重启电脑</li></ol><p>WIFI 调试 offline 问题：</p><ol><li>重启开发者选项</li><li>重启 adb server</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb kill-server</span><br><span class="line">adb start-server</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gradle刷新本地缓存</title>
      <link href="/2023/03/31/gradle%E5%88%B7%E6%96%B0%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/"/>
      <url>/2023/03/31/gradle%E5%88%B7%E6%96%B0%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>方式1 ：If you are using a recent version of Gradle, you can use –refresh-dependencies option.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build --refresh-dependencies</span><br></pre></td></tr></table></figure><p>方式2：On Unix systems, you can delete all the existing artifacts (artifacts and metadata) Gradle has downloaded using:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf $HOME/.gradle/caches/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>^异或运算符</title>
      <link href="/2023/03/31/%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2023/03/31/%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p>异或运算有以下三个性质。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2023/png/3756563/1675451742037-3626271e-5e5b-4db6-b719-5d4e28755d53.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AS查看项目依赖树</title>
      <link href="/2023/03/31/AS%E6%9F%A5%E7%9C%8B%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E6%A0%91/"/>
      <url>/2023/03/31/AS%E6%9F%A5%E7%9C%8B%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./gradlew :模块名:dependencies  --scan </span><br><span class="line">./gradlew :模块名:dependencies  &gt; xx.log </span><br></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build --scan</span><br></pre></td></tr></table></figure><p>出现</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2023/png/3756563/1675751747423-7a38c8aa-f7b5-4617-a72a-4b397a8b7f43.png" alt="img"></p><p>输入yes</p><p>生成网址：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2023/png/3756563/1675751788849-e8c61be8-fe70-43f4-b3b1-69e6ef5b4668.png" alt="img"></p><p>点击网站查看</p><h4 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h4><p>使用 Gradle Project</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2023/png/3756563/1675752215256-2819385e-1548-4705-8b5e-8757b7d6966a.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> as </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android签名验证</title>
      <link href="/2023/03/31/Android%E7%AD%BE%E5%90%8D%E9%AA%8C%E8%AF%81/"/>
      <url>/2023/03/31/Android%E7%AD%BE%E5%90%8D%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apksigner verify  -v  文件路径</span><br></pre></td></tr></table></figure><h3 id="人工简单查看"><a href="#人工简单查看" class="headerlink" title="人工简单查看"></a>人工简单查看</h3><ol><li><p>解压 apk&#x2F;META-INF&#x2F;，找到 .SF文件，（一般是 CERT.SF 文件 ），如果不存在说明不存在 v1 签名。</p></li><li><p>解压apk&#x2F;META-INF&#x2F;XXXX.SF(如CERT.SF，不是MANIFEST.SF)，查看开始部分，如果不包含X-Android-APK-Signed字样则为v1， 如：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Signature-Version: 1.0</span><br><span class="line">SHA1-Digest-Manifest-Main-Attributes: NdvTTYSDLv+xfCdISs2OUVv3OXY=</span><br><span class="line">Created-By: 1.6.0_37 (Sun Microsystems Inc.)</span><br><span class="line">SHA1-Digest-Manifest: sN1jczINBspGueVoYodPfvNRYKA=</span><br></pre></td></tr></table></figure><ol><li>包含X-Android-APK-Signed字样，则冒号后面跟的版本就是签名版本，如下面是v1和v2版本</li></ol><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Signature-Version: 1.0</span><br><span class="line">Created-By: 1.0 (Android)</span><br><span class="line">SHA1-Digest-Manifest: EsSraWdS5nUZen7L+SDZDNTr230=</span><br><span class="line">X-Android-APK-Signed: 2</span><br></pre></td></tr></table></figure><ol><li>包含X-Android-APK-Signed字样，则冒号后面跟的版本就是签名版本，如下面是v2和v3版本</li></ol><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Signature-Version: 1.0</span><br><span class="line">Created-By: 1.0 (Android)</span><br><span class="line">SHA1-Digest-Manifest: EsSraWdS5nUZen7L+SDZDNTr230=</span><br><span class="line">X-Android-APK-Signed: 2, 3</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="工具查看-通过工具会输出详细的签名信息"><a href="#工具查看-通过工具会输出详细的签名信息" class="headerlink" title="工具查看(通过工具会输出详细的签名信息)"></a>工具查看(通过工具会输出详细的签名信息)</h3><p>在SDK&#x2F;build-tools&#x2F;版本（如30.0.2）&#x2F;apksigner.bat或SDK&#x2F;build-tools&#x2F;版本（如30.0.2）&#x2F;lib&#x2F;apksigner.jar两种工具。</p><ul><li>工具一使用：</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SDK/build-tools/版本（如30.0.2）/apksigner.bat verify --verbose xxx.apk</span><br></pre></td></tr></table></figure><ul><li>工具二使用：</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar SDK/build-tools/版本（如30.0.2）/lib/apksigner.jar --verbose xxx.apk</span><br></pre></td></tr></table></figure><p>示例(v1+v2)：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">E:<span class="keyword">\Android</span><span class="keyword">\Sdk</span><span class="keyword">\build</span>-tools<span class="keyword">\3</span>0.0.2<span class="keyword">\apksigner</span>.bat verify --verbose .<span class="keyword">\cdd</span>.apk</span><br><span class="line"><span class="built_in">&amp;</span>nbsp;</span><br><span class="line">Verifies</span><br><span class="line">Verified using v1 scheme (JAR signing): true</span><br><span class="line">Verified using v2 scheme (APK Signature Scheme v2): true</span><br><span class="line">Verified using v3 scheme (APK Signature Scheme v3): false</span><br><span class="line">Verified using v4 scheme (APK Signature Scheme v4): false</span><br><span class="line">Verified for SourceStamp: false</span><br><span class="line">Number of signers: 1</span><br></pre></td></tr></table></figure><p>示例（v1）：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Verifies</span><br><span class="line">Verified using v1 scheme (JAR signing): true</span><br><span class="line">Verified using v2 scheme (APK Signature Scheme v2): false</span><br><span class="line">Verified using v3 scheme (APK Signature Scheme v3): false</span><br><span class="line">Verified using v4 scheme (APK Signature Scheme v4): false</span><br><span class="line">Verified for SourceStamp: false</span><br><span class="line">Nuer of signers: 1</span><br></pre></td></tr></table></figure><h2 id="更详细说明"><a href="#更详细说明" class="headerlink" title="更详细说明"></a>更详细说明</h2><p><a href="https://developer.android.com/studio/command-line/apksigner?hl=zh-cn#options">https://developer.android.com/studio/command-line/apksigner?hl=zh-cn#options</a></p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 签名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用反编译工具</title>
      <link href="/2023/03/31/%E5%8F%8D%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/"/>
      <url>/2023/03/31/%E5%8F%8D%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<ul><li>jadx</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jadx-gui</span><br></pre></td></tr></table></figure><ul><li>jdgui</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdgui</span><br></pre></td></tr></table></figure><ul><li>proguard</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proguardgui.sh</span><br></pre></td></tr></table></figure><ul><li>addr2line</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set(CMAKE_BUILD_TYPE Debug)</span><br><span class="line">addr2line -e libxxx.so 0x#####(地址)</span><br><span class="line">addr2line_20 -e libxxx.so 0x#####(地址)</span><br></pre></td></tr></table></figure><ul><li><p>ndk-stack</p><blockquote><p>Usage: ndk-stack -sym PATH [-dump PATH]<br>Symbolizes the stack trace from an Android native crash.</p><p>  -sym PATH   sets the root directory for symbols<br>  -dump PATH  sets the file containing the crash dump (default stdin)</p><p>See <a href="https://developer.android.com/ndk/guides/ndk-stack.html">https://developer.android.com/ndk/guides/ndk-stack.html</a>.</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">adb logcat | ndk-stack -sym $&#123;so文件所在文件夹&#125; &gt; ~/Desktop/crash.log</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio常用快捷键</title>
      <link href="/2023/03/31/AndroidStudio%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2023/03/31/AndroidStudio%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<ul><li><input disabled="" type="checkbox"> ⌥ +鼠标移动 （选择所有行）</li><li><input disabled="" type="checkbox"> ⌥ +⇧+ 鼠标移动（选择指定行）</li><li><input disabled="" type="checkbox"> ⌘  +⌥ +Q 切换预览视图or编辑模式 （利于阅读源码注释文档）</li><li><input disabled="" type="checkbox"> ⌥ + ⌘ + T  surround with 快捷键</li></ul>]]></content>
      
      
      <categories>
          
          <category> 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> as </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xcode常用快捷键</title>
      <link href="/2023/03/31/xcode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2023/03/31/xcode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<ul><li>快速搜索文件：command⌘+shift⇧+o (open)</li><li>快速定位文件：command⌘+shift⇧+j  （navigate）</li><li>打开控制台：command⌘+t</li><li>后退：control⌃+command⌘+←</li><li>前进：control⌃+command⌘+→</li><li>快速删除当前行：option⌥+d</li><li>参数提示：option⌥+esc</li></ul>]]></content>
      
      
      <categories>
          
          <category> 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora-快捷键</title>
      <link href="/2022/04/27/typora-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/04/27/typora-%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>功能</th><th>源代码</th><th>快捷键</th></tr></thead><tbody><tr><td>标题</td><td><code># 文字</code></td><td><code>⌘ 数字</code></td></tr><tr><td><strong>加粗</strong></td><td><code>**文字**</code></td><td><code>⌘B</code></td></tr><tr><td><em>斜体</em></td><td><code>*文字*</code></td><td><code>⌘I</code></td></tr><tr><td><u>下划线</u></td><td><code>&lt;u&gt;文字&lt;/u&gt;</code></td><td><code>⌘U</code></td></tr><tr><td><a href="https://www.baidu.com/">超链接</a></td><td><code>[文本](url)</code></td><td><code>⌘K</code></td></tr><tr><td>有序列表</td><td><code>1.   </code></td><td><code>⌥⌘O</code></td></tr><tr><td>无序列表</td><td><code>* </code></td><td><code>⌥⌘U</code></td></tr><tr><td>代码块</td><td><code> ```  代码块 ``` </code></td><td><code>⌥⌘C</code></td></tr><tr><td><code>代码行</code></td><td><code>``</code></td><td><code> ⌃</code> &#96;</td></tr><tr><td>引用</td><td>&gt;</td><td><code>⌥⌘Q</code></td></tr><tr><td>公式块</td><td><code>$$ 公式 $$</code></td><td><code>⌥⌘B</code></td></tr><tr><td>插入图片</td><td><code> ![](图片地址)</code></td><td><code>⌃⌘I</code></td></tr><tr><td>注释</td><td><code>&lt;!--注释内容--&gt;</code></td><td><code>⌃-</code></td></tr><tr><td>列表缩进-增加缩进</td><td></td><td><code>⌘【</code></td></tr><tr><td>列表缩进-减少缩进</td><td></td><td><code>⌘】</code></td></tr><tr><td>表格</td><td></td><td><code>⌥⌘T</code></td></tr><tr><td>切换源码模式</td><td></td><td><code>⌘L</code></td></tr></tbody></table><span id="more"></span><h4 id="typora-查看快捷键入口"><a href="#typora-查看快捷键入口" class="headerlink" title="typora 查看快捷键入口"></a>typora 查看快捷键入口</h4><ul><li>段落</li><li>格式</li></ul>]]></content>
      
      
      <categories>
          
          <category> 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特殊字符实体</title>
      <link href="/2022/04/26/%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E5%AE%9E%E4%BD%93/"/>
      <url>/2022/04/26/%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E5%AE%9E%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<p>常见的特殊字符实体</p><span id="more"></span><table><thead><tr><th>显示结果</th><th>描述</th><th>实体名称</th><th>实体编号</th></tr></thead><tbody><tr><td></td><td>空格</td><td>&amp;nbsp;</td><td>&amp;#160;</td></tr><tr><td>&lt;</td><td>小于号</td><td>&lt;</td><td>&amp;#60;</td></tr><tr><td>&gt;</td><td>大于号</td><td>&gt;</td><td>&amp;#62;</td></tr><tr><td>&amp;</td><td>和号</td><td>&amp;</td><td>&amp;#38;</td></tr><tr><td>“</td><td>引号</td><td>&quot;</td><td>&amp;#34;</td></tr><tr><td>‘</td><td>撇号</td><td>&amp;apos; (IE 不支持)</td><td>&#39;</td></tr><tr><td>￠</td><td>分</td><td>&amp;cent;</td><td>&amp;#162;</td></tr><tr><td>£</td><td>镑</td><td>&amp;pound;</td><td>&amp;#163;</td></tr><tr><td>¥</td><td>人民币&#x2F;日元</td><td>&amp;yen;</td><td>&amp;#165;</td></tr><tr><td>€</td><td>欧元</td><td>&amp;euro;</td><td>&amp;#8364;</td></tr><tr><td>§</td><td>小节</td><td>&amp;sect;</td><td>&amp;#167;</td></tr><tr><td>©</td><td>版权</td><td>&amp;copy;</td><td>&amp;#169;</td></tr><tr><td>®</td><td>注册商标</td><td>&amp;reg;</td><td>&amp;#174;</td></tr><tr><td>™</td><td>商标</td><td>&amp;trade;</td><td>&amp;#8482;</td></tr><tr><td>×</td><td>乘号</td><td>&amp;times;</td><td>&amp;#215;</td></tr><tr><td>÷</td><td>除号</td><td>&amp;divide;</td><td>&amp;#247;</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android https 抓包</title>
      <link href="/2022/04/26/https%E6%8A%93%E5%8C%85/"/>
      <url>/2022/04/26/https%E6%8A%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h3 id="网络安全配置"><a href="#网络安全配置" class="headerlink" title="网络安全配置"></a>网络安全配置</h3><p>android 系统高于 7.0 ,配置网络安全策略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:networkSecurityConfig=&quot;@xml/network_security_config&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;network-security-config&gt;</span><br><span class="line">    &lt;base-config cleartextTrafficPermitted=&quot;true&quot;&gt;</span><br><span class="line">        &lt;trust-anchors&gt;</span><br><span class="line">            &lt;certificates src=&quot;system&quot; overridePins=&quot;true&quot; /&gt;</span><br><span class="line">            &lt;certificates src=&quot;user&quot; overridePins=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/trust-anchors&gt;</span><br><span class="line">    &lt;/base-config&gt;</span><br><span class="line">&lt;/network-security-config&gt;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="手机下载安装证书"><a href="#手机下载安装证书" class="headerlink" title="手机下载安装证书"></a>手机下载安装证书</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Charles:</span><br><span class="line"></span><br><span class="line">安卓手机类型众多，所以有些不太一样，</span><br><span class="line"></span><br><span class="line">方法一：</span><br><span class="line"></span><br><span class="line">1、打开Charles，选择help→SSL Proxying→Install Charles Root Certificate on a Mobile Device or Remote Browser</span><br><span class="line"></span><br><span class="line">2、手机连接电脑代理，打开浏览器，输入网址：chls.pro/ssl</span><br><span class="line"></span><br><span class="line">3、手机弹出提示：安装配置描述文件。您要允许吗？忽略|允许，选择允许，即可</span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line"></span><br><span class="line">1、打开Charles，选择help→SSL Proxying→Save Charles Certificate，将证书导入到手机中</span><br><span class="line"></span><br><span class="line">2、导入后直接点击安装证书即可</span><br><span class="line"></span><br><span class="line">方法三：</span><br><span class="line"></span><br><span class="line">1、打开Charles，选择help→SSL Proxying→Save Charles Certificate，将证书导入到手机中</span><br><span class="line"></span><br><span class="line">2、导入后直接点击安装证书，提示无法打开</span><br><span class="line"></span><br><span class="line">3、进入手机设置 → 更多设置 → 系统安全 → 从存储设备安装 → 选择charles.pem，点击高级，安装证书即可</span><br><span class="line"></span><br><span class="line">常见手机：小米手机，vivo,华为手机，需要设置手机锁屏密码</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有的手机 .pem 格式的证书没法直接点击安装，需要修改后缀为.crt 格式，才能点击安装</span><br></pre></td></tr></table></figure><h3 id="开启代理"><a href="#开启代理" class="headerlink" title="开启代理"></a>开启代理</h3><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2021/png/3756563/1618564185975-da945211-f8fe-4f36-82e3-c4fe9e63239d.png" alt="img"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="踩坑：chls-证书和电脑是绑定的关系"><a href="#踩坑：chls-证书和电脑是绑定的关系" class="headerlink" title="踩坑：chls 证书和电脑是绑定的关系"></a>踩坑：chls 证书和电脑是绑定的关系</h2><p>连接每台新电脑都需要安装新的 chls 证书</p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> Charles </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 笔记</title>
      <link href="/2022/04/26/git-%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/04/26/git-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Git-官网"><a href="#Git-官网" class="headerlink" title="Git 官网"></a><a href="https://git-scm.com/">Git 官网</a></h2><p>命令文档地址：<a href="https://git-scm.com/docs">https://git-scm.com/docs</a></p><h2 id="检查本地-git-环境"><a href="#检查本地-git-环境" class="headerlink" title="检查本地 git 环境"></a>检查本地 git 环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h2 id="主要命令"><a href="#主要命令" class="headerlink" title="主要命令"></a><a href="https://git-scm.com/">主要命令</a></h2><h2 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><span id="more"></span><p>在 Git 命令中，<code>branch</code> 和 <code>refspec</code> 是两个不同的概念，它们的语法也不同。</p><h3 id="Branch-语法"><a href="#Branch-语法" class="headerlink" title="Branch 语法"></a>Branch 语法</h3><p><code>branch</code> 是指本地或远程的分支名。在 Git 命令中，您通常只需要提供分支名即可，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1# 切换到一个已存在的本地分支</span><br><span class="line">2git checkout branch-name</span><br><span class="line">3</span><br><span class="line">4# 创建并切换到一个新的本地分支</span><br><span class="line">5git checkout -b new-branch-name</span><br><span class="line">6</span><br><span class="line">7# 删除一个本地分支</span><br><span class="line">8git branch -d branch-name</span><br><span class="line">9</span><br><span class="line">10# 拉取远程分支并在本地创建一个跟踪分支</span><br><span class="line">11git checkout --track origin/remote-branch-name</span><br></pre></td></tr></table></figure><p>在这些命令中，<code>branch-name</code> 和 <code>new-branch-name</code> 是本地分支名，而 <code>origin/remote-branch-name</code> 是远程分支名，其中 <code>origin</code> 是远程仓库的默认名称。</p><h3 id="Refspec-语法"><a href="#Refspec-语法" class="headerlink" title="Refspec 语法"></a>Refspec 语法</h3><p><code>refspec</code> 在 <code>git fetch</code> 和 <code>git push</code> 命令中定义了源分支和目标分支之间的映射关系，在其最基本的形式中，<code>refspec</code> 的语法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source:destination</span><br></pre></td></tr></table></figure><p>它可能具有以下形式：</p><ul><li><code>+source:destination</code> - 强制推送（忽略非快进更新）</li><li><code>source</code> - 指定只推送源分支到远程同名分支</li><li><code>:destination</code> - 删除远程的目标分支（使用 <code>git push</code>）</li></ul><p>在 <code>git push</code> 的上下文中，<code>source</code> 通常是本地分支名，而 <code>destination</code> 是远端分支名。而在 <code>git fetch</code> 的上下文中，则是相反：<code>source</code> 是远端分支名，而 <code>destination</code> 是本地分支名。</p><p>例如，如果您想要推送本地的 <code>feature</code> 分支到远程仓库的 <code>feature</code> 分支，您会使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin feature:feature</span><br></pre></td></tr></table></figure><p>如果您想要强制推送这个分支（即使这会导致数据丢失），则会使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin +feature:feature</span><br></pre></td></tr></table></figure><p>如果您想要删除远程仓库的 <code>feature</code> 分支，则会使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :feature</span><br></pre></td></tr></table></figure><p>而如果您想要从远程仓库获取 <code>feature</code> 分支并将其映射到本地的 <code>my-feature</code> 分支上，您会使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin feature:my-feature</span><br></pre></td></tr></table></figure><p>在这里，<code>origin</code> 是远程仓库的名称。对于 <code>git fetch</code> 和 <code>git push</code>，您也可以省略 <code>destination</code> 部分，让 Git 使用默认的行为（如将分支推送到具有相同名称的远程分支）。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><code>branch</code> 通常只是分支的名称，无需特殊语法。</li><li><code>refspec</code> 是一个更复杂的概念，用于在 <code>git fetch</code> 和 <code>git push</code> 操作中定义本地分支和远程分支之间的映射关系，有自己特定的语法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac terminal 快捷键</title>
      <link href="/2022/04/25/mac-terminal-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/04/25/mac-terminal-%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>常用快捷键</p><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>⌃ -&gt;</td><td>光标向前移动一个单词</td></tr><tr><td>⌃  &lt;-</td><td>光标向后移动一个单词</td></tr><tr><td>⌃ A</td><td>光标移动到行尾</td></tr><tr><td>⌃ E</td><td>光标移动到行首</td></tr><tr><td>⌃ U</td><td>清除当前行</td></tr><tr><td>⌃ D</td><td>退出当前shell</td></tr><tr><td>⌃ C</td><td>中断信号</td></tr><tr><td>⌘ K</td><td>清屏</td></tr></tbody></table><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 博客搭建教程</title>
      <link href="/2022/04/25/hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
      <url>/2022/04/25/hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>本文详细介绍了从开始搭建博客到自定义高级功能所经历的整个过程。</p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul><li>node</li><li>git</li></ul><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><ul><li>安装 hexo</li><li>通过 github page 免费建站<ul><li>创建 repository </li><li>Settings 配置 page 站点</li><li>个人 settings 配置 ssh</li></ul></li></ul><span id="more"></span><h2 id="基础功能"><a href="#基础功能" class="headerlink" title="基础功能"></a>基础功能</h2><ul><li><p>read more ，首页仅显示文章摘要</p></li><li><p>使用官方推荐 <code>&lt;!-- more--&gt;</code>标签截断 .md 文档</p></li><li><p>使用 typort + upic 编辑文档、建立图床</p><ul><li>也可使用 typora + picgo 实现图床</li></ul></li></ul><h2 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h2><ul><li>自定义 landscape 主题</li><li>valine + leancloud 实现无后端评论系统</li><li>使用阿里云域名实现域名转发</li><li>rss 订阅</li><li>实现打赏功能</li><li>实现国内分享</li></ul><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><ul><li>需要设置 github repository default 分支为 gh-pages<ul><li>master 分支用于管理 hexo project </li><li>git-pages 用于实现网站托管</li></ul></li><li>通过 ssh 访问 github , username + password 登录方式无法使用<ul><li>也可通过 acesstoken 方式实现访问</li></ul></li><li>通过 CNAME 实现域名转发，无须备案<ul><li>阿里云 url 转发需要备案</li></ul></li><li>域名转发导致 css 样式失效<ul><li>theme 主题，url 设置错误</li></ul></li><li>CNAME 如何避免被自动删除<ul><li>放在 source 文件夹下，避免被自动删除。</li></ul></li></ul><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android签名详解</title>
      <link href="/2022/04/24/%E7%AD%BE%E5%90%8D%E6%96%B9%E6%A1%88/"/>
      <url>/2022/04/24/%E7%AD%BE%E5%90%8D%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p><strong>Android 支持以下三种应用签名方案</strong></p><ul><li>v1 方案：基于 JAR 签名。</li><li>v2 方案：<a href="https://source.android.com/security/apksigning/v2?hl=zh-cn">APK 签名方案 v2</a>（在 Android 7.0 中引入），Android 11 强制要求开启 v2 签名。</li><li>v3 方案：<a href="https://source.android.com/security/apksigning/v3?hl=zh-cn">APK 签名方案 v3</a>（在 Android 9.0 中引入）。</li></ul><p><strong>APK 签名验证过程</strong></p><span id="more"></span><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2021/png/3756563/1637240247957-902343f6-793b-467d-88da-39cb6b79b65b.png" alt="img"></p><h2 id="v1-签名机制"><a href="#v1-签名机制" class="headerlink" title="v1 签名机制"></a>v1 签名机制</h2><p><strong>v1 签名过程</strong></p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2021/png/3756563/1637241119998-710e5f21-ceb5-427d-9737-732fc517d842.png" alt="img"></p><p>android apk 本质上是一个 zip 文件，解压缩 apk 之后，在 META-INF 文件下下面有个 3 个文件。这 3 个文件在签名时创建，在验证时使用。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2021/png/3756563/1637241932281-ff71b895-3437-4847-b94e-e1343a28a22b.png" alt="img"></p><ol><li>MANIFEST.MF 文件</li></ol><p>文件内容：前面几行记录的是基础信息，后面的 key-value 对，记录 apk 中每一个文件对应的摘要信息，防止某个文件被篡改。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2021/png/3756563/1637241496036-ae9f77f3-de63-498b-84de-c73bd76dbbe5.png" alt="img"></p><ol><li>CERT.SF 文件</li></ol><p>文件的内容：<strong>SHA-256-Digest-Manifest</strong> 记录的是 <strong>MANIFEST.MF</strong> 的信息摘要，以及 <strong>MANIFEST.MF</strong> 中，每个数据块的摘要。防止 <strong>MANIFEST.MF</strong> 被篡改。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2021/png/3756563/1637241675582-ba01a2ff-a958-4c1b-a1a8-8ffb83b7e12d.png" alt="img"></p><ol><li>CERT.RSA 文件</li></ol><p>文件内容：存储了签名和公钥证书以及 SF 文件的摘要信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs7 -inform DER -in CERT.RSA -noout -print_certs -text</span><br></pre></td></tr></table></figure><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2021/png/3756563/1637289563483-c9d98b18-0e99-4a10-94b8-67a7a89aca25.png" alt="img"></p><p><strong>v1 签名存在的问题</strong></p><ol><li><strong>校验速度慢：</strong>需要对 apk 中的每个文件都计算摘要并验证，如果文件很多，校验时间会很长。</li><li><strong>完整性不够：</strong>V1 签名只会校验 Zip 文件中的部分文件，例如 <strong>META-INFO</strong> 文件夹就不会参与校验。</li></ol><h2 id="V2-签名机制"><a href="#V2-签名机制" class="headerlink" title="V2 签名机制"></a>V2 签名机制</h2><p>了解 zip 压缩包格式和 APK 签名之后的数据格式</p><p>为了保护 APK 内容，APK 包含以下 4 个部分：</p><ul><li>ZIP 条目的内容（从偏移量 0 处开始一直到“APK 签名分块”的起始位置）</li><li>APK 签名分块</li><li>ZIP 中央目录</li><li>ZIP 中央目录结尾</li></ul><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2021/png/3756563/1637291796732-139b2e40-e3ee-4fcc-a390-1f522c09d08c.png" alt="img"></p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2021/png/3756563/1637291614626-4631c226-7cf7-462c-83f2-231beb6cd268.png" alt="img"></p><p><strong>zip 压缩包的解析过程</strong></p><ol><li>先从文件尾部查找 0x06054b50，确定 End Of Central Directory Record 区域的起始位置；</li><li>解析 EoCDR 区域，并获得中央目录的起始位置；</li><li>根据起始位置，逐个解析文件。</li></ol><p><strong>V2 签名数据块的格式</strong></p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2021/png/3756563/1637292066946-cb513fd0-a6d9-4877-97a4-a11f6cc69c5a.png" alt="img"></p><p>该分块包含多个“ID-值”对，所采用的封装方式有助于更轻松地在 APK 中找到该分块。APK 的 v2 签名会存储为一个“ID-值”对，其中 ID 为 0x7109871a 保存 apk 的签名信息。</p><p>签名块的末尾是一个魔数，也就是‘APK Sig Block 42’的 ASCII 码。</p><p><strong>签名信息的具体结构</strong></p><p>“APK 签名方案 v2 分块”存储在“APK 签名分块”内，ID 为 0x7109871a。</p><p>“APK 签名方案 v2 分块”的格式如下（所有数字值均采用小端字节序，所有带长度前缀的字段均使用 uint32 值表示长度）：</p><ul><li><p>带长度前缀的 signer（带长度前缀）序列：</p></li><li><ul><li>带长度前缀的 signed data：</li></ul></li><li><ul><li><ul><li>带长度前缀的 digests（带长度前缀）序列：</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>signature algorithm ID (uint32)</li><li>（带长度前缀）digest - 请参阅<a href="https://source.android.google.cn/security/apksigning/v2?hl=zh-cn#integrity-protected-contents">受完整性保护的内容</a></li></ul></li></ul></li></ul></li><li><ul><li><ul><li>带长度前缀的 X.509 certificates 序列：</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>带长度前缀的 X.509 certificate（ASN.1 DER 格式）</li></ul></li></ul></li></ul></li><li><ul><li><ul><li>带长度前缀的 additional attributes（带长度前缀）序列：</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>ID (uint32)</li><li>value（可变长度：附加属性的长度 - 4 个字节）</li></ul></li></ul></li></ul></li><li><ul><li>带长度前缀的 signatures（带长度前缀）序列：</li></ul></li><li><ul><li><ul><li>signature algorithm ID (uint32)</li><li>signed data 上带长度前缀的 signature</li></ul></li></ul></li><li><ul><li>带长度前缀的 public key（SubjectPublicKeyInfo，ASN.1 DER 形式）</li></ul></li></ul><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2021/png/3756563/1637292251949-a290643a-011e-4cc8-a7d6-69b58760a5de.png" alt="img"></p><p><strong>V2 摘要计算方式</strong></p><p>第 1、3 和 4 部分的摘要采用以下计算方式，类似于两级 <a href="https://en.wikipedia.org/wiki/Merkle_tree">Merkle 树</a>。每个部分都会被拆分成多个大小为 1MB（220 个字节）的连续块。每个部分的最后一个块可能会短一些。每个块的摘要均通过字节 0xa5 的串联、块的长度（采用小端字节序的 uint32 值，以字节数计）和块的内容进行计算。顶级摘要通过字节 0x5a 的串联、块数（采用小端字节序的 uint32 值）以及块的摘要的连接（按照块在 APK 中显示的顺序）进行计算。摘要以分块方式计算，以便通过并行处理来加快计算速度。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2021/png/3756563/1637303311648-f1c266b7-fba4-4349-b4d6-7c1c35111f21.png" alt="img"></p><p><strong>防回滚保护</strong></p><p>攻击者可能会试图在支持对带 v2 签名的 APK 进行验证的 Android 平台上将带 v2 签名的 APK 作为带 v1 签名的 APK 进行验证。为了防范此类攻击，带 v2 签名的 APK 如果还带 v1 签名，其 META-INF&#x2F;<em>.SF 文件的主要部分中必须包含 X-Android-APK-Signed 属性。该属性的值是一组以英文逗号分隔的 APK 签名方案 ID（v2 方案的 ID 为 2）。在验证 v1 签名时，对于此组中验证程序首选的 APK 签名方案（例如，v2 方案），如果 APK 没有相应的签名，APK 验证程序必须要拒绝这些 APK。此项保护依赖于内容 META-INF&#x2F;</em>.SF 文件受 v1 签名保护这一事实。请参阅 JAR 已签名的 APK 的验证部分。</p><p>攻击者可能会试图从“APK 签名方案 v2 分块”中删除安全系数较高的签名。为了防范此类攻击，对 APK 进行签名时使用的签名算法 ID 的列表会存储在通过各个签名保护的 signed data 分块中。</p><p><strong>签名验证</strong></p><p>对“APK 签名方案 v2 分块”中的每个 signer 执行以下操作：</p><ol><li>从 signatures 中选择安全系数最高的受支持 signature algorithm ID。安全系数排序取决于各个实现&#x2F;平台版本。</li><li>使用 public key 并对照 signed data 验证 signatures 中对应的 signature。（现在可以安全地解析 signed data 了。）</li><li>验证 digests 和 signatures 中的签名算法 ID 列表（有序列表）是否相同。（这是为了防止删除&#x2F;添加签名。）</li><li>使用签名算法所用的同一种摘要算法<a href="https://source.android.google.cn/security/apksigning/v2?hl=zh-cn#integrity-protected-contents">计算 APK 内容的摘要</a>。</li><li>验证计算出的摘要是否与 digests 中对应的 digest 一致。</li><li>验证 certificates 中第一个 certificate 的 SubjectPublicKeyInfo 是否与 public key 相同。</li></ol><h2 id="v3-签名机制"><a href="#v3-签名机制" class="headerlink" title="v3 签名机制"></a>v3 签名机制</h2><p>为了保持与 v1 APK 格式的向后兼容性，v2 和 v3 APK 签名存储在“APK 签名分块”内紧邻 ZIP Central Directory 前面。</p><p>v3 APK 签名分块的格式与 v2 相同。APK 的 v3 签名会存储为一个“ID-值”对，其中 ID 为 0xf05368c0。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2021/png/3756563/1637311968516-9c9164d9-03ed-48bd-a28c-f88e4a421df0.png" alt="img"></p><p>v3 版本签名验证证书步骤：</p><ul><li>利用 PublicKey 解密 Signature，得到 SignerData 的 hash 明文</li><li>计算 SignerData 的 hash 值</li><li>两个值进行比较，如果相同则认为 APK 没有被修改过，解析出 SignerData 中的证书。否则安装失败</li><li>逐个解析出 level 块证书并验证，并保存为这个应用的历史证书</li><li>如果是第一次安装，直接将证书与历史证书一并保存在应用信息中</li><li>如果是更新安装，验证之前的证书与历史证书，是否与本次解析的证书或者历史证书中存在相同的证书，其中任意一个证书符合即可安装</li></ul><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2021/png/3756563/1637312149010-e182b936-62dd-468d-bc15-24cc1afd8fdf.png" alt="img"></p><p>每一个 level 块的结构</p><p>proof-of-rotation 存储在“APK 签名方案 v3 分块”内，ID 为 0x3ba06f8c。其格式为：</p><p>带长度前缀的 levels（带长度前缀）序列：</p><ul><li><p>带长度前缀的 signed data（由上一个证书签名 - 如果存在上一个证书）</p></li><li><ul><li>带长度前缀的 X.509 certificate（ASN.1 DER 形式）</li></ul></li><li><ul><li><ul><li>signature algorithm ID (uint32) - 上一级证书使用的算法</li><li>flags (uint32) - 这些标记用于指示此证书是否应该在 self-trusted-old-certs 结构中，以及针对哪些操作。</li></ul></li></ul></li><li><ul><li>signature algorithm ID (uint32) - 必须与下一级签名数据部分中的相应 ID 一致。</li><li>上述 signed data 上带长度前缀的 signature</li></ul></li></ul><p>新特性场景举例</p><p>其实就是当开发者需要更换证书时，即可直接用新证书新的私钥进行签名。不过为了让老应用相信新的证书，则需要用老证书来保证。举个例子，有两个 level 块：level 1 与 level 2：</p><ul><li>level 1 放置老证书的信息</li><li>level 2 中放置新证书的信息以及这段数据的签名</li><li>level 2 中的签名是由老私钥进行签名的，则需要用老证书的公钥来验证</li><li>校验原来的证书与 level 1 相同，则相信本次更新的 level 2 的证书，即签名 APK 的证书</li></ul><p>完成安装并记录新证书信息</p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 签名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级adb调试命令</title>
      <link href="/2022/04/24/%E9%AB%98%E7%BA%A7adb%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/04/24/%E9%AB%98%E7%BA%A7adb%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="用某个用户的权限来执行"><a href="#用某个用户的权限来执行" class="headerlink" title="用某个用户的权限来执行"></a>用某个用户的权限来执行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run-as $package_name</span><br></pre></td></tr></table></figure><p>例如：查看sp文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">run-as $package_name</span><br><span class="line">cd shared_prefs</span><br><span class="line">cat $file_name</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap /sdcard/$file_name</span><br><span class="line">adb shell pull /sdcard/$file_name ~/desktop/$file_name</span><br></pre></td></tr></table></figure><h2 id="录屏"><a href="#录屏" class="headerlink" title="录屏"></a>录屏</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell record /sdcard/$video_file_name</span><br></pre></td></tr></table></figure><h2 id="wifi-调试"><a href="#wifi-调试" class="headerlink" title="wifi 调试"></a>wifi 调试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb tcpip 5555</span><br><span class="line">adb connect $ip_address:5555</span><br></pre></td></tr></table></figure><h2 id="查看指定包名的进程-id"><a href="#查看指定包名的进程-id" class="headerlink" title="查看指定包名的进程 id"></a>查看指定包名的进程 id</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell ps | grep &#x27;$package_name&#x27;</span><br></pre></td></tr></table></figure><h2 id="获取-apk-签名"><a href="#获取-apk-签名" class="headerlink" title="获取 apk 签名"></a>获取 apk 签名</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1. 将apk解压；</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2. 找到META-INF 下的.RSA文件；</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3. 进入shelll环境，进入.RSA文件文件所在路径，执行命令：</span></span><br><span class="line">keytool -printcert -file XXX.RSA即可查看签名信息。</span><br></pre></td></tr></table></figure><h2 id="获取-keystore-签名"><a href="#获取-keystore-签名" class="headerlink" title="获取 keystore 签名"></a>获取 keystore 签名</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">keystore在jdk安装目录bin文件夹下面</span></span><br><span class="line">keytool -list -v -keystore $keystore_file</span><br></pre></td></tr></table></figure><h2 id="获取手机分辨率"><a href="#获取手机分辨率" class="headerlink" title="获取手机分辨率"></a>获取手机分辨率</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm size</span><br></pre></td></tr></table></figure><h2 id="查看屏幕密度"><a href="#查看屏幕密度" class="headerlink" title="查看屏幕密度"></a>查看屏幕密度</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm density</span><br></pre></td></tr></table></figure><h2 id="获取所有已安装-apk"><a href="#获取所有已安装-apk" class="headerlink" title="获取所有已安装 apk"></a>获取所有已安装 apk</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list package</span><br></pre></td></tr></table></figure><h2 id="获取已安装-apk-文件路径"><a href="#获取已安装-apk-文件路径" class="headerlink" title="获取已安装 apk 文件路径"></a>获取已安装 apk 文件路径</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm path 包名</span><br><span class="line">adb pull xxx.apk ~/desktop/$apk_file_name  #转储apk</span><br></pre></td></tr></table></figure><h2 id="清除应用数据"><a href="#清除应用数据" class="headerlink" title="清除应用数据"></a>清除应用数据</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm clear $package_name</span><br></pre></td></tr></table></figure><h2 id="覆盖安装-apk"><a href="#覆盖安装-apk" class="headerlink" title="覆盖安装 apk"></a>覆盖安装 apk</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb install xxx.pk</span><br><span class="line">adb install -r xxx.apk  覆盖安装</span><br></pre></td></tr></table></figure><h2 id="卸载-apk"><a href="#卸载-apk" class="headerlink" title="卸载 apk"></a>卸载 apk</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb uninstall $package_name</span><br><span class="line">adb uninsatll -k $package_name  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保留数据卸载</span> </span><br><span class="line">adb shell pm uninstall -k  $package_name </span><br></pre></td></tr></table></figure><h2 id="AAPT-查看-apk-信息"><a href="#AAPT-查看-apk-信息" class="headerlink" title="AAPT 查看 apk 信息"></a>AAPT 查看 apk 信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">列出压缩文件(zip,jar,apk)中的目录内容</span></span><br><span class="line"> aapt l[ist] [-v] [-a] xxx.&#123;zip,jar,apk&#125;</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">转储apk文件信息</span></span><br><span class="line"> aapt dump badging $file_name.apk</span><br></pre></td></tr></table></figure><h2 id="抓取数据库"><a href="#抓取数据库" class="headerlink" title="抓取数据库"></a>抓取数据库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell mkdir /sdcard/databases</span><br><span class="line">adb shell run-as 包名</span><br><span class="line">cp databases /sdcard/databases</span><br><span class="line">exit</span><br><span class="line">adb pull /sdcard/databases  ~/desktop</span><br></pre></td></tr></table></figure><h2 id="已连接设备"><a href="#已连接设备" class="headerlink" title="已连接设备"></a>已连接设备</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devcies</span><br></pre></td></tr></table></figure><h2 id="重启手机"><a href="#重启手机" class="headerlink" title="重启手机"></a>重启手机</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -s xxx（手机序列号） reboot</span><br></pre></td></tr></table></figure><h2 id="备份与还原"><a href="#备份与还原" class="headerlink" title="备份与还原"></a>备份与还原</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb backup -f xxx.ab -noapk xxxx包名</span><br><span class="line">adb restore xxx.ab</span><br><span class="line"></span><br><span class="line">备份文件解析工具：safemobile 手机芯片取证系统</span><br></pre></td></tr></table></figure><h2 id="抓取系统崩溃和ANR日志"><a href="#抓取系统崩溃和ANR日志" class="headerlink" title="抓取系统崩溃和ANR日志"></a>抓取系统崩溃和ANR日志</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输出系统崩溃日志</span><br><span class="line">系统应用：</span><br><span class="line">adb shell dumpsys dropbox system_app_crash --print &gt; crash.txt</span><br><span class="line">adb shell dumpsys dropbox system_app_anr --print &gt; anr.txt</span><br><span class="line">三方应用：</span><br><span class="line">adb shell dumpsys dropbox data_app_crash --print &gt; crash.txt</span><br><span class="line">adb shell dumpsys dropbox data_app_anr --print &gt; anr.txt</span><br></pre></td></tr></table></figure><h2 id="查看内存信息"><a href="#查看内存信息" class="headerlink" title="查看内存信息"></a>查看内存信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[查看系统进程内存信息分布情况]</span></span><br><span class="line">adb shell dumpsys meminfo $package_name</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[查看当前应用内存情况]</span></span><br><span class="line">adb shell dumpsys meminfo $package_name</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[查看安装包信息]</span></span><br><span class="line">adb shell dumpsys package $package_name</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[查看当前应用安装包信息]</span></span><br><span class="line">adb shell dumpsys package $package_name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> adb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>铃铛</title>
      <link href="/2022/04/23/%E6%88%91%E7%9A%84%E9%93%83%E9%93%9B/"/>
      <url>/2022/04/23/%E6%88%91%E7%9A%84%E9%93%83%E9%93%9B/</url>
      
        <content type="html"><![CDATA[<p>小铃铛每天出门都很怂，出门的时候就不敢下来。</p><p>回到家的时候，就是它的主场，每天白天不起，晚上床头蹦迪。</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/barryxc/pictures@main/uPic/IMG_3190.jpeg" alt="IMG_3190"></p>]]></content>
      
      
      <categories>
          
          <category> 宠物 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宠物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虎妞</title>
      <link href="/2022/04/23/%E6%88%91%E7%9A%84%E8%99%8E%E5%A6%9E/"/>
      <url>/2022/04/23/%E6%88%91%E7%9A%84%E8%99%8E%E5%A6%9E/</url>
      
        <content type="html"><![CDATA[<p>小铃铛的妈妈，经常带小铃铛干坏事。当然也教会了小铃铛很多生存技能</p><span id="more"></span><p><strong>她在看我的手</strong></p><p><img src="https://cdn.jsdelivr.net/gh/barryxc/pictures@main/uPic/IMG_3141.jpg" alt="IMG_3141"></p>]]></content>
      
      
      <categories>
          
          <category> 宠物 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宠物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>include_directories和target_include_directories</title>
      <link href="/2021/12/26/include-directories/"/>
      <url>/2021/12/26/include-directories/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cmake.org/cmake/help/latest/guide/tutorial/index.html">cmake</a></p><p><code>include_directories</code>是CMake中的一个命令，其作用是向项目中添加包含目录（<strong>即头文件搜索路径</strong>）。当编译器编译项目中的源代码文件时，它会在这些指定的目录中查找<code>#include</code>指令引用的头文件。</p><p>使用 <code>include_directories</code> 命令可以使编译器搜索项目内外的附加目录，从而找到所需的头文件。这对于跨目录的项目结构或者使用第三方库非常有用。</p><p>下面是一个<code>include_directories</code>的使用示例：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(includes /path/to/external/includes)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>includes</code>是项目内的一个目录，指的是相对于当前<code>CMakeLists.txt</code>文件所在目录的相对路径。<code>/path/to/external/includes</code>是系统中某个外部库头文件的绝对路径。这条命令将这两个目录添加到编译器的头文件搜索路径中。</p><p>一旦使用了<code>include_directories</code>，它会影响所有随后定义的目标（例如使用<code>add_executable</code>或者<code>add_library</code>定义的可执行文件或库）。如果你希望对特定目标设置包含目录而不影响其他的，应使用<code>target_include_directories</code>命令，它提供了更细粒度的控制。</p><p>例如：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(MyExecutable main.cpp)</span><br><span class="line"><span class="keyword">target_include_directories</span>(MyExecutable PRIVATE includes)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>MyExecutable</code>仅会包含<code>includes</code>目录作为私有依赖，这意味着这个包含目录仅对<code>MyExecutable</code>可见，不会影响到其他目标。</p><p>通常建议使用<code>target_include_directories</code>而非<code>include_directories</code>，因为前者更符合现代CMake的目标属性设置方式，允许更好的封装性和可重用性</p>]]></content>
      
      
      <categories>
          
          <category> cmake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>add_subdirectory</title>
      <link href="/2021/12/26/add-subdirectory/"/>
      <url>/2021/12/26/add-subdirectory/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cmake.org/cmake/help/latest/guide/tutorial/index.html">cmake</a></p><p>在 Java 中，”submodule” 这个术语并不是官方的编程概念，而是通常用于描述较大项目中的组织结构，尤其是在使用 Maven 或 Gradle 这样的构建工具时。这些构建工具允许你创建多模块（multi-module）项目，其中每个模块可以有自己的构建生命周期和依赖管理。</p><p>如果将 CMake 中的 <code>add_subdirectory</code> 命令与 Java 多模块项目的概念进行比较，那么可以说它们在概念上是相似的。<code>add_subdirectory</code> 允许你将一个目录（可以认为是一个模块或子项目）添加到主项目的构建过程中。这个目录通常包含它自己的 <code>CMakeLists.txt</code> 文件，定义了如何构建该目录中的代码。</p><p>在 Java 的多模块项目中，每个模块也会有自己的构建配置文件（例如 Maven 的 <code>pom.xml</code>），定义了模块的构建过程和依赖。</p><p>例如，在 Maven 中，你的项目结构可能如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">project/</span><br><span class="line">│</span><br><span class="line">├── pom.xml                 # 父项目的 Maven POM 文件</span><br><span class="line">│</span><br><span class="line">├── submodule1/</span><br><span class="line">│   └── pom.xml             # 子模块的 Maven POM 文件</span><br><span class="line">│</span><br><span class="line">└── ...</span><br></pre></td></tr></table></figure><p>父项目的 <code>pom.xml</code> 文件会包含对所有子模块的引用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>submodule1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>submodule2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将 Maven 的多模块项目和 CMake 中的 <code>add_subdirectory</code> 命令进行类比，它们都有以下相似之处：</p><ul><li>都是将一个较大的项目组织为更小、更易管理的组件或模块。</li><li>每个模块或组件都有自己的构建配置和构建过程。</li><li>主项目配置文件包含对这些子模块或组件的引用，并且管理整个构建过程。</li></ul><p>总之，尽管 CMake 和 Java 构建工具（如 Maven 或 Gradle）在技术细节上不同，<code>add_subdirectory</code> 与 Java 多模块项目的概念在组织和管理大型代码基础方面确实有一定的相似性。</p>]]></content>
      
      
      <categories>
          
          <category> cmake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmake源集机制</title>
      <link href="/2021/12/26/cmake%E6%BA%90%E9%9B%86%E6%9C%BA%E5%88%B6/"/>
      <url>/2021/12/26/cmake%E6%BA%90%E9%9B%86%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cmake.org/cmake/help/latest/guide/tutorial/index.html">cmake</a></p><p>在 CMake 中，并没有一个默认机制来自动查找源码文件。CMake 需要你在 <code>CMakeLists.txt</code> 配置文件中显式地指定源码文件。这意味着 CMake 不会去猜测或自动探测你的源码文件所在；你必须明确告诉 CMake 需要编译哪些文件。</p><p>通常，你会在 <code>CMakeLists.txt</code> 文件中使用 <code>add_executable</code> 或者 <code>add_library</code> 命令来定义编译目标，并显式地列出构成该目标的所有源码文件。例如：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(MyExecutable main.cpp foo.cpp bar.cpp)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>MyExecutable</code> 是目标的名字，<code>main.cpp</code>、<code>foo.cpp</code> 和 <code>bar.cpp</code> 是明确指定的源码文件。</p><p>如果你有一组相对固定的源码文件，你可以简单地将它们全部列出。然而，对于较大的项目或者源码文件经常变动的情况，逐一列出所有文件可能会变得繁琐。为了简化这个过程，CMake 提供了一些命令来帮助你查找和指定源码文件，这些命令包括 <code>aux_source_directory</code> 和 <code>file(GLOB ...)</code>。虽然这些命令可以帮助收集源码文件，但它们通常不是最佳实践，因为它们无法跟踪文件系统中的变化（例如，当你添加或删除文件时，CMake 不会自动更新）。</p><p>例如，使用 <code>file(GLOB ...)</code> 可以根据模式匹配查找文件：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">file</span>(GLOB MY_SOURCES <span class="string">&quot;*.cpp&quot;</span>) <span class="comment"># 不推荐用于源文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(MyExecutable <span class="variable">$&#123;MY_SOURCES&#125;</span>)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>MY_SOURCES</code> 变量会包含当前目录下所有后缀为 <code>.cpp</code> 的源码文件。</p><p>总结来说，CMake 需要你在 <code>CMakeLists.txt</code> 中显式指定源码文件，它不会默认查找源码文件。你可以使用 <code>file(GLOB ...)</code> 或 <code>aux_source_directory</code> 这样的命令来收集源码文件，但最好的实践仍然是显式地列出所有源码文件，尤其是对于那些希望确保构建系统适应性和可维护性的项目来说。</p>]]></content>
      
      
      <categories>
          
          <category> cmake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>extern作用与用法</title>
      <link href="/2021/12/25/extern%E4%BD%9C%E7%94%A8%E4%B8%8E%E7%94%A8%E6%B3%95/"/>
      <url>/2021/12/25/extern%E4%BD%9C%E7%94%A8%E4%B8%8E%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在C++中，<code>extern</code>关键字用于指定变量或函数的定义在其他的文件中。这样可以在多个文件之间共享变量或函数。主要用途是用于提供对全局变量和函数的访问，尤其是在大型项目中多文件共用的场景。</p><p><code>extern</code>用法主要有以下几种场景：</p><ol><li><p><strong>声明全局变量而不定义它</strong>： <code>extern</code>用来在一个文件中声明一个全局变量，而不是定义它。真正的定义会在别的地方。这样做的目的是为了在多个文件中共享这个变量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file1.cpp</span></span><br><span class="line"><span class="type">int</span> myGlobal; <span class="comment">// 定义一个全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// file2.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> myGlobal; <span class="comment">// 声明相同的全局变量，告诉编译器其定义在其他地方</span></span><br></pre></td></tr></table></figure><p>以上代码中，<code>file1.cpp</code>定义了一个全局变量<code>myGlobal</code>，而<code>file2.cpp</code>使用<code>extern</code>来声明这个全局变量，以便可以在<code>file2.cpp</code>中访问<code>file1.cpp</code>中定义的<code>myGlobal</code>。</p></li><li><p><strong>声明函数</strong>： 一般情况下，函数在C++中默认是<code>extern</code>的，即使没有显式声明。但是你也可以显式地声明它，特别是在你想要强调函数可以在其他文件中被访问时。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file1.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doSomething</span><span class="params">()</span></span>; <span class="comment">// 默认extern</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// file2.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">doSomething</span><span class="params">()</span></span>; <span class="comment">// 显式声明</span></span><br></pre></td></tr></table></figure></li><li><p><strong>与<code>static</code>关键字的对比</strong>： <code>extern</code>和<code>static</code>在用于变量声明时有着对立的含义。<code>static</code>用于限制变量或函数的链接作用域到定义它的文件，而<code>extern</code>则表明变量或函数可以在多个文件间共享。</p></li><li><p><strong>使用<code>extern &quot;C&quot;</code>防止C++的名称修饰</strong>： 当你想要在C++代码中调用C语言编写的函数时，你需要防止C++编译器对这些函数名进行名称修饰（name mangling），因为C编译器不会这么做。<code>extern &quot;C&quot;</code>可以用来告诉C++编译器不要修饰这些特定的函数名。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;header_of_c_code.h&quot;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者用于单个函数声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">void</span> <span class="title">cFunction</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li></ol><p>在实际开发过程中，使用<code>extern</code>关键字可以帮助组织跨多个文件的代码，方便代码管理和模块化设计。但是，过度使用全局变量可能会引起程序设计上的问题，如数据封装不足、线程安全问题等，因此应当谨慎使用。</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特殊成员函数</title>
      <link href="/2021/12/22/%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/"/>
      <url>/2021/12/22/%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>在C++中，特殊成员函数是那些可能由编译器隐式声明和定义的类成员函数。它们是类的生命周期和对象管理的关键部分。以下是C++中的特殊成员函数：</p><ol><li><strong>默认构造函数 (Default Constructor)</strong>: 这是一个不接受任何参数，或者每个参数都有默认值的构造函数。如果你没有定义任何构造函数，编译器会为你提供一个默认的无参构造函数。</li><li><strong>拷贝构造函数 (Copy Constructor)</strong>: 它用于创建一个新对象作为另一个现有对象的副本。如果不定义，编译器会定义一个默认的拷贝构造函数，进行成员到成员的复制。</li><li><strong>拷贝赋值操作符 (Copy Assignment Operator)</strong>: 当通过赋值操作将一个对象的内容复制到另一个现有对象中时，会调用这个特殊成员函数。默认的拷贝赋值操作符也执行成员到成员的复制。</li><li><strong>移动构造函数 (Move Constructor)</strong>: 在C++11中引入，允许资源的转移而非复制。如果一个对象拥有资源，如动态内存，移动构造函数可以将资源从一个对象转移到另一个对象，通常是为了提高性能。</li><li><strong>移动赋值操作符 (Move Assignment Operator)</strong>: 类似于移动构造函数，它允许你通过移动而非复制一个对象的资源来给另一个对象赋值。这通常发生在具有右值引用参数的赋值操作中。</li><li><strong>析构函数 (Destructor)</strong>: 当对象生命周期结束时，例如对象离开作用域或被<code>delete</code>调用时，析构函数被调用来进行清理工作，比如释放资源等。</li></ol><span id="more"></span><p>每个特殊成员函数都有其自动生成（隐式声明）的条件。例如，如果你提供了自己的拷贝构造函数，编译器就不会自动生成默认构造函数。但你可以通过在类内使用<code>= default;</code>来向编译器显式请求生成这些函数的默认版本。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>() = <span class="keyword">default</span>; <span class="comment">// 显式默认构造函数</span></span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">const</span> MyClass&amp; other) = <span class="keyword">default</span>; <span class="comment">// 显式拷贝构造函数</span></span><br><span class="line">    <span class="built_in">MyClass</span>(MyClass&amp;&amp; other) = <span class="keyword">default</span>; <span class="comment">// 显式移动构造函数</span></span><br><span class="line">  </span><br><span class="line">    MyClass&amp; <span class="keyword">operator</span>=(<span class="type">const</span> MyClass&amp; other) = <span class="keyword">default</span>; <span class="comment">// 显式拷贝赋值操作符</span></span><br><span class="line">    MyClass&amp; <span class="keyword">operator</span>=(MyClass&amp;&amp; other) = <span class="keyword">default</span>; <span class="comment">// 显式移动赋值操作符</span></span><br><span class="line">  </span><br><span class="line">    ~<span class="built_in">MyClass</span>() = <span class="keyword">default</span>; <span class="comment">// 显式析构函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意，默认的特殊成员函数只能进行简单的成员到成员拷贝或移动，它们不会为复杂的所有权或资源管理逻辑提供自定义行为。对于需要进行深拷贝或复杂资源管理的类，你需要手动提供这些特殊成员函数的实现。</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>explicit关键词</title>
      <link href="/2021/12/22/explicit%E5%85%B3%E9%94%AE%E8%AF%8D/"/>
      <url>/2021/12/22/explicit%E5%85%B3%E9%94%AE%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<p>在 C++ 中，<code>explicit</code> 关键字用于防止类构造函数的隐式自动类型转换。默认情况下，如果一个构造函数只接受一个参数（或所有参数都有默认值），它可以被用作隐式类型转换操作符，这意味着它可以在不经过显式转换的情况下将一种类型的值转换为类类型的对象。</p><p>使用 <code>explicit</code> 关键字可以阻止编译器执行这种隐式转换，这有助于避免意外的类型转换可能导致的错误和混淆。当你希望类构造函数只在明确使用构造语法时被调用时，你应该将它声明为 <code>explicit</code></p><p>例如，考虑以下类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyString</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyString</span>(<span class="type">const</span> <span class="type">char</span>* s) &#123;</span><br><span class="line">        <span class="comment">// 构造函数，将const char*类型的字符串转换为MyString对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><p>如果没有 <code>explicit</code> 关键字，以下代码将被编译器接受，因为它会隐式地使用单参数构造函数将 <code>const char*</code> 类型转换为 <code>MyString</code> 类类型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printString</span><span class="params">(<span class="type">const</span> MyString&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printString</span>(<span class="string">&quot;Hello, World!&quot;</span>); <span class="comment">// 隐式调用 MyString(const char*) 构造函数</span></span><br></pre></td></tr></table></figure><p>为了防止这种隐式转换，你可以使用 <code>explicit</code> 关键字：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyString</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MyString</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构造函数，现在它阻止隐式转换</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printString</span>(<span class="string">&quot;Hello, World!&quot;</span>); <span class="comment">// 将产生编译错误</span></span><br><span class="line"><span class="built_in">printString</span>(<span class="built_in">MyString</span>(<span class="string">&quot;Hello, World!&quot;</span>)); <span class="comment">// 正确的显式转换</span></span><br></pre></td></tr></table></figure><p>在上面的修正版本中，第一个 <code>printString</code> 调用将不会编译通过，因为编译器不再执行隐式的构造函数调用。必须使用显式构造函数调用，如第二个 <code>printString</code> 调用所示。</p><p><code>explicit</code> 关键字也可以用于 C++11 引入的转换操作符，以防止隐式类型转换。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyString</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">std::string</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">string</span>(<span class="comment">/*...*/</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">MyString <span class="title">myStr</span><span class="params">(<span class="comment">/*...*/</span>)</span></span>;</span><br><span class="line">std::string str = <span class="built_in">static_cast</span>&lt;std::string&gt;(myStr); <span class="comment">// 显式转换</span></span><br><span class="line">std::string str2 = myStr; <span class="comment">// 将产生编译错误，因为转换操作符是 explicit 的</span></span><br></pre></td></tr></table></figure><p>在这个例子中，即使 <code>MyString</code> 类提供了到 <code>std::string</code> 的转换，该转换操作符被声明为 <code>explicit</code>，所以它不会执行隐式转换。需要使用显式 <code>static_cast</code> 进行转换。</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复制语义和移动语义</title>
      <link href="/2021/12/22/%E5%A4%8D%E5%88%B6%E8%AF%AD%E4%B9%89%E5%92%8C%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89/"/>
      <url>/2021/12/22/%E5%A4%8D%E5%88%B6%E8%AF%AD%E4%B9%89%E5%92%8C%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>复制语义（Copy Semantics）涉及创建对象的深层次副本，包含对其所有成员（包括指向的动态资源）的复制。移动语义（Move Semantics）则是C++11引入的一种优化，它允许“窃取”临时对象的资源，避免不必要的复制。</p><p>以下是一个简单的<code>Vector</code>类的例子，该类具有动态分配的数组，用以展示复制语义和移动语义的区别：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> <span class="comment">// For std::copy</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span>   <span class="comment">// For std::move</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">Vector</span>(<span class="type">size_t</span> size) : <span class="built_in">size_</span>(size), <span class="built_in">data_</span>(<span class="keyword">new</span> <span class="type">int</span>[size]) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    ~<span class="built_in">Vector</span>() &#123; <span class="keyword">delete</span>[] data_; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝构造函数（复制语义）</span></span><br><span class="line">    <span class="built_in">Vector</span>(<span class="type">const</span> Vector&amp; other) : <span class="built_in">size_</span>(other.size_), <span class="built_in">data_</span>(<span class="keyword">new</span> <span class="type">int</span>[other.size_]) &#123;</span><br><span class="line">        std::<span class="built_in">copy</span>(other.data_, other.data_ + size_, data_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移动构造函数（移动语义）</span></span><br><span class="line">    <span class="built_in">Vector</span>(Vector&amp;&amp; other) <span class="keyword">noexcept</span>: <span class="built_in">size_</span>(other.size_), <span class="built_in">data_</span>(other.data_) &#123;</span><br><span class="line">        other.size_ = <span class="number">0</span>;   <span class="comment">// 将other对象置于有效且确定的状态</span></span><br><span class="line">        other.data_ = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更多成员函数...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">size_t</span> size_;</span><br><span class="line">    <span class="type">int</span>* data_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="拷贝构造函数（复制语义）"><a href="#拷贝构造函数（复制语义）" class="headerlink" title="拷贝构造函数（复制语义）"></a>拷贝构造函数（复制语义）</h3><p>当你使用拷贝构造函数创建一个新的<code>Vector</code>对象时，每个成员都会被复制到新对象中。对于动态分配的数组，会分配一块新的内存区域，并将原始数组的内容复制到这块新内存中。这保证了两个对象（原始对象和拷贝对象）之间的数据是完全独立的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Vector <span class="title">v1</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">// 创建一个Vector对象v1</span></span><br><span class="line">Vector v2 = v1; <span class="comment">// 使用拷贝构造函数创建v2作为v1的副本</span></span><br></pre></td></tr></table></figure><p>在上述代码中，<code>v2</code>是<code>v1</code>的一个完整副本，<code>v1</code>和<code>v2</code>各自拥有各自的内存区域。</p><h3 id="移动构造函数（移动语义）"><a href="#移动构造函数（移动语义）" class="headerlink" title="移动构造函数（移动语义）"></a>移动构造函数（移动语义）</h3><p>当你使用移动构造函数创建一个新的<code>Vector</code>对象时，原始对象的资源（在这里是动态分配的数组）会被“移动”到新对象中，而原始对象则被置于一个有效但“空”的状态（在这里是<code>data_</code>指针设置为<code>nullptr</code>，<code>size_</code>设置为0）。这避免了不必要的复制，用于临时对象或即将被销毁的对象特别有效，因为它大幅度减少了性能开销。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Vector <span class="title">v3</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">// 创建一个Vector对象v3</span></span><br><span class="line">Vector v4 = std::<span class="built_in">move</span>(v3); <span class="comment">// 使用移动构造函数创建v4，&quot;窃取&quot; v3的资源</span></span><br></pre></td></tr></table></figure><p>在上述代码中，<code>v4</code>现在拥有原本属于<code>v3</code>的内存，而<code>v3</code>现在不再拥有任何资源，因此不会在析构时释放<code>v4</code>正在使用的内存，从而避免了潜在的双重释放问题。</p><h3 id="区别总结"><a href="#区别总结" class="headerlink" title="区别总结"></a>区别总结</h3><ul><li><strong>复制语义</strong>：在使用拷贝构造函数时，会创建对象的独立副本，包括复制动态分配的资源。</li><li><strong>移动语义</strong>：在使用移动构造函数时，会将资源的所有权从一个对象转移给另一个对象，通常这会留下一个处于安全但无资源的原始对象状态。</li></ul>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造函数成员初始化列表</title>
      <link href="/2021/12/22/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%88%90%E5%91%98%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8/"/>
      <url>/2021/12/22/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%88%90%E5%91%98%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>在C++中，构造函数成员初始化列表是一种在构造函数体执行之前初始化类成员变量的机制。这不仅能提高效率，还是初始化具有非默认构造函数的类成员、常量成员、引用成员和没有默认构造函数的基类的唯一方法。</p><p>构造函数成员初始化列表位于构造函数参数列表之后，函数体之前，以冒号开始，后面跟着一个或多个用逗号分隔的初始化器。<strong>每个初始化器都有一个成员变量名字和相应的初始化表达式</strong>，这个表达式可以是任意复杂度的。</p><p>下面是构造函数成员初始化列表的一个示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> x, <span class="type">double</span> y) : <span class="built_in">id</span>(x), <span class="built_in">value</span>(y) &#123;</span><br><span class="line">        <span class="comment">// 构造函数体</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> id;    <span class="comment">// 常量成员，必须在成员初始化列表中初始化</span></span><br><span class="line">    <span class="type">double</span> value;    <span class="comment">// 普通成员，可以在成员初始化列表中初始化</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><p>在上面的例子中，<code>MyClass</code>有两个成员变量：<code>id</code>和<code>value</code>。因为<code>id</code>是一个常量成员，所以必须在成员初始化列表中初始化。对于<code>value</code>，在成员初始化列表中初始化是一个更高效的选择，因为它避免了在构造函数体内对<code>value</code>进行额外的赋值操作。</p><p><strong>成员初始化列表执行顺序与成员在类中声明的顺序相同，而不是它们在初始化列表中出现的顺序</strong>。因此，即使初始化列表中的顺序不同，成员的初始化顺序仍然是固定的。这一点在成员之间有依赖关系时尤其重要。</p><p><strong>成员初始化列表也被用于基于委托的构造函数（delegate constructors</strong>），这是C++11中新增的特性，允许一个构造函数调用类中的另一个构造函数来初始化对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>() : <span class="built_in">MyClass</span>(<span class="number">0</span>, <span class="number">0.0</span>) &#123;&#125; <span class="comment">// 委托给另一个构造函数</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> x, <span class="type">double</span> y) : <span class="built_in">id</span>(x), <span class="built_in">value</span>(y) &#123;</span><br><span class="line">        <span class="comment">// 构造函数体</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">double</span> value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这个例子中，无参构造函数委托给有参构造函数进行初始化。</p><p>总之，构造函数成员初始化列表是C++中初始化类成员的推荐方法，特别是对于那些不能在类体内或构造函数体内被赋值的成员。</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左值右值</title>
      <link href="/2021/12/22/%E5%B7%A6%E5%80%BC%E5%8F%B3%E5%80%BC/"/>
      <url>/2021/12/22/%E5%B7%A6%E5%80%BC%E5%8F%B3%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>在C++中，对值的分类非常重要，因为它决定了你可以对这些值做什么操作。左值（lvalue）和右值（rvalue）是C++中的两种主要的表达式类别，而左值引用和右值引用则是与之对应的引用类型。</p><h3 id="左值-Lvalue"><a href="#左值-Lvalue" class="headerlink" title="左值 (Lvalue)"></a>左值 (Lvalue)</h3><p>左值是指那些表达式，它们指向内存中的一个固定位置，这样的表达式可以出现在赋值语句的左侧。它们通常是一个变量、数组的一个元素或者一个对象的一个属性。左值可以取地址，即可以使用<code>&amp;</code>运算符来得到其内存地址。</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">10</span>; <span class="comment">// x是一个左值</span></span><br><span class="line">x = <span class="number">20</span>; <span class="comment">// x可以在赋值语句的左侧出现</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>x</code>是一个左值，因为你可以对它赋值。<code>x</code>具有一个持久的内存地址，可以在程序的多个地方引用和修改。</p><span id="more"></span><h3 id="右值-Rvalue"><a href="#右值-Rvalue" class="headerlink" title="右值 (Rvalue)"></a>右值 (Rvalue)</h3><p>右值是指那些不指向内存中固定位置的表达式。右值通常是临时的，不能取地址，也不能在赋值语句的左侧出现。一个典型的右值是字面量或者一个表达式的结果（例如函数返回的临时对象或者一个算术表达式的结果）。</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> y = <span class="number">10</span> + <span class="number">5</span>; <span class="comment">// 10 + 5是一个右值</span></span><br></pre></td></tr></table></figure><p>这里的表达式<code>10 + 5</code>就是一个右值，因为它不对应内存中的一个固定位置，而是一个临时计算的结果，它的值可以用来初始化变量<code>y</code>。</p><h3 id="左值引用-Lvalue-Reference"><a href="#左值引用-Lvalue-Reference" class="headerlink" title="左值引用 (Lvalue Reference)"></a>左值引用 (Lvalue Reference)</h3><p>左值引用是对左值的引用。在声明中，左值引用由类型后跟一个<code>&amp;</code>符号表示。左值引用可以用来创建一个对象的别名。</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span>&amp; ref = a; <span class="comment">// ref是对整数a的左值引用</span></span><br><span class="line">ref = <span class="number">10</span>; <span class="comment">// 修改ref也会修改a</span></span><br></pre></td></tr></table></figure><p>这里的<code>ref</code>是<code>a</code>的左值引用，改变<code>ref</code>的值也会改变<code>a</code>的值。</p><h3 id="右值引用-Rvalue-Reference"><a href="#右值引用-Rvalue-Reference" class="headerlink" title="右值引用 (Rvalue Reference)"></a>右值引用 (Rvalue Reference)</h3><p>右值引用是C++11中引入的一种新类型引用，它允许引用右值。在声明中，右值引用由类型后跟一个<code>&amp;&amp;</code>符号表示。右值引用使得可以安全地“移动”资源，而不是复制资源，这是C++11中引入移动语义和完美转发的关键部分。</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>&amp;&amp; rref = <span class="number">10</span> + <span class="number">5</span>; <span class="comment">// rref是对临时右值的引用</span></span><br></pre></td></tr></table></figure><p>这里的<code>rref</code>是一个右值引用，它引用了<code>10 + 5</code>这个右值表达式的结果。</p><p>总结：</p><ul><li>左值：可以在赋值语句的左侧，有持续的状态，可以取地址。</li><li>右值：临时的，通常不能取地址，不能在赋值语句的左侧。</li><li>左值引用：对左值的引用，用<code>&amp;</code>表示。</li><li>右值引用：对右值的引用，用<code>&amp;&amp;</code>表示，C++11中新增。</li></ul>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本类型比较</title>
      <link href="/2021/12/21/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83/"/>
      <url>/2021/12/21/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<h3 id="Java基本数据类型"><a href="#Java基本数据类型" class="headerlink" title="Java基本数据类型"></a>Java基本数据类型</h3><table><thead><tr><th>类型类别</th><th>类型名称</th><th>大小（位）</th><th>取值范围</th><th>默认值</th></tr></thead><tbody><tr><td>整数类型</td><td><code>byte</code></td><td>8</td><td>-128 到 127</td><td>0</td></tr><tr><td></td><td><code>short</code></td><td>16</td><td>-32,768 到 32,767</td><td>0</td></tr><tr><td></td><td><code>int</code></td><td>32</td><td>-2^31 到 2^31-1</td><td>0</td></tr><tr><td></td><td><code>long</code></td><td>64</td><td>-2^63 到 2^63-1</td><td>0L</td></tr><tr><td>浮点数类型</td><td><code>float</code></td><td>32</td><td>精度约为 6-7 位十进制数</td><td>0.0f</td></tr><tr><td></td><td><code>double</code></td><td>64</td><td>精度约为 15 位十进制数</td><td>0.0d</td></tr><tr><td>字符类型</td><td><code>char</code></td><td>16</td><td>0 到 65,535（无符号）</td><td></td></tr><tr><td>布尔类型</td><td><code>boolean</code></td><td>未指定</td><td><code>true</code> 或 <code>false</code></td><td><code>false</code></td></tr></tbody></table><p>注意：</p><ol><li>Java的<code>char</code>类型是基于Unicode编码的，因此可以表示全球上几乎所有的字符。</li><li>Java的基本数据类型大小是固定的，与平台无关，这有助于Java程序具有良好的可移植性。</li><li>Java中没有表示无符号整数的基本数据类型，在需要大范围无符号数据时通常使用更大的类型或使用类库。</li><li>布尔类型<code>boolean</code>并没有明确指定大小，但仅能取<code>true</code>或<code>false</code>中的一个值。</li></ol><span id="more"></span><h3 id="C-基本数据类型"><a href="#C-基本数据类型" class="headerlink" title="C++基本数据类型"></a>C++基本数据类型</h3><table><thead><tr><th>类型类别</th><th>类型名称</th><th>大小（至少）</th><th>描述</th></tr></thead><tbody><tr><td>整型</td><td><code>char</code></td><td>8位</td><td>通常用于存储字符。根据实现可能是有符号或无符号的。</td></tr><tr><td></td><td><code>unsigned char</code></td><td>8位</td><td>存储小的无符号整数或字符。</td></tr><tr><td></td><td><code>signed char</code></td><td>8位</td><td>存储小的有符号整数或字符。</td></tr><tr><td></td><td><code>short</code></td><td>16位</td><td>存储短整数。</td></tr><tr><td></td><td><code>unsigned short</code></td><td>16位</td><td>存储短无符号整数。</td></tr><tr><td></td><td><code>int</code></td><td>16位</td><td>存储整数。</td></tr><tr><td></td><td><code>unsigned int</code></td><td>16位</td><td>存储无符号整数。</td></tr><tr><td></td><td><code>long</code></td><td>32位</td><td>存储长整数。</td></tr><tr><td></td><td><code>unsigned long</code></td><td>32位</td><td>存储长无符号整数。</td></tr><tr><td></td><td><code>long long</code></td><td>64位</td><td>存储更长的整数（C++11）。</td></tr><tr><td></td><td><code>unsigned long long</code></td><td>64位</td><td>存储更长的无符号整数（C++11）。</td></tr><tr><td>浮点数类型</td><td><code>float</code></td><td>实现依赖</td><td>单精度浮点数。</td></tr><tr><td></td><td><code>double</code></td><td>实现依赖</td><td>双精度浮点数。</td></tr><tr><td></td><td><code>long double</code></td><td>实现依赖</td><td>扩展精度浮点数。</td></tr><tr><td>布尔类型</td><td><code>bool</code></td><td>实现依赖</td><td>用于表示布尔逻辑（真或假）。</td></tr><tr><td>字符类型</td><td><code>wchar_t</code></td><td>实现依赖</td><td>宽字符类型，用于Unicode字符。</td></tr><tr><td></td><td><code>char16_t</code></td><td>16位</td><td>用于表示UTF-16字符（C++11）。</td></tr><tr><td></td><td><code>char32_t</code></td><td>32位</td><td>用于表示UTF-32字符（C++11）。</td></tr><tr><td>空类型</td><td><code>void</code></td><td>N&#x2F;A</td><td>表示无类型，常用于指定无返回值的函数类型。</td></tr><tr><td>固定宽度整数类型</td><td>（例如：<code>int8_t</code>, <code>uint32_t</code>）</td><td>实现依赖</td><td>提供固定宽度的整数表示（C++11，需包含<code>&lt;cstdint&gt;</code>头文件）。</td></tr></tbody></table><p>请注意，所提供的大小是类型在C++标准中规定的最小大小，实际大小可能会因编译器和平台的不同而有所不同。 若要获取平台特定的大小，通常使用<code>sizeof</code>运算符进行检查。</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板和泛型编程</title>
      <link href="/2021/12/21/%E6%A8%A1%E6%9D%BF%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/"/>
      <url>/2021/12/21/%E6%A8%A1%E6%9D%BF%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>C++的模板（Templates）和Java的泛型（Generics）都是用于实现代码的参数化类型，但是它们在设计理念、实现机制和功能上有很大的不同。下面是几个主要的区别：</p><h3 id="1-编译时机"><a href="#1-编译时机" class="headerlink" title="1. 编译时机"></a>1. 编译时机</h3><ul><li>C++模板是在<strong>编译时</strong>进行实例化的。当模板用特定类型实例化时，编译器会生成这个类型的具体代码。这种方法称为模板元编程（template metaprogramming），它允许非常灵活和强大的类型操作，但也会增加编译时间和生成的二进制文件大小。</li><li>Java泛型是基于<strong>类型擦除</strong>实现的，这意味着泛型信息只在编译时用于类型检查，然后被擦除，运行时并不存在具体类型的信息。泛型类和方法在编译后都会转换为普通的类和方法，泛型类型参数会替换为它们的边界或者<code>Object</code>。因此，在运行时是没有类型参数的具体信息的。</li></ul><span id="more"></span><h3 id="2-类型安全"><a href="#2-类型安全" class="headerlink" title="2. 类型安全"></a>2. 类型安全</h3><ul><li>C++模板在编译时生成具体的类型代码，所以它们是类型安全的，你可以得到有关类型错误的编译时检查。</li><li>Java泛型也提供了编译时的类型安全，但由于类型擦除，在运行时可能会出现类型转换问题。例如，Java泛型的集合在运行时都是相同类型的集合，因此一个原始类型的集合可以接受任何类型的对象。</li></ul><h3 id="3-性能"><a href="#3-性能" class="headerlink" title="3. 性能"></a>3. 性能</h3><ul><li>C++模板直接生成了具体类型的代码，因此没有运行时类型检查的开销，这通常会有更好的性能。</li><li>Java泛型在运行时可能需要进行类型转换（例如，从<code>Object</code>类型转换到具体的泛型类型），这会导致一定的性能开销。</li></ul><h3 id="4-功能"><a href="#4-功能" class="headerlink" title="4. 功能"></a>4. 功能</h3><ul><li>C++模板非常灵活，<strong>支持非类型参数，模板特化，部分特化，变参模板等高级功能</strong>。它们允许在编译时进行复杂的类型计算和转换。</li><li>Java泛型功能较为有限，<strong>不支持非类型参数，特化等功能</strong>，其主要目的是提供类型安全和减少类型转换的需要。</li></ul><h3 id="5-语法"><a href="#5-语法" class="headerlink" title="5. 语法"></a>5. 语法</h3><ul><li>C++模板使用尖括号<code>&lt;</code>和<code>&gt;</code>进行声明和定义，例如<code>template &lt;typename T&gt;</code>。</li><li>Java泛型也使用尖括号，但它的类型参数通常被限定为单个大写字母，例如<code>&lt;T&gt;</code>。</li></ul><h3 id="6-反射"><a href="#6-反射" class="headerlink" title="6. 反射"></a>6. 反射</h3><ul><li>由于C++缺乏原生反射支持，模板实例化的类型信息在运行时是不可用的。</li><li>Java在运行时通过反射可以访问关于类和对象的信息，但由于类型擦除，泛型类型参数的具体信息是不可用的。</li></ul><h3 id="用法比较："><a href="#用法比较：" class="headerlink" title="用法比较："></a>用法比较：</h3><ul><li><strong>C++模板示例</strong>：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">add</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">add</span>(<span class="number">5</span>, <span class="number">10</span>); <span class="comment">// 编译时实例化为add(int, int)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>Java泛型示例</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">add</span><span class="params">(T a, T b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b; <span class="comment">// 错误：无法直接对泛型类型做加法操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> add(<span class="number">5</span>, <span class="number">10</span>); <span class="comment">// 泛型方法调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>C++模板提供了极大的灵活性和强大的编译时功能，适用于性能要求高和需要复杂类型操作的场景。而Java泛型则是设计来提供编译时的类型安全和简化类型转换，牺牲了一些性能和灵活性来获得跨平台的一致性和简洁性。两者都是各自语言领域内成功的类型抽象机制，但它们的设计理念和实现方法有很大差异。</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>const不同位置的区别</title>
      <link href="/2021/12/21/const%E4%B8%8D%E5%90%8C%E4%BD%8D%E7%BD%AE%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/12/21/const%E4%B8%8D%E5%90%8C%E4%BD%8D%E7%BD%AE%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>在C++中，<code>const</code>关键字的位置相对于类型和星号（<code>*</code>，用于指针）或者引用符号（<code>&amp;</code>）会影响它修饰的内容。这些不同的位置可以表示不同的含义，例如指针常量、常量指针、常量引用等。以下是<code>const</code>位置对含义的影响：</p><h3 id="1-指针和const"><a href="#1-指针和const" class="headerlink" title="1. 指针和const"></a>1. 指针和<code>const</code></h3><ul><li><p><code>const</code>在类型前：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span>* ptr;</span><br></pre></td></tr></table></figure><p>这意味着<code>ptr</code>是一个指向<code>const int</code>的指针。你不能通过这个指针修改它指向的值，但是你可以修改指针<code>ptr</code>本身，使它指向另一个地址。</p></li><li><p><code>const</code>在星号后：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="type">const</span> ptr = &amp;someIntVar;</span><br></pre></td></tr></table></figure><p>这意味着<code>ptr</code>是一个指向<code>int</code>的常量指针。你可以修改指针所指向的值，但是不能修改指针<code>ptr</code>本身的值，即不能让它指向另一个地址。这里，指针必须在声明时初始化，并且之后不能再指向其他地址。</p></li><li><p><code>const</code>同时在类型前和星号后：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> ptr = &amp;someIntVar;</span><br></pre></td></tr></table></figure><p><code>ptr</code>是一个指向<code>const int</code>的常量指针。既不能通过指针修改所指向的值，也不能修改指针本身的值。</p></li></ul><span id="more"></span><h3 id="2-引用和const"><a href="#2-引用和const" class="headerlink" title="2. 引用和const"></a>2. 引用和<code>const</code></h3><ul><li><p>引用总是“常量”的，因为一旦它们被初始化后就不能再改变所引用的对象。但是，引用可以是对常量的引用，这意味着通过引用不能修改它所绑定的对象。</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; ref = someIntVar;</span><br></pre></td></tr></table></figure></li></ul><p>这意味着<code>ref</code>是对<code>const int</code>的引用，一旦绑定，你不能通过<code>ref</code>来修改所引用的值。但是原始变量如果不是<code>const</code>的话，仍然可以直接修改。</p><h3 id="3-类成员函数和const"><a href="#3-类成员函数和const" class="headerlink" title="3. 类成员函数和const"></a>3. 类成员函数和<code>const</code></h3><ul><li><p><code>const</code>在成员函数参数列表后：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getValue</span><span class="params">()</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure></li></ul><p>这意味着 <code>getValue</code>是一个常量成员函数，这种函数不能修改调用它的对象的任何非静态成员。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><code>const</code>在类型前：修饰的是类型，意味着你不能通过指针或引用修改所指向或引用的值。</li><li><code>const</code>在指针声明中星号后：修饰的是指针本身，意味着指针不能指向其他地方，但指针指向的值可以修改。</li><li><code>const</code>在成员函数后：修饰的是这个成员函数，在这个成员函数中，不能修改任何成员变量（除非它们被声明为<code>mutable</code>）。</li></ul><p><code>const</code>的正确使用能够提高程序的健壮性，防止代码中不小心修改不该修改的数据，增强程序的可读性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚函数和纯虚函数</title>
      <link href="/2021/12/21/%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8C%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0/"/>
      <url>/2021/12/21/%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8C%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="虚函数-纯虚函数区别"><a href="#虚函数-纯虚函数区别" class="headerlink" title="虚函数-纯虚函数区别"></a>虚函数-纯虚函数区别</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 虚函数允许派生类根据自己的需要重写基类的行为。在基类中，你通过在函数声明前加上virtual关键字来声明虚函数。</span><br><span class="line">2. 纯虚函数（Pure Virtual Function）</span><br><span class="line">纯虚函数是一种特殊的虚函数，你无法为其提供实现，而是在其声明时将其初始化为0。声明一个或多个纯虚函数的类称为抽象类（Abstract Class），你不能创建抽象类的实例。纯虚函数的目的是强制派生类提供自己的实现。</span><br></pre></td></tr></table></figure><p>在C++中，成员函数的重写（override）是多态的一个核心概念，它允许派生类改变基类中某个函数的行为。对于虚函数来说，派生类确实可以直接重写基类中的虚函数。但是，对于非虚函数，派生类也可以提供自己的实现，这通常被称为隐藏（hiding）而不是重写。</p><p>我们来区分一下：</p><ol><li><strong>函数隐藏（Function Hiding）</strong>：如果派生类声明了一个和基类同名的成员函数（即使参数列表不同），它将隐藏所有基类中具有相同名称的成员函数。在派生类的对象中调用这个函数时，只有派生类的版本可见，基类的版本被隐藏了。</li><li><strong>函数重写（Function Overriding）</strong>：仅当派生类中的函数与基类中的虚函数有相同的签名（函数名、参数列表、const属性等）时，才称之为重写。在派生类的对象上调用这样的函数时，将使用动态绑定，根据对象的实际类型调用相应类的函数实现。</li></ol><span id="more"></span><p>以下是一个例子来详细说明这两种情况：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base func&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">vFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base vFunc&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 函数隐藏，即使参数不同也会隐藏基类的所有同名函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span>)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived func with int parameter&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 函数重写，因为vFunc在基类中被声明为虚函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">vFunc</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived vFunc&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Derived d;</span><br><span class="line">    d.<span class="built_in">func</span>(<span class="number">10</span>); <span class="comment">// 调用Derived中的func，基类的func被隐藏</span></span><br><span class="line">    <span class="comment">// d.func(); // 错误！基类的func被隐藏了，即使没有参数也不能调用</span></span><br><span class="line">    d.<span class="built_in">vFunc</span>(); <span class="comment">// 调用Derived中的vFunc，重写了基类的虚函数</span></span><br><span class="line"></span><br><span class="line">    Base* b = &amp;d;</span><br><span class="line">    b-&gt;<span class="built_in">vFunc</span>(); <span class="comment">// 虚函数重写，调用Derived中的vFunc</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Derived::func(int)</code>隐藏了<code>Base::func()</code>，所以即使没有参数提供，你也不能通过<code>Derived</code>的对象来调用<code>Base::func()</code>。另一方面，<code>Derived::vFunc()</code>重写了<code>Base::vFunc()</code>，因此使用指向<code>Derived</code>对象的基类指针调用<code>vFunc()</code>时，将调用<code>Derived</code>的实现。</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针和引用</title>
      <link href="/2021/12/20/%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8/"/>
      <url>/2021/12/20/%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>import和include区别</title>
      <link href="/2021/12/18/import%E5%92%8Cinclude%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/12/18/import%E5%92%8Cinclude%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>在Java和C++中，包含和访问库中的类型（如字符串）有不同的机制。</p><h3 id="Java中的import语句："><a href="#Java中的import语句：" class="headerlink" title="Java中的import语句："></a>Java中的<code>import</code>语句：</h3><p>在Java中，当你使用<code>import</code>语句时，<strong>它告诉编译器在编译时需要查找哪些类</strong>。Java中的<code>String</code>类位于<code>java.lang</code>包中，该包是自动被所有Java程序导入的，因此你通常不需要显式导入<code>java.lang.String</code>。你可以直接使用<code>String</code>类而不需要任何前缀。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List; <span class="comment">// 导入java.util包中的List接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">myString</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>; <span class="comment">// 直接使用String</span></span><br><span class="line">        List&lt;String&gt; myList; <span class="comment">// 使用导入的List接口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-中的-include指令："><a href="#C-中的-include指令：" class="headerlink" title="C++中的#include指令："></a>C++中的<code>#include</code>指令：</h3><p>在C++中，当你使用<code>#include &lt;string&gt;</code>预处理指令时，<strong>你是在告诉编译器在编译之前将<code>&lt;string&gt;</code>头文件的内容文本替换到源文件中</strong>。然而，C++标准库中的很多功能都是在命名空间<code>std</code>中定义的。</p><p>因此，当你包含<code>&lt;string&gt;</code>头文件后，你还需要使用<code>std::</code>的前缀来访问<code>std</code>命名空间中的<code>string</code>类。</p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string myString = <span class="string">&quot;Hello, World!&quot;</span>; <span class="comment">// 使用std命名空间的前缀</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; myVector; <span class="comment">// 同样使用std命名空间的前缀</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果你想避免在每次使用标准库中的类型时都键入<code>std::</code>前缀，你可以使用<code>using</code>声明或<code>using</code>指令。但请注意，过度使用<code>using namespace std;</code>可能会导致名称冲突，特别是在大型项目或头文件中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string; <span class="comment">// 只导入std命名空间中的string类</span></span><br><span class="line"><span class="keyword">using</span> std::vector; <span class="comment">// 只导入std命名空间中的vector类</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string myString = <span class="string">&quot;Hello, World!&quot;</span>; <span class="comment">// 不需要std::前缀</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; myVector; <span class="comment">// 不需要std::前缀</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; <span class="comment">// 导入整个std命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string myString = <span class="string">&quot;Hello, World!&quot;</span>; <span class="comment">// 不需要std::前缀</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; myVector; <span class="comment">// 不需要std::前缀</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结来说，C++中的<code>#include &lt;string&gt;</code>和Java中的<code>import java.lang.String</code>有不同的含义和行为。在C++中，即使包含了<code>&lt;string&gt;</code>头文件，也需要指定命名空间前缀<code>std::</code>来访问<code>string</code>类，除非你使用了<code>using</code>声明或指令来引入<code>std</code>命名空间。</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>struct和class区别</title>
      <link href="/2021/11/19/struct%E5%92%8Cclass/"/>
      <url>/2021/11/19/struct%E5%92%8Cclass/</url>
      
        <content type="html"><![CDATA[<p>在C++中，<code>struct</code>（结构体）和<code>class</code>（类）的基本用法非常相似，因为C++中的结构体可以含有函数和构造函数，它们都可以用来定义包含数据成员和成员函数的自定义类型。不过，结构体和类之间存在一些关键区别：</p><h3 id="默认访问权限"><a href="#默认访问权限" class="headerlink" title="默认访问权限"></a>默认访问权限</h3><ul><li><code>struct</code>：默认的成员访问权限和继承访问权限是<code>public</code>。</li><li><code>class</code>：默认的成员访问权限和继承访问权限是<code>private</code>。</li></ul><p>这意味着当你使用<code>struct</code>或<code>class</code>关键字定义类型时，不显式指定访问修饰符的成员在<code>struct</code>中默认是公开的，在<code>class</code>中默认是私有的。</p><span id="more"></span><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">struct MyStruct &#123;</span><br><span class="line">    int x; // 默认是public</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class MyClass &#123;</span><br><span class="line">    int y; // 默认是private</span><br><span class="line">public:</span><br><span class="line">    MyClass(int val) : y(val) &#123;&#125;</span><br><span class="line">    int getY() &#123; return y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MyStruct s;</span><br><span class="line">s.x = 5; // 直接访问</span><br><span class="line"></span><br><span class="line">MyClass c(5);</span><br><span class="line">// c.y = 5; // 错误：y是私有的，不能直接访问</span><br><span class="line">int value = c.getY(); // 通过成员函数访问</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>尽管两者几乎可以互换使用，但是按照传统的编程习惯和约定，它们各有不同的使用场景：</p><ul><li><code>struct</code>：通常用于较简单的数据结构，主要用于存储数据，成员默认公开。</li><li><code>class</code>：用于更复杂的数据结构，可能包含抽象行为和封装，成员默认私有。</li></ul><p>这些约定主要是为了提高代码的可读性和意图表达。使用<code>struct</code>通常意味着该类型更倾向于数据存储而非行为，而使用<code>class</code>则意味着更多的封装和面向对象的设计。</p><h3 id="其他差异"><a href="#其他差异" class="headerlink" title="其他差异"></a>其他差异</h3><p>在C++中，<code>struct</code>和<code>class</code>在语法上几乎是相同的，因为<code>struct</code>也可以继承其他类，拥有构造函数、析构函数、成员函数和私有成员。因此，上述的访问权限差异是它们唯一显著的区别，而且这个区别只是一个默认行为，完全可以通过显式指定访问修饰符来改变。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说，<code>struct</code>和<code>class</code>在C++中的用法区别主要是默认访问权限不同，以及传统上它们各自的使用场景。在实际编程中，你可以根据具体的需求和设计习惯来选择使用哪一个</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>using用法</title>
      <link href="/2021/11/10/using%E7%94%A8%E6%B3%95/"/>
      <url>/2021/11/10/using%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在C++中，<code>using</code>关键字有几种用途，包括定义类型别名、引入命名空间中的名称，以及在C++11及后续版本中用于模板别名。以下是<code>using</code>关键字的几种常见用途：</p><h3 id="1-类型别名"><a href="#1-类型别名" class="headerlink" title="1. 类型别名"></a>1. 类型别名</h3><p>和<code>typedef</code>一样，<code>using</code>可以用来给类型定义一个新的名称。这在C++11中引入，目的是为了提供一种比<code>typedef</code>更直观的语法来定义类型别名。</p><h4 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> new_type_name = existing_type;</span><br></pre></td></tr></table></figure><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Integer = <span class="type">int</span>;</span><br><span class="line"><span class="keyword">using</span> StringList = std::list&lt;std::string&gt;;</span><br><span class="line"><span class="keyword">using</span> CharArray = <span class="type">char</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">Integer num = <span class="number">42</span>;</span><br><span class="line">StringList names;</span><br><span class="line">CharArray array = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure> <span id="more"></span><h3 id="2-模板别名"><a href="#2-模板别名" class="headerlink" title="2. 模板别名"></a>2. 模板别名</h3><p><code>using</code>关键字在C++11中引入的另一个重要特性是模板别名，它允许我们为模板类型定义别名。</p><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> Ptr = T*;</span><br><span class="line"></span><br><span class="line">Ptr&lt;<span class="type">int</span>&gt; intPointer; <span class="comment">// 等同于int*</span></span><br><span class="line">Ptr&lt;std::string&gt; stringPointer; <span class="comment">// 等同于std::string*</span></span><br></pre></td></tr></table></figure><h3 id="3-命名空间"><a href="#3-命名空间" class="headerlink" title="3. 命名空间"></a>3. 命名空间</h3><p><code>using</code>声明可以引入命名空间中的特定成员，这样在当前作用域内就无需使用命名空间的前缀就可以访问这些成员。</p><h4 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line">string str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><p><code>using</code>指令可以将整个命名空间的成员引入当前作用域。</p><h4 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-继承构造函数"><a href="#4-继承构造函数" class="headerlink" title="4. 继承构造函数"></a>4. 继承构造函数</h3><p>在派生类中，<code>using</code>声明可以用来引入基类的构造函数，允许派生类直接使用基类的构造函数初始化对象。</p><h4 id="示例：-4"><a href="#示例：-4" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">int</span> value) &#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> Base::Base; <span class="comment">// 继承基类的构造函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Derived <span class="title">obj</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">// 使用Base类的构造函数初始化Derived对象</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>在使用<code>using</code>声明时，需要注意潜在的名称冲突和可读性问题，尤其是<code>using namespace std;</code>这种声明可能导致意外的名称覆盖。</li><li>在类的继承中，使用<code>using</code>声明基类的构造函数时，只是提供了访问基类构造函数的途径，并不会自动继承基类的成员初始化逻辑。</li><li>在模板编程中，<code>using</code>关键字是首选的方式来定义别名，因为它不仅能定义常规类型别名，还能定义模板别名。</li></ul><p><code>using</code>关键字的这些用途提供了在C++中编写更清晰、更灵活和更强大代码的能力。</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typedef用法</title>
      <link href="/2021/08/01/typedef%E7%94%A8%E6%B3%95/"/>
      <url>/2021/08/01/typedef%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><code>typedef</code>是C和C++中的一个关键字，它用于给数据类型创建一个新的名称（别名）。通过<code>typedef</code>，你可以为复杂的数据类型定义一个易于记忆和使用的名称。这在处理结构体、联合体、函数指针等复杂类型时特别有用。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> existing_type new_type_name;</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="1-为基本数据类型定义别名"><a href="#1-为基本数据类型定义别名" class="headerlink" title="1. 为基本数据类型定义别名"></a>1. 为基本数据类型定义别名</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> ulong;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> real;</span><br><span class="line"></span><br><span class="line">ulong number = <span class="number">123456789</span>;</span><br><span class="line">real pi = <span class="number">3.14159</span>;</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="2-为结构体定义别名"><a href="#2-为结构体定义别名" class="headerlink" title="2. 为结构体定义别名"></a>2. 为结构体定义别名</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125; Point;</span><br><span class="line"></span><br><span class="line">Point p1, p2;</span><br><span class="line">p1.x = <span class="number">10</span>;</span><br><span class="line">p1.y = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h4 id="3-为指针类型定义别名"><a href="#3-为指针类型定义别名" class="headerlink" title="3. 为指针类型定义别名"></a>3. 为指针类型定义别名</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span>* string;</span><br><span class="line"></span><br><span class="line">string name = <span class="string">&quot;John Doe&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="4-为数组类型定义别名"><a href="#4-为数组类型定义别名" class="headerlink" title="4. 为数组类型定义别名"></a>4. 为数组类型定义别名</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Matrix[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">Matrix m;</span><br><span class="line">m[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="5-为函数指针定义别名"><a href="#5-为函数指针定义别名" class="headerlink" title="5. 为函数指针定义别名"></a>5. 为函数指针定义别名</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*FunctionPointer)</span><span class="params">(<span class="type">int</span>, <span class="type">double</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">someFunction</span><span class="params">(<span class="type">int</span> i, <span class="type">double</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FunctionPointer fp = someFunction;</span><br><span class="line"><span class="built_in">fp</span>(<span class="number">5</span>, <span class="number">3.14</span>);</span><br></pre></td></tr></table></figure><h4 id="6-为模板类型定义别名（C-11中称为别名模板-using）"><a href="#6-为模板类型定义别名（C-11中称为别名模板-using）" class="headerlink" title="6. 为模板类型定义别名（C++11中称为别名模板 using）"></a>6. 为模板类型定义别名（C++11中称为别名模板 <code>using</code>）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用typedef定义别名</span></span><br><span class="line"><span class="keyword">typedef</span> std::vector&lt;std::string&gt; StringVector;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用C++11的using关键字定义别名</span></span><br><span class="line"><span class="keyword">using</span> StringVector = std::vector&lt;std::string&gt;;</span><br><span class="line"></span><br><span class="line">StringVector names;</span><br><span class="line">names.<span class="built_in">push_back</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">names.<span class="built_in">push_back</span>(<span class="string">&quot;Bob&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><strong>提高代码可读性</strong>：<code>typedef</code>可以用来简化复杂类型的名称，使代码更易读。</li><li><strong>平台独立性</strong>：通过<code>typedef</code>定义平台相关的类型，可以让代码更容易移植。例如，在不同的系统上，<code>typedef</code>可以用来为特定长度的整数类型定义一个统一的名称。</li><li><strong>抽象层</strong>：<code>typedef</code>可以为具体的类型提供一个抽象的层次，使得在代码中更改这个类型时更加容易。</li><li><strong>API设计</strong>：库或API设计者可以使用<code>typedef</code>来确保用户对于API使用的内部类型有一个简洁清晰的视图。</li></ul><p>虽然<code>typedef</code>在C++中仍然是有效的，但是自C++11起，<code>using</code>关键字的别名声明提供了一个更具表达力的替代方案。这在模板编程中尤其有用，因为它允许别名模板的使用。在某些复杂的类型别名情况下，<code>using</code>声明比<code>typedef</code>更为灵活和清晰。</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术总结</title>
      <link href="/2020/04/24/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
      <url>/2020/04/24/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="080cc08f0619c2fbb54fd663f6e4c6ca8ae77cf5972aa50fdc8362ae6f01fa36"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">input password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
